
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model user_availability
 * 
 */
export type user_availability = $Result.DefaultSelection<Prisma.$user_availabilityPayload>
/**
 * Model workout_progress
 * 
 */
export type workout_progress = $Result.DefaultSelection<Prisma.$workout_progressPayload>
/**
 * Model exercise_progress
 * 
 */
export type exercise_progress = $Result.DefaultSelection<Prisma.$exercise_progressPayload>
/**
 * Model workoutperweek
 * 
 */
export type workoutperweek = $Result.DefaultSelection<Prisma.$workoutperweekPayload>
/**
 * Model workout
 * 
 */
export type workout = $Result.DefaultSelection<Prisma.$workoutPayload>
/**
 * Model workout_exercise
 * 
 */
export type workout_exercise = $Result.DefaultSelection<Prisma.$workout_exercisePayload>
/**
 * Model exercise
 * 
 */
export type exercise = $Result.DefaultSelection<Prisma.$exercisePayload>
/**
 * Model group
 * 
 */
export type group = $Result.DefaultSelection<Prisma.$groupPayload>
/**
 * Model user_group_level
 * 
 */
export type user_group_level = $Result.DefaultSelection<Prisma.$user_group_levelPayload>
/**
 * Model excercise_group
 * 
 */
export type excercise_group = $Result.DefaultSelection<Prisma.$excercise_groupPayload>
/**
 * Model exercise_muscle
 * 
 */
export type exercise_muscle = $Result.DefaultSelection<Prisma.$exercise_musclePayload>
/**
 * Model muscle
 * 
 */
export type muscle = $Result.DefaultSelection<Prisma.$musclePayload>
/**
 * Model equipment
 * 
 */
export type equipment = $Result.DefaultSelection<Prisma.$equipmentPayload>
/**
 * Model exercise_equipment
 * 
 */
export type exercise_equipment = $Result.DefaultSelection<Prisma.$exercise_equipmentPayload>
/**
 * Model user_equipment
 * 
 */
export type user_equipment = $Result.DefaultSelection<Prisma.$user_equipmentPayload>
/**
 * Model workout_per_week_workout
 * 
 */
export type workout_per_week_workout = $Result.DefaultSelection<Prisma.$workout_per_week_workoutPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_availability`: Exposes CRUD operations for the **user_availability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_availabilities
    * const user_availabilities = await prisma.user_availability.findMany()
    * ```
    */
  get user_availability(): Prisma.user_availabilityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout_progress`: Exposes CRUD operations for the **workout_progress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workout_progresses
    * const workout_progresses = await prisma.workout_progress.findMany()
    * ```
    */
  get workout_progress(): Prisma.workout_progressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise_progress`: Exposes CRUD operations for the **exercise_progress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercise_progresses
    * const exercise_progresses = await prisma.exercise_progress.findMany()
    * ```
    */
  get exercise_progress(): Prisma.exercise_progressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workoutperweek`: Exposes CRUD operations for the **workoutperweek** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workoutperweeks
    * const workoutperweeks = await prisma.workoutperweek.findMany()
    * ```
    */
  get workoutperweek(): Prisma.workoutperweekDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout`: Exposes CRUD operations for the **workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workouts
    * const workouts = await prisma.workout.findMany()
    * ```
    */
  get workout(): Prisma.workoutDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout_exercise`: Exposes CRUD operations for the **workout_exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workout_exercises
    * const workout_exercises = await prisma.workout_exercise.findMany()
    * ```
    */
  get workout_exercise(): Prisma.workout_exerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise`: Exposes CRUD operations for the **exercise** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercise.findMany()
    * ```
    */
  get exercise(): Prisma.exerciseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.groupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_group_level`: Exposes CRUD operations for the **user_group_level** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_group_levels
    * const user_group_levels = await prisma.user_group_level.findMany()
    * ```
    */
  get user_group_level(): Prisma.user_group_levelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.excercise_group`: Exposes CRUD operations for the **excercise_group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Excercise_groups
    * const excercise_groups = await prisma.excercise_group.findMany()
    * ```
    */
  get excercise_group(): Prisma.excercise_groupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise_muscle`: Exposes CRUD operations for the **exercise_muscle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercise_muscles
    * const exercise_muscles = await prisma.exercise_muscle.findMany()
    * ```
    */
  get exercise_muscle(): Prisma.exercise_muscleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.muscle`: Exposes CRUD operations for the **muscle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Muscles
    * const muscles = await prisma.muscle.findMany()
    * ```
    */
  get muscle(): Prisma.muscleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.equipment`: Exposes CRUD operations for the **equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipment
    * const equipment = await prisma.equipment.findMany()
    * ```
    */
  get equipment(): Prisma.equipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exercise_equipment`: Exposes CRUD operations for the **exercise_equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercise_equipments
    * const exercise_equipments = await prisma.exercise_equipment.findMany()
    * ```
    */
  get exercise_equipment(): Prisma.exercise_equipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_equipment`: Exposes CRUD operations for the **user_equipment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_equipments
    * const user_equipments = await prisma.user_equipment.findMany()
    * ```
    */
  get user_equipment(): Prisma.user_equipmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workout_per_week_workout`: Exposes CRUD operations for the **workout_per_week_workout** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Workout_per_week_workouts
    * const workout_per_week_workouts = await prisma.workout_per_week_workout.findMany()
    * ```
    */
  get workout_per_week_workout(): Prisma.workout_per_week_workoutDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    user_availability: 'user_availability',
    workout_progress: 'workout_progress',
    exercise_progress: 'exercise_progress',
    workoutperweek: 'workoutperweek',
    workout: 'workout',
    workout_exercise: 'workout_exercise',
    exercise: 'exercise',
    group: 'group',
    user_group_level: 'user_group_level',
    excercise_group: 'excercise_group',
    exercise_muscle: 'exercise_muscle',
    muscle: 'muscle',
    equipment: 'equipment',
    exercise_equipment: 'exercise_equipment',
    user_equipment: 'user_equipment',
    workout_per_week_workout: 'workout_per_week_workout'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "user_availability" | "workout_progress" | "exercise_progress" | "workoutperweek" | "workout" | "workout_exercise" | "exercise" | "group" | "user_group_level" | "excercise_group" | "exercise_muscle" | "muscle" | "equipment" | "exercise_equipment" | "user_equipment" | "workout_per_week_workout"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      user_availability: {
        payload: Prisma.$user_availabilityPayload<ExtArgs>
        fields: Prisma.user_availabilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_availabilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_availabilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          findFirst: {
            args: Prisma.user_availabilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_availabilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          findMany: {
            args: Prisma.user_availabilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>[]
          }
          create: {
            args: Prisma.user_availabilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          createMany: {
            args: Prisma.user_availabilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_availabilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>[]
          }
          delete: {
            args: Prisma.user_availabilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          update: {
            args: Prisma.user_availabilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          deleteMany: {
            args: Prisma.user_availabilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_availabilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_availabilityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>[]
          }
          upsert: {
            args: Prisma.user_availabilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_availabilityPayload>
          }
          aggregate: {
            args: Prisma.User_availabilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_availability>
          }
          groupBy: {
            args: Prisma.user_availabilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_availabilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_availabilityCountArgs<ExtArgs>
            result: $Utils.Optional<User_availabilityCountAggregateOutputType> | number
          }
        }
      }
      workout_progress: {
        payload: Prisma.$workout_progressPayload<ExtArgs>
        fields: Prisma.workout_progressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workout_progressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workout_progressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          findFirst: {
            args: Prisma.workout_progressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workout_progressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          findMany: {
            args: Prisma.workout_progressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>[]
          }
          create: {
            args: Prisma.workout_progressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          createMany: {
            args: Prisma.workout_progressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.workout_progressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>[]
          }
          delete: {
            args: Prisma.workout_progressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          update: {
            args: Prisma.workout_progressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          deleteMany: {
            args: Prisma.workout_progressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workout_progressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.workout_progressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>[]
          }
          upsert: {
            args: Prisma.workout_progressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_progressPayload>
          }
          aggregate: {
            args: Prisma.Workout_progressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout_progress>
          }
          groupBy: {
            args: Prisma.workout_progressGroupByArgs<ExtArgs>
            result: $Utils.Optional<Workout_progressGroupByOutputType>[]
          }
          count: {
            args: Prisma.workout_progressCountArgs<ExtArgs>
            result: $Utils.Optional<Workout_progressCountAggregateOutputType> | number
          }
        }
      }
      exercise_progress: {
        payload: Prisma.$exercise_progressPayload<ExtArgs>
        fields: Prisma.exercise_progressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exercise_progressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exercise_progressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          findFirst: {
            args: Prisma.exercise_progressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exercise_progressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          findMany: {
            args: Prisma.exercise_progressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>[]
          }
          create: {
            args: Prisma.exercise_progressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          createMany: {
            args: Prisma.exercise_progressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.exercise_progressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>[]
          }
          delete: {
            args: Prisma.exercise_progressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          update: {
            args: Prisma.exercise_progressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          deleteMany: {
            args: Prisma.exercise_progressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exercise_progressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.exercise_progressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>[]
          }
          upsert: {
            args: Prisma.exercise_progressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_progressPayload>
          }
          aggregate: {
            args: Prisma.Exercise_progressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise_progress>
          }
          groupBy: {
            args: Prisma.exercise_progressGroupByArgs<ExtArgs>
            result: $Utils.Optional<Exercise_progressGroupByOutputType>[]
          }
          count: {
            args: Prisma.exercise_progressCountArgs<ExtArgs>
            result: $Utils.Optional<Exercise_progressCountAggregateOutputType> | number
          }
        }
      }
      workoutperweek: {
        payload: Prisma.$workoutperweekPayload<ExtArgs>
        fields: Prisma.workoutperweekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workoutperweekFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workoutperweekFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          findFirst: {
            args: Prisma.workoutperweekFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workoutperweekFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          findMany: {
            args: Prisma.workoutperweekFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>[]
          }
          create: {
            args: Prisma.workoutperweekCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          createMany: {
            args: Prisma.workoutperweekCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.workoutperweekCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>[]
          }
          delete: {
            args: Prisma.workoutperweekDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          update: {
            args: Prisma.workoutperweekUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          deleteMany: {
            args: Prisma.workoutperweekDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workoutperweekUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.workoutperweekUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>[]
          }
          upsert: {
            args: Prisma.workoutperweekUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutperweekPayload>
          }
          aggregate: {
            args: Prisma.WorkoutperweekAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkoutperweek>
          }
          groupBy: {
            args: Prisma.workoutperweekGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutperweekGroupByOutputType>[]
          }
          count: {
            args: Prisma.workoutperweekCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutperweekCountAggregateOutputType> | number
          }
        }
      }
      workout: {
        payload: Prisma.$workoutPayload<ExtArgs>
        fields: Prisma.workoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          findFirst: {
            args: Prisma.workoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          findMany: {
            args: Prisma.workoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>[]
          }
          create: {
            args: Prisma.workoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          createMany: {
            args: Prisma.workoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.workoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>[]
          }
          delete: {
            args: Prisma.workoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          update: {
            args: Prisma.workoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          deleteMany: {
            args: Prisma.workoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.workoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>[]
          }
          upsert: {
            args: Prisma.workoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workoutPayload>
          }
          aggregate: {
            args: Prisma.WorkoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout>
          }
          groupBy: {
            args: Prisma.workoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.workoutCountArgs<ExtArgs>
            result: $Utils.Optional<WorkoutCountAggregateOutputType> | number
          }
        }
      }
      workout_exercise: {
        payload: Prisma.$workout_exercisePayload<ExtArgs>
        fields: Prisma.workout_exerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workout_exerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workout_exerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          findFirst: {
            args: Prisma.workout_exerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workout_exerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          findMany: {
            args: Prisma.workout_exerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>[]
          }
          create: {
            args: Prisma.workout_exerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          createMany: {
            args: Prisma.workout_exerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.workout_exerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>[]
          }
          delete: {
            args: Prisma.workout_exerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          update: {
            args: Prisma.workout_exerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          deleteMany: {
            args: Prisma.workout_exerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workout_exerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.workout_exerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>[]
          }
          upsert: {
            args: Prisma.workout_exerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_exercisePayload>
          }
          aggregate: {
            args: Prisma.Workout_exerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout_exercise>
          }
          groupBy: {
            args: Prisma.workout_exerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<Workout_exerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.workout_exerciseCountArgs<ExtArgs>
            result: $Utils.Optional<Workout_exerciseCountAggregateOutputType> | number
          }
        }
      }
      exercise: {
        payload: Prisma.$exercisePayload<ExtArgs>
        fields: Prisma.exerciseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exerciseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exerciseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          findFirst: {
            args: Prisma.exerciseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exerciseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          findMany: {
            args: Prisma.exerciseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>[]
          }
          create: {
            args: Prisma.exerciseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          createMany: {
            args: Prisma.exerciseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.exerciseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>[]
          }
          delete: {
            args: Prisma.exerciseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          update: {
            args: Prisma.exerciseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          deleteMany: {
            args: Prisma.exerciseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exerciseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.exerciseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>[]
          }
          upsert: {
            args: Prisma.exerciseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercisePayload>
          }
          aggregate: {
            args: Prisma.ExerciseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise>
          }
          groupBy: {
            args: Prisma.exerciseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExerciseGroupByOutputType>[]
          }
          count: {
            args: Prisma.exerciseCountArgs<ExtArgs>
            result: $Utils.Optional<ExerciseCountAggregateOutputType> | number
          }
        }
      }
      group: {
        payload: Prisma.$groupPayload<ExtArgs>
        fields: Prisma.groupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.groupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.groupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          findFirst: {
            args: Prisma.groupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.groupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          findMany: {
            args: Prisma.groupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>[]
          }
          create: {
            args: Prisma.groupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          createMany: {
            args: Prisma.groupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.groupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>[]
          }
          delete: {
            args: Prisma.groupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          update: {
            args: Prisma.groupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          deleteMany: {
            args: Prisma.groupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.groupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.groupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>[]
          }
          upsert: {
            args: Prisma.groupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.groupGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.groupCountArgs<ExtArgs>
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      user_group_level: {
        payload: Prisma.$user_group_levelPayload<ExtArgs>
        fields: Prisma.user_group_levelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_group_levelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_group_levelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          findFirst: {
            args: Prisma.user_group_levelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_group_levelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          findMany: {
            args: Prisma.user_group_levelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>[]
          }
          create: {
            args: Prisma.user_group_levelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          createMany: {
            args: Prisma.user_group_levelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_group_levelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>[]
          }
          delete: {
            args: Prisma.user_group_levelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          update: {
            args: Prisma.user_group_levelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          deleteMany: {
            args: Prisma.user_group_levelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_group_levelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_group_levelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>[]
          }
          upsert: {
            args: Prisma.user_group_levelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_group_levelPayload>
          }
          aggregate: {
            args: Prisma.User_group_levelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_group_level>
          }
          groupBy: {
            args: Prisma.user_group_levelGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_group_levelGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_group_levelCountArgs<ExtArgs>
            result: $Utils.Optional<User_group_levelCountAggregateOutputType> | number
          }
        }
      }
      excercise_group: {
        payload: Prisma.$excercise_groupPayload<ExtArgs>
        fields: Prisma.excercise_groupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.excercise_groupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.excercise_groupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          findFirst: {
            args: Prisma.excercise_groupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.excercise_groupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          findMany: {
            args: Prisma.excercise_groupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>[]
          }
          create: {
            args: Prisma.excercise_groupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          createMany: {
            args: Prisma.excercise_groupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.excercise_groupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>[]
          }
          delete: {
            args: Prisma.excercise_groupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          update: {
            args: Prisma.excercise_groupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          deleteMany: {
            args: Prisma.excercise_groupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.excercise_groupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.excercise_groupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>[]
          }
          upsert: {
            args: Prisma.excercise_groupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$excercise_groupPayload>
          }
          aggregate: {
            args: Prisma.Excercise_groupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExcercise_group>
          }
          groupBy: {
            args: Prisma.excercise_groupGroupByArgs<ExtArgs>
            result: $Utils.Optional<Excercise_groupGroupByOutputType>[]
          }
          count: {
            args: Prisma.excercise_groupCountArgs<ExtArgs>
            result: $Utils.Optional<Excercise_groupCountAggregateOutputType> | number
          }
        }
      }
      exercise_muscle: {
        payload: Prisma.$exercise_musclePayload<ExtArgs>
        fields: Prisma.exercise_muscleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exercise_muscleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exercise_muscleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          findFirst: {
            args: Prisma.exercise_muscleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exercise_muscleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          findMany: {
            args: Prisma.exercise_muscleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>[]
          }
          create: {
            args: Prisma.exercise_muscleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          createMany: {
            args: Prisma.exercise_muscleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.exercise_muscleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>[]
          }
          delete: {
            args: Prisma.exercise_muscleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          update: {
            args: Prisma.exercise_muscleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          deleteMany: {
            args: Prisma.exercise_muscleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exercise_muscleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.exercise_muscleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>[]
          }
          upsert: {
            args: Prisma.exercise_muscleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_musclePayload>
          }
          aggregate: {
            args: Prisma.Exercise_muscleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise_muscle>
          }
          groupBy: {
            args: Prisma.exercise_muscleGroupByArgs<ExtArgs>
            result: $Utils.Optional<Exercise_muscleGroupByOutputType>[]
          }
          count: {
            args: Prisma.exercise_muscleCountArgs<ExtArgs>
            result: $Utils.Optional<Exercise_muscleCountAggregateOutputType> | number
          }
        }
      }
      muscle: {
        payload: Prisma.$musclePayload<ExtArgs>
        fields: Prisma.muscleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.muscleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.muscleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          findFirst: {
            args: Prisma.muscleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.muscleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          findMany: {
            args: Prisma.muscleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>[]
          }
          create: {
            args: Prisma.muscleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          createMany: {
            args: Prisma.muscleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.muscleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>[]
          }
          delete: {
            args: Prisma.muscleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          update: {
            args: Prisma.muscleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          deleteMany: {
            args: Prisma.muscleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.muscleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.muscleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>[]
          }
          upsert: {
            args: Prisma.muscleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$musclePayload>
          }
          aggregate: {
            args: Prisma.MuscleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMuscle>
          }
          groupBy: {
            args: Prisma.muscleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MuscleGroupByOutputType>[]
          }
          count: {
            args: Prisma.muscleCountArgs<ExtArgs>
            result: $Utils.Optional<MuscleCountAggregateOutputType> | number
          }
        }
      }
      equipment: {
        payload: Prisma.$equipmentPayload<ExtArgs>
        fields: Prisma.equipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.equipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.equipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          findFirst: {
            args: Prisma.equipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.equipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          findMany: {
            args: Prisma.equipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>[]
          }
          create: {
            args: Prisma.equipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          createMany: {
            args: Prisma.equipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.equipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>[]
          }
          delete: {
            args: Prisma.equipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          update: {
            args: Prisma.equipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          deleteMany: {
            args: Prisma.equipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.equipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.equipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>[]
          }
          upsert: {
            args: Prisma.equipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$equipmentPayload>
          }
          aggregate: {
            args: Prisma.EquipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEquipment>
          }
          groupBy: {
            args: Prisma.equipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EquipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.equipmentCountArgs<ExtArgs>
            result: $Utils.Optional<EquipmentCountAggregateOutputType> | number
          }
        }
      }
      exercise_equipment: {
        payload: Prisma.$exercise_equipmentPayload<ExtArgs>
        fields: Prisma.exercise_equipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.exercise_equipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.exercise_equipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          findFirst: {
            args: Prisma.exercise_equipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.exercise_equipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          findMany: {
            args: Prisma.exercise_equipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>[]
          }
          create: {
            args: Prisma.exercise_equipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          createMany: {
            args: Prisma.exercise_equipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.exercise_equipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>[]
          }
          delete: {
            args: Prisma.exercise_equipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          update: {
            args: Prisma.exercise_equipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          deleteMany: {
            args: Prisma.exercise_equipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.exercise_equipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.exercise_equipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>[]
          }
          upsert: {
            args: Prisma.exercise_equipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$exercise_equipmentPayload>
          }
          aggregate: {
            args: Prisma.Exercise_equipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExercise_equipment>
          }
          groupBy: {
            args: Prisma.exercise_equipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<Exercise_equipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.exercise_equipmentCountArgs<ExtArgs>
            result: $Utils.Optional<Exercise_equipmentCountAggregateOutputType> | number
          }
        }
      }
      user_equipment: {
        payload: Prisma.$user_equipmentPayload<ExtArgs>
        fields: Prisma.user_equipmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_equipmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_equipmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          findFirst: {
            args: Prisma.user_equipmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_equipmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          findMany: {
            args: Prisma.user_equipmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>[]
          }
          create: {
            args: Prisma.user_equipmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          createMany: {
            args: Prisma.user_equipmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_equipmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>[]
          }
          delete: {
            args: Prisma.user_equipmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          update: {
            args: Prisma.user_equipmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          deleteMany: {
            args: Prisma.user_equipmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_equipmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_equipmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>[]
          }
          upsert: {
            args: Prisma.user_equipmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_equipmentPayload>
          }
          aggregate: {
            args: Prisma.User_equipmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_equipment>
          }
          groupBy: {
            args: Prisma.user_equipmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_equipmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_equipmentCountArgs<ExtArgs>
            result: $Utils.Optional<User_equipmentCountAggregateOutputType> | number
          }
        }
      }
      workout_per_week_workout: {
        payload: Prisma.$workout_per_week_workoutPayload<ExtArgs>
        fields: Prisma.workout_per_week_workoutFieldRefs
        operations: {
          findUnique: {
            args: Prisma.workout_per_week_workoutFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.workout_per_week_workoutFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          findFirst: {
            args: Prisma.workout_per_week_workoutFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.workout_per_week_workoutFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          findMany: {
            args: Prisma.workout_per_week_workoutFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>[]
          }
          create: {
            args: Prisma.workout_per_week_workoutCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          createMany: {
            args: Prisma.workout_per_week_workoutCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.workout_per_week_workoutCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>[]
          }
          delete: {
            args: Prisma.workout_per_week_workoutDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          update: {
            args: Prisma.workout_per_week_workoutUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          deleteMany: {
            args: Prisma.workout_per_week_workoutDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.workout_per_week_workoutUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.workout_per_week_workoutUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>[]
          }
          upsert: {
            args: Prisma.workout_per_week_workoutUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$workout_per_week_workoutPayload>
          }
          aggregate: {
            args: Prisma.Workout_per_week_workoutAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkout_per_week_workout>
          }
          groupBy: {
            args: Prisma.workout_per_week_workoutGroupByArgs<ExtArgs>
            result: $Utils.Optional<Workout_per_week_workoutGroupByOutputType>[]
          }
          count: {
            args: Prisma.workout_per_week_workoutCountArgs<ExtArgs>
            result: $Utils.Optional<Workout_per_week_workoutCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: usersOmit
    user_availability?: user_availabilityOmit
    workout_progress?: workout_progressOmit
    exercise_progress?: exercise_progressOmit
    workoutperweek?: workoutperweekOmit
    workout?: workoutOmit
    workout_exercise?: workout_exerciseOmit
    exercise?: exerciseOmit
    group?: groupOmit
    user_group_level?: user_group_levelOmit
    excercise_group?: excercise_groupOmit
    exercise_muscle?: exercise_muscleOmit
    muscle?: muscleOmit
    equipment?: equipmentOmit
    exercise_equipment?: exercise_equipmentOmit
    user_equipment?: user_equipmentOmit
    workout_per_week_workout?: workout_per_week_workoutOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    equipments: number
    workouts: number
    availabilities: number
    workout_progress: number
    level: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipments?: boolean | UsersCountOutputTypeCountEquipmentsArgs
    workouts?: boolean | UsersCountOutputTypeCountWorkoutsArgs
    availabilities?: boolean | UsersCountOutputTypeCountAvailabilitiesArgs
    workout_progress?: boolean | UsersCountOutputTypeCountWorkout_progressArgs
    level?: boolean | UsersCountOutputTypeCountLevelArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_equipmentWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workoutperweekWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAvailabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_availabilityWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountWorkout_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_progressWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLevelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_group_levelWhereInput
  }


  /**
   * Count Type Workout_progressCountOutputType
   */

  export type Workout_progressCountOutputType = {
    exerciseProgress: number
  }

  export type Workout_progressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exerciseProgress?: boolean | Workout_progressCountOutputTypeCountExerciseProgressArgs
  }

  // Custom InputTypes
  /**
   * Workout_progressCountOutputType without action
   */
  export type Workout_progressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout_progressCountOutputType
     */
    select?: Workout_progressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Workout_progressCountOutputType without action
   */
  export type Workout_progressCountOutputTypeCountExerciseProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_progressWhereInput
  }


  /**
   * Count Type WorkoutperweekCountOutputType
   */

  export type WorkoutperweekCountOutputType = {
    workouts: number
  }

  export type WorkoutperweekCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | WorkoutperweekCountOutputTypeCountWorkoutsArgs
  }

  // Custom InputTypes
  /**
   * WorkoutperweekCountOutputType without action
   */
  export type WorkoutperweekCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutperweekCountOutputType
     */
    select?: WorkoutperweekCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutperweekCountOutputType without action
   */
  export type WorkoutperweekCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_per_week_workoutWhereInput
  }


  /**
   * Count Type WorkoutCountOutputType
   */

  export type WorkoutCountOutputType = {
    exercises: number
    perWeek: number
    workout_progress: number
  }

  export type WorkoutCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | WorkoutCountOutputTypeCountExercisesArgs
    perWeek?: boolean | WorkoutCountOutputTypeCountPerWeekArgs
    workout_progress?: boolean | WorkoutCountOutputTypeCountWorkout_progressArgs
  }

  // Custom InputTypes
  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkoutCountOutputType
     */
    select?: WorkoutCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_exerciseWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountPerWeekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_per_week_workoutWhereInput
  }

  /**
   * WorkoutCountOutputType without action
   */
  export type WorkoutCountOutputTypeCountWorkout_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_progressWhereInput
  }


  /**
   * Count Type Workout_exerciseCountOutputType
   */

  export type Workout_exerciseCountOutputType = {
    exercise_progress: number
  }

  export type Workout_exerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise_progress?: boolean | Workout_exerciseCountOutputTypeCountExercise_progressArgs
  }

  // Custom InputTypes
  /**
   * Workout_exerciseCountOutputType without action
   */
  export type Workout_exerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Workout_exerciseCountOutputType
     */
    select?: Workout_exerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Workout_exerciseCountOutputType without action
   */
  export type Workout_exerciseCountOutputTypeCountExercise_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_progressWhereInput
  }


  /**
   * Count Type ExerciseCountOutputType
   */

  export type ExerciseCountOutputType = {
    muscles: number
    equipments: number
    workouts: number
    group: number
  }

  export type ExerciseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | ExerciseCountOutputTypeCountMusclesArgs
    equipments?: boolean | ExerciseCountOutputTypeCountEquipmentsArgs
    workouts?: boolean | ExerciseCountOutputTypeCountWorkoutsArgs
    group?: boolean | ExerciseCountOutputTypeCountGroupArgs
  }

  // Custom InputTypes
  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExerciseCountOutputType
     */
    select?: ExerciseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountMusclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_muscleWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountEquipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_equipmentWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountWorkoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_exerciseWhereInput
  }

  /**
   * ExerciseCountOutputType without action
   */
  export type ExerciseCountOutputTypeCountGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: excercise_groupWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    exercises: number
    user: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | GroupCountOutputTypeCountExercisesArgs
    user?: boolean | GroupCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: excercise_groupWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_group_levelWhereInput
  }


  /**
   * Count Type MuscleCountOutputType
   */

  export type MuscleCountOutputType = {
    exercises: number
  }

  export type MuscleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | MuscleCountOutputTypeCountExercisesArgs
  }

  // Custom InputTypes
  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MuscleCountOutputType
     */
    select?: MuscleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MuscleCountOutputType without action
   */
  export type MuscleCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_muscleWhereInput
  }


  /**
   * Count Type EquipmentCountOutputType
   */

  export type EquipmentCountOutputType = {
    exercises: number
    users: number
  }

  export type EquipmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | EquipmentCountOutputTypeCountExercisesArgs
    users?: boolean | EquipmentCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EquipmentCountOutputType
     */
    select?: EquipmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountExercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_equipmentWhereInput
  }

  /**
   * EquipmentCountOutputType without action
   */
  export type EquipmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_equipmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    height: number | null
    weight: number | null
    days_of_workout: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    height: number | null
    weight: number | null
    days_of_workout: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    height: number | null
    weight: number | null
    days_of_workout: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    height: number | null
    weight: number | null
    days_of_workout: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    height: number
    weight: number
    days_of_workout: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    height?: true
    weight?: true
    days_of_workout?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    height?: true
    weight?: true
    days_of_workout?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    height?: true
    weight?: true
    days_of_workout?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    height?: true
    weight?: true
    days_of_workout?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    height?: true
    weight?: true
    days_of_workout?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    height: number | null
    weight: number | null
    days_of_workout: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    height?: boolean
    weight?: boolean
    days_of_workout?: boolean
    equipments?: boolean | users$equipmentsArgs<ExtArgs>
    workouts?: boolean | users$workoutsArgs<ExtArgs>
    availabilities?: boolean | users$availabilitiesArgs<ExtArgs>
    workout_progress?: boolean | users$workout_progressArgs<ExtArgs>
    level?: boolean | users$levelArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    height?: boolean
    weight?: boolean
    days_of_workout?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    height?: boolean
    weight?: boolean
    days_of_workout?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    height?: boolean
    weight?: boolean
    days_of_workout?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "height" | "weight" | "days_of_workout", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    equipments?: boolean | users$equipmentsArgs<ExtArgs>
    workouts?: boolean | users$workoutsArgs<ExtArgs>
    availabilities?: boolean | users$availabilitiesArgs<ExtArgs>
    workout_progress?: boolean | users$workout_progressArgs<ExtArgs>
    level?: boolean | users$levelArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      equipments: Prisma.$user_equipmentPayload<ExtArgs>[]
      workouts: Prisma.$workoutperweekPayload<ExtArgs>[]
      availabilities: Prisma.$user_availabilityPayload<ExtArgs>[]
      workout_progress: Prisma.$workout_progressPayload<ExtArgs>[]
      level: Prisma.$user_group_levelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      height: number | null
      weight: number | null
      days_of_workout: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    equipments<T extends users$equipmentsArgs<ExtArgs> = {}>(args?: Subset<T, users$equipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workouts<T extends users$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, users$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    availabilities<T extends users$availabilitiesArgs<ExtArgs> = {}>(args?: Subset<T, users$availabilitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workout_progress<T extends users$workout_progressArgs<ExtArgs> = {}>(args?: Subset<T, users$workout_progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    level<T extends users$levelArgs<ExtArgs> = {}>(args?: Subset<T, users$levelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly height: FieldRef<"users", 'Float'>
    readonly weight: FieldRef<"users", 'Float'>
    readonly days_of_workout: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    limit?: number
  }

  /**
   * users.equipments
   */
  export type users$equipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    where?: user_equipmentWhereInput
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    cursor?: user_equipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_equipmentScalarFieldEnum | User_equipmentScalarFieldEnum[]
  }

  /**
   * users.workouts
   */
  export type users$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    where?: workoutperweekWhereInput
    orderBy?: workoutperweekOrderByWithRelationInput | workoutperweekOrderByWithRelationInput[]
    cursor?: workoutperweekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkoutperweekScalarFieldEnum | WorkoutperweekScalarFieldEnum[]
  }

  /**
   * users.availabilities
   */
  export type users$availabilitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    where?: user_availabilityWhereInput
    orderBy?: user_availabilityOrderByWithRelationInput | user_availabilityOrderByWithRelationInput[]
    cursor?: user_availabilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_availabilityScalarFieldEnum | User_availabilityScalarFieldEnum[]
  }

  /**
   * users.workout_progress
   */
  export type users$workout_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    where?: workout_progressWhereInput
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    cursor?: workout_progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_progressScalarFieldEnum | Workout_progressScalarFieldEnum[]
  }

  /**
   * users.level
   */
  export type users$levelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    where?: user_group_levelWhereInput
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    cursor?: user_group_levelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_group_levelScalarFieldEnum | User_group_levelScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model user_availability
   */

  export type AggregateUser_availability = {
    _count: User_availabilityCountAggregateOutputType | null
    _avg: User_availabilityAvgAggregateOutputType | null
    _sum: User_availabilitySumAggregateOutputType | null
    _min: User_availabilityMinAggregateOutputType | null
    _max: User_availabilityMaxAggregateOutputType | null
  }

  export type User_availabilityAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    minutes: number | null
  }

  export type User_availabilitySumAggregateOutputType = {
    id: number | null
    user_id: number | null
    minutes: number | null
  }

  export type User_availabilityMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    day: string | null
    minutes: number | null
  }

  export type User_availabilityMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    day: string | null
    minutes: number | null
  }

  export type User_availabilityCountAggregateOutputType = {
    id: number
    user_id: number
    day: number
    minutes: number
    _all: number
  }


  export type User_availabilityAvgAggregateInputType = {
    id?: true
    user_id?: true
    minutes?: true
  }

  export type User_availabilitySumAggregateInputType = {
    id?: true
    user_id?: true
    minutes?: true
  }

  export type User_availabilityMinAggregateInputType = {
    id?: true
    user_id?: true
    day?: true
    minutes?: true
  }

  export type User_availabilityMaxAggregateInputType = {
    id?: true
    user_id?: true
    day?: true
    minutes?: true
  }

  export type User_availabilityCountAggregateInputType = {
    id?: true
    user_id?: true
    day?: true
    minutes?: true
    _all?: true
  }

  export type User_availabilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_availability to aggregate.
     */
    where?: user_availabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_availabilities to fetch.
     */
    orderBy?: user_availabilityOrderByWithRelationInput | user_availabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_availabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_availabilities
    **/
    _count?: true | User_availabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_availabilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_availabilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_availabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_availabilityMaxAggregateInputType
  }

  export type GetUser_availabilityAggregateType<T extends User_availabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_availability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_availability[P]>
      : GetScalarType<T[P], AggregateUser_availability[P]>
  }




  export type user_availabilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_availabilityWhereInput
    orderBy?: user_availabilityOrderByWithAggregationInput | user_availabilityOrderByWithAggregationInput[]
    by: User_availabilityScalarFieldEnum[] | User_availabilityScalarFieldEnum
    having?: user_availabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_availabilityCountAggregateInputType | true
    _avg?: User_availabilityAvgAggregateInputType
    _sum?: User_availabilitySumAggregateInputType
    _min?: User_availabilityMinAggregateInputType
    _max?: User_availabilityMaxAggregateInputType
  }

  export type User_availabilityGroupByOutputType = {
    id: number
    user_id: number
    day: string
    minutes: number
    _count: User_availabilityCountAggregateOutputType | null
    _avg: User_availabilityAvgAggregateOutputType | null
    _sum: User_availabilitySumAggregateOutputType | null
    _min: User_availabilityMinAggregateOutputType | null
    _max: User_availabilityMaxAggregateOutputType | null
  }

  type GetUser_availabilityGroupByPayload<T extends user_availabilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_availabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_availabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_availabilityGroupByOutputType[P]>
            : GetScalarType<T[P], User_availabilityGroupByOutputType[P]>
        }
      >
    >


  export type user_availabilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    day?: boolean
    minutes?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_availability"]>

  export type user_availabilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    day?: boolean
    minutes?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_availability"]>

  export type user_availabilitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    day?: boolean
    minutes?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_availability"]>

  export type user_availabilitySelectScalar = {
    id?: boolean
    user_id?: boolean
    day?: boolean
    minutes?: boolean
  }

  export type user_availabilityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "day" | "minutes", ExtArgs["result"]["user_availability"]>
  export type user_availabilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type user_availabilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type user_availabilityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $user_availabilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_availability"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      day: string
      minutes: number
    }, ExtArgs["result"]["user_availability"]>
    composites: {}
  }

  type user_availabilityGetPayload<S extends boolean | null | undefined | user_availabilityDefaultArgs> = $Result.GetResult<Prisma.$user_availabilityPayload, S>

  type user_availabilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_availabilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_availabilityCountAggregateInputType | true
    }

  export interface user_availabilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_availability'], meta: { name: 'user_availability' } }
    /**
     * Find zero or one User_availability that matches the filter.
     * @param {user_availabilityFindUniqueArgs} args - Arguments to find a User_availability
     * @example
     * // Get one User_availability
     * const user_availability = await prisma.user_availability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_availabilityFindUniqueArgs>(args: SelectSubset<T, user_availabilityFindUniqueArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User_availability that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_availabilityFindUniqueOrThrowArgs} args - Arguments to find a User_availability
     * @example
     * // Get one User_availability
     * const user_availability = await prisma.user_availability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_availabilityFindUniqueOrThrowArgs>(args: SelectSubset<T, user_availabilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User_availability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityFindFirstArgs} args - Arguments to find a User_availability
     * @example
     * // Get one User_availability
     * const user_availability = await prisma.user_availability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_availabilityFindFirstArgs>(args?: SelectSubset<T, user_availabilityFindFirstArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User_availability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityFindFirstOrThrowArgs} args - Arguments to find a User_availability
     * @example
     * // Get one User_availability
     * const user_availability = await prisma.user_availability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_availabilityFindFirstOrThrowArgs>(args?: SelectSubset<T, user_availabilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more User_availabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_availabilities
     * const user_availabilities = await prisma.user_availability.findMany()
     * 
     * // Get first 10 User_availabilities
     * const user_availabilities = await prisma.user_availability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_availabilityWithIdOnly = await prisma.user_availability.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_availabilityFindManyArgs>(args?: SelectSubset<T, user_availabilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User_availability.
     * @param {user_availabilityCreateArgs} args - Arguments to create a User_availability.
     * @example
     * // Create one User_availability
     * const User_availability = await prisma.user_availability.create({
     *   data: {
     *     // ... data to create a User_availability
     *   }
     * })
     * 
     */
    create<T extends user_availabilityCreateArgs>(args: SelectSubset<T, user_availabilityCreateArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many User_availabilities.
     * @param {user_availabilityCreateManyArgs} args - Arguments to create many User_availabilities.
     * @example
     * // Create many User_availabilities
     * const user_availability = await prisma.user_availability.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_availabilityCreateManyArgs>(args?: SelectSubset<T, user_availabilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_availabilities and returns the data saved in the database.
     * @param {user_availabilityCreateManyAndReturnArgs} args - Arguments to create many User_availabilities.
     * @example
     * // Create many User_availabilities
     * const user_availability = await prisma.user_availability.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_availabilities and only return the `id`
     * const user_availabilityWithIdOnly = await prisma.user_availability.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_availabilityCreateManyAndReturnArgs>(args?: SelectSubset<T, user_availabilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User_availability.
     * @param {user_availabilityDeleteArgs} args - Arguments to delete one User_availability.
     * @example
     * // Delete one User_availability
     * const User_availability = await prisma.user_availability.delete({
     *   where: {
     *     // ... filter to delete one User_availability
     *   }
     * })
     * 
     */
    delete<T extends user_availabilityDeleteArgs>(args: SelectSubset<T, user_availabilityDeleteArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User_availability.
     * @param {user_availabilityUpdateArgs} args - Arguments to update one User_availability.
     * @example
     * // Update one User_availability
     * const user_availability = await prisma.user_availability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_availabilityUpdateArgs>(args: SelectSubset<T, user_availabilityUpdateArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more User_availabilities.
     * @param {user_availabilityDeleteManyArgs} args - Arguments to filter User_availabilities to delete.
     * @example
     * // Delete a few User_availabilities
     * const { count } = await prisma.user_availability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_availabilityDeleteManyArgs>(args?: SelectSubset<T, user_availabilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_availabilities
     * const user_availability = await prisma.user_availability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_availabilityUpdateManyArgs>(args: SelectSubset<T, user_availabilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_availabilities and returns the data updated in the database.
     * @param {user_availabilityUpdateManyAndReturnArgs} args - Arguments to update many User_availabilities.
     * @example
     * // Update many User_availabilities
     * const user_availability = await prisma.user_availability.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_availabilities and only return the `id`
     * const user_availabilityWithIdOnly = await prisma.user_availability.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_availabilityUpdateManyAndReturnArgs>(args: SelectSubset<T, user_availabilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User_availability.
     * @param {user_availabilityUpsertArgs} args - Arguments to update or create a User_availability.
     * @example
     * // Update or create a User_availability
     * const user_availability = await prisma.user_availability.upsert({
     *   create: {
     *     // ... data to create a User_availability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_availability we want to update
     *   }
     * })
     */
    upsert<T extends user_availabilityUpsertArgs>(args: SelectSubset<T, user_availabilityUpsertArgs<ExtArgs>>): Prisma__user_availabilityClient<$Result.GetResult<Prisma.$user_availabilityPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of User_availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityCountArgs} args - Arguments to filter User_availabilities to count.
     * @example
     * // Count the number of User_availabilities
     * const count = await prisma.user_availability.count({
     *   where: {
     *     // ... the filter for the User_availabilities we want to count
     *   }
     * })
    **/
    count<T extends user_availabilityCountArgs>(
      args?: Subset<T, user_availabilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_availabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_availabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_availabilityAggregateArgs>(args: Subset<T, User_availabilityAggregateArgs>): Prisma.PrismaPromise<GetUser_availabilityAggregateType<T>>

    /**
     * Group by User_availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_availabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_availabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_availabilityGroupByArgs['orderBy'] }
        : { orderBy?: user_availabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_availabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_availabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_availability model
   */
  readonly fields: user_availabilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_availability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_availabilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_availability model
   */ 
  interface user_availabilityFieldRefs {
    readonly id: FieldRef<"user_availability", 'Int'>
    readonly user_id: FieldRef<"user_availability", 'Int'>
    readonly day: FieldRef<"user_availability", 'String'>
    readonly minutes: FieldRef<"user_availability", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_availability findUnique
   */
  export type user_availabilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter, which user_availability to fetch.
     */
    where: user_availabilityWhereUniqueInput
  }

  /**
   * user_availability findUniqueOrThrow
   */
  export type user_availabilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter, which user_availability to fetch.
     */
    where: user_availabilityWhereUniqueInput
  }

  /**
   * user_availability findFirst
   */
  export type user_availabilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter, which user_availability to fetch.
     */
    where?: user_availabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_availabilities to fetch.
     */
    orderBy?: user_availabilityOrderByWithRelationInput | user_availabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_availabilities.
     */
    cursor?: user_availabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_availabilities.
     */
    distinct?: User_availabilityScalarFieldEnum | User_availabilityScalarFieldEnum[]
  }

  /**
   * user_availability findFirstOrThrow
   */
  export type user_availabilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter, which user_availability to fetch.
     */
    where?: user_availabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_availabilities to fetch.
     */
    orderBy?: user_availabilityOrderByWithRelationInput | user_availabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_availabilities.
     */
    cursor?: user_availabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_availabilities.
     */
    distinct?: User_availabilityScalarFieldEnum | User_availabilityScalarFieldEnum[]
  }

  /**
   * user_availability findMany
   */
  export type user_availabilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter, which user_availabilities to fetch.
     */
    where?: user_availabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_availabilities to fetch.
     */
    orderBy?: user_availabilityOrderByWithRelationInput | user_availabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_availabilities.
     */
    cursor?: user_availabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_availabilities.
     */
    skip?: number
    distinct?: User_availabilityScalarFieldEnum | User_availabilityScalarFieldEnum[]
  }

  /**
   * user_availability create
   */
  export type user_availabilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * The data needed to create a user_availability.
     */
    data: XOR<user_availabilityCreateInput, user_availabilityUncheckedCreateInput>
  }

  /**
   * user_availability createMany
   */
  export type user_availabilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_availabilities.
     */
    data: user_availabilityCreateManyInput | user_availabilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_availability createManyAndReturn
   */
  export type user_availabilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * The data used to create many user_availabilities.
     */
    data: user_availabilityCreateManyInput | user_availabilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_availability update
   */
  export type user_availabilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * The data needed to update a user_availability.
     */
    data: XOR<user_availabilityUpdateInput, user_availabilityUncheckedUpdateInput>
    /**
     * Choose, which user_availability to update.
     */
    where: user_availabilityWhereUniqueInput
  }

  /**
   * user_availability updateMany
   */
  export type user_availabilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_availabilities.
     */
    data: XOR<user_availabilityUpdateManyMutationInput, user_availabilityUncheckedUpdateManyInput>
    /**
     * Filter which user_availabilities to update
     */
    where?: user_availabilityWhereInput
    limit?: number
  }

  /**
   * user_availability updateManyAndReturn
   */
  export type user_availabilityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * The data used to update user_availabilities.
     */
    data: XOR<user_availabilityUpdateManyMutationInput, user_availabilityUncheckedUpdateManyInput>
    /**
     * Filter which user_availabilities to update
     */
    where?: user_availabilityWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_availability upsert
   */
  export type user_availabilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * The filter to search for the user_availability to update in case it exists.
     */
    where: user_availabilityWhereUniqueInput
    /**
     * In case the user_availability found by the `where` argument doesn't exist, create a new user_availability with this data.
     */
    create: XOR<user_availabilityCreateInput, user_availabilityUncheckedCreateInput>
    /**
     * In case the user_availability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_availabilityUpdateInput, user_availabilityUncheckedUpdateInput>
  }

  /**
   * user_availability delete
   */
  export type user_availabilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
    /**
     * Filter which user_availability to delete.
     */
    where: user_availabilityWhereUniqueInput
  }

  /**
   * user_availability deleteMany
   */
  export type user_availabilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_availabilities to delete
     */
    where?: user_availabilityWhereInput
    limit?: number
  }

  /**
   * user_availability without action
   */
  export type user_availabilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_availability
     */
    select?: user_availabilitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_availability
     */
    omit?: user_availabilityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_availabilityInclude<ExtArgs> | null
  }


  /**
   * Model workout_progress
   */

  export type AggregateWorkout_progress = {
    _count: Workout_progressCountAggregateOutputType | null
    _avg: Workout_progressAvgAggregateOutputType | null
    _sum: Workout_progressSumAggregateOutputType | null
    _min: Workout_progressMinAggregateOutputType | null
    _max: Workout_progressMaxAggregateOutputType | null
  }

  export type Workout_progressAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    workout_id: number | null
  }

  export type Workout_progressSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    workout_id: number | null
  }

  export type Workout_progressMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    workout_id: number | null
    date: Date | null
  }

  export type Workout_progressMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    workout_id: number | null
    date: Date | null
  }

  export type Workout_progressCountAggregateOutputType = {
    id: number
    user_id: number
    workout_id: number
    date: number
    _all: number
  }


  export type Workout_progressAvgAggregateInputType = {
    id?: true
    user_id?: true
    workout_id?: true
  }

  export type Workout_progressSumAggregateInputType = {
    id?: true
    user_id?: true
    workout_id?: true
  }

  export type Workout_progressMinAggregateInputType = {
    id?: true
    user_id?: true
    workout_id?: true
    date?: true
  }

  export type Workout_progressMaxAggregateInputType = {
    id?: true
    user_id?: true
    workout_id?: true
    date?: true
  }

  export type Workout_progressCountAggregateInputType = {
    id?: true
    user_id?: true
    workout_id?: true
    date?: true
    _all?: true
  }

  export type Workout_progressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_progress to aggregate.
     */
    where?: workout_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_progresses to fetch.
     */
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workout_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workout_progresses
    **/
    _count?: true | Workout_progressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Workout_progressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Workout_progressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Workout_progressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Workout_progressMaxAggregateInputType
  }

  export type GetWorkout_progressAggregateType<T extends Workout_progressAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout_progress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout_progress[P]>
      : GetScalarType<T[P], AggregateWorkout_progress[P]>
  }




  export type workout_progressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_progressWhereInput
    orderBy?: workout_progressOrderByWithAggregationInput | workout_progressOrderByWithAggregationInput[]
    by: Workout_progressScalarFieldEnum[] | Workout_progressScalarFieldEnum
    having?: workout_progressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Workout_progressCountAggregateInputType | true
    _avg?: Workout_progressAvgAggregateInputType
    _sum?: Workout_progressSumAggregateInputType
    _min?: Workout_progressMinAggregateInputType
    _max?: Workout_progressMaxAggregateInputType
  }

  export type Workout_progressGroupByOutputType = {
    id: number
    user_id: number
    workout_id: number
    date: Date
    _count: Workout_progressCountAggregateOutputType | null
    _avg: Workout_progressAvgAggregateOutputType | null
    _sum: Workout_progressSumAggregateOutputType | null
    _min: Workout_progressMinAggregateOutputType | null
    _max: Workout_progressMaxAggregateOutputType | null
  }

  type GetWorkout_progressGroupByPayload<T extends workout_progressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Workout_progressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Workout_progressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Workout_progressGroupByOutputType[P]>
            : GetScalarType<T[P], Workout_progressGroupByOutputType[P]>
        }
      >
    >


  export type workout_progressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    workout_id?: boolean
    date?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exerciseProgress?: boolean | workout_progress$exerciseProgressArgs<ExtArgs>
    _count?: boolean | Workout_progressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_progress"]>

  export type workout_progressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    workout_id?: boolean
    date?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_progress"]>

  export type workout_progressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    workout_id?: boolean
    date?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_progress"]>

  export type workout_progressSelectScalar = {
    id?: boolean
    user_id?: boolean
    workout_id?: boolean
    date?: boolean
  }

  export type workout_progressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "workout_id" | "date", ExtArgs["result"]["workout_progress"]>
  export type workout_progressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exerciseProgress?: boolean | workout_progress$exerciseProgressArgs<ExtArgs>
    _count?: boolean | Workout_progressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type workout_progressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
  }
  export type workout_progressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    workout?: boolean | workoutDefaultArgs<ExtArgs>
  }

  export type $workout_progressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workout_progress"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      workout: Prisma.$workoutPayload<ExtArgs>
      exerciseProgress: Prisma.$exercise_progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      workout_id: number
      date: Date
    }, ExtArgs["result"]["workout_progress"]>
    composites: {}
  }

  type workout_progressGetPayload<S extends boolean | null | undefined | workout_progressDefaultArgs> = $Result.GetResult<Prisma.$workout_progressPayload, S>

  type workout_progressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workout_progressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Workout_progressCountAggregateInputType | true
    }

  export interface workout_progressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workout_progress'], meta: { name: 'workout_progress' } }
    /**
     * Find zero or one Workout_progress that matches the filter.
     * @param {workout_progressFindUniqueArgs} args - Arguments to find a Workout_progress
     * @example
     * // Get one Workout_progress
     * const workout_progress = await prisma.workout_progress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workout_progressFindUniqueArgs>(args: SelectSubset<T, workout_progressFindUniqueArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Workout_progress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workout_progressFindUniqueOrThrowArgs} args - Arguments to find a Workout_progress
     * @example
     * // Get one Workout_progress
     * const workout_progress = await prisma.workout_progress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workout_progressFindUniqueOrThrowArgs>(args: SelectSubset<T, workout_progressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_progress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressFindFirstArgs} args - Arguments to find a Workout_progress
     * @example
     * // Get one Workout_progress
     * const workout_progress = await prisma.workout_progress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workout_progressFindFirstArgs>(args?: SelectSubset<T, workout_progressFindFirstArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_progress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressFindFirstOrThrowArgs} args - Arguments to find a Workout_progress
     * @example
     * // Get one Workout_progress
     * const workout_progress = await prisma.workout_progress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workout_progressFindFirstOrThrowArgs>(args?: SelectSubset<T, workout_progressFindFirstOrThrowArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Workout_progresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workout_progresses
     * const workout_progresses = await prisma.workout_progress.findMany()
     * 
     * // Get first 10 Workout_progresses
     * const workout_progresses = await prisma.workout_progress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workout_progressWithIdOnly = await prisma.workout_progress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workout_progressFindManyArgs>(args?: SelectSubset<T, workout_progressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Workout_progress.
     * @param {workout_progressCreateArgs} args - Arguments to create a Workout_progress.
     * @example
     * // Create one Workout_progress
     * const Workout_progress = await prisma.workout_progress.create({
     *   data: {
     *     // ... data to create a Workout_progress
     *   }
     * })
     * 
     */
    create<T extends workout_progressCreateArgs>(args: SelectSubset<T, workout_progressCreateArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Workout_progresses.
     * @param {workout_progressCreateManyArgs} args - Arguments to create many Workout_progresses.
     * @example
     * // Create many Workout_progresses
     * const workout_progress = await prisma.workout_progress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workout_progressCreateManyArgs>(args?: SelectSubset<T, workout_progressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workout_progresses and returns the data saved in the database.
     * @param {workout_progressCreateManyAndReturnArgs} args - Arguments to create many Workout_progresses.
     * @example
     * // Create many Workout_progresses
     * const workout_progress = await prisma.workout_progress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workout_progresses and only return the `id`
     * const workout_progressWithIdOnly = await prisma.workout_progress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends workout_progressCreateManyAndReturnArgs>(args?: SelectSubset<T, workout_progressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Workout_progress.
     * @param {workout_progressDeleteArgs} args - Arguments to delete one Workout_progress.
     * @example
     * // Delete one Workout_progress
     * const Workout_progress = await prisma.workout_progress.delete({
     *   where: {
     *     // ... filter to delete one Workout_progress
     *   }
     * })
     * 
     */
    delete<T extends workout_progressDeleteArgs>(args: SelectSubset<T, workout_progressDeleteArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Workout_progress.
     * @param {workout_progressUpdateArgs} args - Arguments to update one Workout_progress.
     * @example
     * // Update one Workout_progress
     * const workout_progress = await prisma.workout_progress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workout_progressUpdateArgs>(args: SelectSubset<T, workout_progressUpdateArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Workout_progresses.
     * @param {workout_progressDeleteManyArgs} args - Arguments to filter Workout_progresses to delete.
     * @example
     * // Delete a few Workout_progresses
     * const { count } = await prisma.workout_progress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workout_progressDeleteManyArgs>(args?: SelectSubset<T, workout_progressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workout_progresses
     * const workout_progress = await prisma.workout_progress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workout_progressUpdateManyArgs>(args: SelectSubset<T, workout_progressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_progresses and returns the data updated in the database.
     * @param {workout_progressUpdateManyAndReturnArgs} args - Arguments to update many Workout_progresses.
     * @example
     * // Update many Workout_progresses
     * const workout_progress = await prisma.workout_progress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workout_progresses and only return the `id`
     * const workout_progressWithIdOnly = await prisma.workout_progress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends workout_progressUpdateManyAndReturnArgs>(args: SelectSubset<T, workout_progressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Workout_progress.
     * @param {workout_progressUpsertArgs} args - Arguments to update or create a Workout_progress.
     * @example
     * // Update or create a Workout_progress
     * const workout_progress = await prisma.workout_progress.upsert({
     *   create: {
     *     // ... data to create a Workout_progress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout_progress we want to update
     *   }
     * })
     */
    upsert<T extends workout_progressUpsertArgs>(args: SelectSubset<T, workout_progressUpsertArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Workout_progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressCountArgs} args - Arguments to filter Workout_progresses to count.
     * @example
     * // Count the number of Workout_progresses
     * const count = await prisma.workout_progress.count({
     *   where: {
     *     // ... the filter for the Workout_progresses we want to count
     *   }
     * })
    **/
    count<T extends workout_progressCountArgs>(
      args?: Subset<T, workout_progressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Workout_progressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout_progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Workout_progressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Workout_progressAggregateArgs>(args: Subset<T, Workout_progressAggregateArgs>): Prisma.PrismaPromise<GetWorkout_progressAggregateType<T>>

    /**
     * Group by Workout_progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_progressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workout_progressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workout_progressGroupByArgs['orderBy'] }
        : { orderBy?: workout_progressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workout_progressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkout_progressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workout_progress model
   */
  readonly fields: workout_progressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workout_progress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workout_progressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    workout<T extends workoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workoutDefaultArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exerciseProgress<T extends workout_progress$exerciseProgressArgs<ExtArgs> = {}>(args?: Subset<T, workout_progress$exerciseProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workout_progress model
   */ 
  interface workout_progressFieldRefs {
    readonly id: FieldRef<"workout_progress", 'Int'>
    readonly user_id: FieldRef<"workout_progress", 'Int'>
    readonly workout_id: FieldRef<"workout_progress", 'Int'>
    readonly date: FieldRef<"workout_progress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * workout_progress findUnique
   */
  export type workout_progressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter, which workout_progress to fetch.
     */
    where: workout_progressWhereUniqueInput
  }

  /**
   * workout_progress findUniqueOrThrow
   */
  export type workout_progressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter, which workout_progress to fetch.
     */
    where: workout_progressWhereUniqueInput
  }

  /**
   * workout_progress findFirst
   */
  export type workout_progressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter, which workout_progress to fetch.
     */
    where?: workout_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_progresses to fetch.
     */
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_progresses.
     */
    cursor?: workout_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_progresses.
     */
    distinct?: Workout_progressScalarFieldEnum | Workout_progressScalarFieldEnum[]
  }

  /**
   * workout_progress findFirstOrThrow
   */
  export type workout_progressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter, which workout_progress to fetch.
     */
    where?: workout_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_progresses to fetch.
     */
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_progresses.
     */
    cursor?: workout_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_progresses.
     */
    distinct?: Workout_progressScalarFieldEnum | Workout_progressScalarFieldEnum[]
  }

  /**
   * workout_progress findMany
   */
  export type workout_progressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter, which workout_progresses to fetch.
     */
    where?: workout_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_progresses to fetch.
     */
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workout_progresses.
     */
    cursor?: workout_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_progresses.
     */
    skip?: number
    distinct?: Workout_progressScalarFieldEnum | Workout_progressScalarFieldEnum[]
  }

  /**
   * workout_progress create
   */
  export type workout_progressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * The data needed to create a workout_progress.
     */
    data: XOR<workout_progressCreateInput, workout_progressUncheckedCreateInput>
  }

  /**
   * workout_progress createMany
   */
  export type workout_progressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workout_progresses.
     */
    data: workout_progressCreateManyInput | workout_progressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workout_progress createManyAndReturn
   */
  export type workout_progressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * The data used to create many workout_progresses.
     */
    data: workout_progressCreateManyInput | workout_progressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_progress update
   */
  export type workout_progressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * The data needed to update a workout_progress.
     */
    data: XOR<workout_progressUpdateInput, workout_progressUncheckedUpdateInput>
    /**
     * Choose, which workout_progress to update.
     */
    where: workout_progressWhereUniqueInput
  }

  /**
   * workout_progress updateMany
   */
  export type workout_progressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workout_progresses.
     */
    data: XOR<workout_progressUpdateManyMutationInput, workout_progressUncheckedUpdateManyInput>
    /**
     * Filter which workout_progresses to update
     */
    where?: workout_progressWhereInput
    limit?: number
  }

  /**
   * workout_progress updateManyAndReturn
   */
  export type workout_progressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * The data used to update workout_progresses.
     */
    data: XOR<workout_progressUpdateManyMutationInput, workout_progressUncheckedUpdateManyInput>
    /**
     * Filter which workout_progresses to update
     */
    where?: workout_progressWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_progress upsert
   */
  export type workout_progressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * The filter to search for the workout_progress to update in case it exists.
     */
    where: workout_progressWhereUniqueInput
    /**
     * In case the workout_progress found by the `where` argument doesn't exist, create a new workout_progress with this data.
     */
    create: XOR<workout_progressCreateInput, workout_progressUncheckedCreateInput>
    /**
     * In case the workout_progress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workout_progressUpdateInput, workout_progressUncheckedUpdateInput>
  }

  /**
   * workout_progress delete
   */
  export type workout_progressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    /**
     * Filter which workout_progress to delete.
     */
    where: workout_progressWhereUniqueInput
  }

  /**
   * workout_progress deleteMany
   */
  export type workout_progressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_progresses to delete
     */
    where?: workout_progressWhereInput
    limit?: number
  }

  /**
   * workout_progress.exerciseProgress
   */
  export type workout_progress$exerciseProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    where?: exercise_progressWhereInput
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    cursor?: exercise_progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_progressScalarFieldEnum | Exercise_progressScalarFieldEnum[]
  }

  /**
   * workout_progress without action
   */
  export type workout_progressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
  }


  /**
   * Model exercise_progress
   */

  export type AggregateExercise_progress = {
    _count: Exercise_progressCountAggregateOutputType | null
    _avg: Exercise_progressAvgAggregateOutputType | null
    _sum: Exercise_progressSumAggregateOutputType | null
    _min: Exercise_progressMinAggregateOutputType | null
    _max: Exercise_progressMaxAggregateOutputType | null
  }

  export type Exercise_progressAvgAggregateOutputType = {
    id: number | null
    workout_progress_id: number | null
    workout_exercise_id: number | null
    sets: number | null
    reps: number | null
    weight_used: number | null
  }

  export type Exercise_progressSumAggregateOutputType = {
    id: number | null
    workout_progress_id: number | null
    workout_exercise_id: number | null
    sets: number | null
    reps: number | null
    weight_used: number | null
  }

  export type Exercise_progressMinAggregateOutputType = {
    id: number | null
    workout_progress_id: number | null
    workout_exercise_id: number | null
    sets: number | null
    reps: number | null
    weight_used: number | null
  }

  export type Exercise_progressMaxAggregateOutputType = {
    id: number | null
    workout_progress_id: number | null
    workout_exercise_id: number | null
    sets: number | null
    reps: number | null
    weight_used: number | null
  }

  export type Exercise_progressCountAggregateOutputType = {
    id: number
    workout_progress_id: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used: number
    _all: number
  }


  export type Exercise_progressAvgAggregateInputType = {
    id?: true
    workout_progress_id?: true
    workout_exercise_id?: true
    sets?: true
    reps?: true
    weight_used?: true
  }

  export type Exercise_progressSumAggregateInputType = {
    id?: true
    workout_progress_id?: true
    workout_exercise_id?: true
    sets?: true
    reps?: true
    weight_used?: true
  }

  export type Exercise_progressMinAggregateInputType = {
    id?: true
    workout_progress_id?: true
    workout_exercise_id?: true
    sets?: true
    reps?: true
    weight_used?: true
  }

  export type Exercise_progressMaxAggregateInputType = {
    id?: true
    workout_progress_id?: true
    workout_exercise_id?: true
    sets?: true
    reps?: true
    weight_used?: true
  }

  export type Exercise_progressCountAggregateInputType = {
    id?: true
    workout_progress_id?: true
    workout_exercise_id?: true
    sets?: true
    reps?: true
    weight_used?: true
    _all?: true
  }

  export type Exercise_progressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_progress to aggregate.
     */
    where?: exercise_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_progresses to fetch.
     */
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exercise_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercise_progresses
    **/
    _count?: true | Exercise_progressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Exercise_progressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Exercise_progressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Exercise_progressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Exercise_progressMaxAggregateInputType
  }

  export type GetExercise_progressAggregateType<T extends Exercise_progressAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise_progress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise_progress[P]>
      : GetScalarType<T[P], AggregateExercise_progress[P]>
  }




  export type exercise_progressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_progressWhereInput
    orderBy?: exercise_progressOrderByWithAggregationInput | exercise_progressOrderByWithAggregationInput[]
    by: Exercise_progressScalarFieldEnum[] | Exercise_progressScalarFieldEnum
    having?: exercise_progressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Exercise_progressCountAggregateInputType | true
    _avg?: Exercise_progressAvgAggregateInputType
    _sum?: Exercise_progressSumAggregateInputType
    _min?: Exercise_progressMinAggregateInputType
    _max?: Exercise_progressMaxAggregateInputType
  }

  export type Exercise_progressGroupByOutputType = {
    id: number
    workout_progress_id: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used: number | null
    _count: Exercise_progressCountAggregateOutputType | null
    _avg: Exercise_progressAvgAggregateOutputType | null
    _sum: Exercise_progressSumAggregateOutputType | null
    _min: Exercise_progressMinAggregateOutputType | null
    _max: Exercise_progressMaxAggregateOutputType | null
  }

  type GetExercise_progressGroupByPayload<T extends exercise_progressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Exercise_progressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Exercise_progressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Exercise_progressGroupByOutputType[P]>
            : GetScalarType<T[P], Exercise_progressGroupByOutputType[P]>
        }
      >
    >


  export type exercise_progressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_progress_id?: boolean
    workout_exercise_id?: boolean
    sets?: boolean
    reps?: boolean
    weight_used?: boolean
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_progress"]>

  export type exercise_progressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_progress_id?: boolean
    workout_exercise_id?: boolean
    sets?: boolean
    reps?: boolean
    weight_used?: boolean
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_progress"]>

  export type exercise_progressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_progress_id?: boolean
    workout_exercise_id?: boolean
    sets?: boolean
    reps?: boolean
    weight_used?: boolean
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_progress"]>

  export type exercise_progressSelectScalar = {
    id?: boolean
    workout_progress_id?: boolean
    workout_exercise_id?: boolean
    sets?: boolean
    reps?: boolean
    weight_used?: boolean
  }

  export type exercise_progressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workout_progress_id" | "workout_exercise_id" | "sets" | "reps" | "weight_used", ExtArgs["result"]["exercise_progress"]>
  export type exercise_progressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }
  export type exercise_progressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }
  export type exercise_progressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout_progress?: boolean | workout_progressDefaultArgs<ExtArgs>
    workout_exercise?: boolean | workout_exerciseDefaultArgs<ExtArgs>
  }

  export type $exercise_progressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exercise_progress"
    objects: {
      workout_progress: Prisma.$workout_progressPayload<ExtArgs>
      workout_exercise: Prisma.$workout_exercisePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workout_progress_id: number
      workout_exercise_id: number
      sets: number
      reps: number
      weight_used: number | null
    }, ExtArgs["result"]["exercise_progress"]>
    composites: {}
  }

  type exercise_progressGetPayload<S extends boolean | null | undefined | exercise_progressDefaultArgs> = $Result.GetResult<Prisma.$exercise_progressPayload, S>

  type exercise_progressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exercise_progressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Exercise_progressCountAggregateInputType | true
    }

  export interface exercise_progressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exercise_progress'], meta: { name: 'exercise_progress' } }
    /**
     * Find zero or one Exercise_progress that matches the filter.
     * @param {exercise_progressFindUniqueArgs} args - Arguments to find a Exercise_progress
     * @example
     * // Get one Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exercise_progressFindUniqueArgs>(args: SelectSubset<T, exercise_progressFindUniqueArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Exercise_progress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exercise_progressFindUniqueOrThrowArgs} args - Arguments to find a Exercise_progress
     * @example
     * // Get one Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exercise_progressFindUniqueOrThrowArgs>(args: SelectSubset<T, exercise_progressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_progress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressFindFirstArgs} args - Arguments to find a Exercise_progress
     * @example
     * // Get one Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exercise_progressFindFirstArgs>(args?: SelectSubset<T, exercise_progressFindFirstArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_progress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressFindFirstOrThrowArgs} args - Arguments to find a Exercise_progress
     * @example
     * // Get one Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exercise_progressFindFirstOrThrowArgs>(args?: SelectSubset<T, exercise_progressFindFirstOrThrowArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Exercise_progresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercise_progresses
     * const exercise_progresses = await prisma.exercise_progress.findMany()
     * 
     * // Get first 10 Exercise_progresses
     * const exercise_progresses = await prisma.exercise_progress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercise_progressWithIdOnly = await prisma.exercise_progress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends exercise_progressFindManyArgs>(args?: SelectSubset<T, exercise_progressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Exercise_progress.
     * @param {exercise_progressCreateArgs} args - Arguments to create a Exercise_progress.
     * @example
     * // Create one Exercise_progress
     * const Exercise_progress = await prisma.exercise_progress.create({
     *   data: {
     *     // ... data to create a Exercise_progress
     *   }
     * })
     * 
     */
    create<T extends exercise_progressCreateArgs>(args: SelectSubset<T, exercise_progressCreateArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Exercise_progresses.
     * @param {exercise_progressCreateManyArgs} args - Arguments to create many Exercise_progresses.
     * @example
     * // Create many Exercise_progresses
     * const exercise_progress = await prisma.exercise_progress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exercise_progressCreateManyArgs>(args?: SelectSubset<T, exercise_progressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercise_progresses and returns the data saved in the database.
     * @param {exercise_progressCreateManyAndReturnArgs} args - Arguments to create many Exercise_progresses.
     * @example
     * // Create many Exercise_progresses
     * const exercise_progress = await prisma.exercise_progress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercise_progresses and only return the `id`
     * const exercise_progressWithIdOnly = await prisma.exercise_progress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends exercise_progressCreateManyAndReturnArgs>(args?: SelectSubset<T, exercise_progressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Exercise_progress.
     * @param {exercise_progressDeleteArgs} args - Arguments to delete one Exercise_progress.
     * @example
     * // Delete one Exercise_progress
     * const Exercise_progress = await prisma.exercise_progress.delete({
     *   where: {
     *     // ... filter to delete one Exercise_progress
     *   }
     * })
     * 
     */
    delete<T extends exercise_progressDeleteArgs>(args: SelectSubset<T, exercise_progressDeleteArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Exercise_progress.
     * @param {exercise_progressUpdateArgs} args - Arguments to update one Exercise_progress.
     * @example
     * // Update one Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exercise_progressUpdateArgs>(args: SelectSubset<T, exercise_progressUpdateArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Exercise_progresses.
     * @param {exercise_progressDeleteManyArgs} args - Arguments to filter Exercise_progresses to delete.
     * @example
     * // Delete a few Exercise_progresses
     * const { count } = await prisma.exercise_progress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exercise_progressDeleteManyArgs>(args?: SelectSubset<T, exercise_progressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercise_progresses
     * const exercise_progress = await prisma.exercise_progress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exercise_progressUpdateManyArgs>(args: SelectSubset<T, exercise_progressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_progresses and returns the data updated in the database.
     * @param {exercise_progressUpdateManyAndReturnArgs} args - Arguments to update many Exercise_progresses.
     * @example
     * // Update many Exercise_progresses
     * const exercise_progress = await prisma.exercise_progress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercise_progresses and only return the `id`
     * const exercise_progressWithIdOnly = await prisma.exercise_progress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends exercise_progressUpdateManyAndReturnArgs>(args: SelectSubset<T, exercise_progressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Exercise_progress.
     * @param {exercise_progressUpsertArgs} args - Arguments to update or create a Exercise_progress.
     * @example
     * // Update or create a Exercise_progress
     * const exercise_progress = await prisma.exercise_progress.upsert({
     *   create: {
     *     // ... data to create a Exercise_progress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise_progress we want to update
     *   }
     * })
     */
    upsert<T extends exercise_progressUpsertArgs>(args: SelectSubset<T, exercise_progressUpsertArgs<ExtArgs>>): Prisma__exercise_progressClient<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Exercise_progresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressCountArgs} args - Arguments to filter Exercise_progresses to count.
     * @example
     * // Count the number of Exercise_progresses
     * const count = await prisma.exercise_progress.count({
     *   where: {
     *     // ... the filter for the Exercise_progresses we want to count
     *   }
     * })
    **/
    count<T extends exercise_progressCountArgs>(
      args?: Subset<T, exercise_progressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Exercise_progressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise_progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Exercise_progressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Exercise_progressAggregateArgs>(args: Subset<T, Exercise_progressAggregateArgs>): Prisma.PrismaPromise<GetExercise_progressAggregateType<T>>

    /**
     * Group by Exercise_progress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_progressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exercise_progressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exercise_progressGroupByArgs['orderBy'] }
        : { orderBy?: exercise_progressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exercise_progressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercise_progressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exercise_progress model
   */
  readonly fields: exercise_progressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exercise_progress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exercise_progressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workout_progress<T extends workout_progressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workout_progressDefaultArgs<ExtArgs>>): Prisma__workout_progressClient<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    workout_exercise<T extends workout_exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workout_exerciseDefaultArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exercise_progress model
   */ 
  interface exercise_progressFieldRefs {
    readonly id: FieldRef<"exercise_progress", 'Int'>
    readonly workout_progress_id: FieldRef<"exercise_progress", 'Int'>
    readonly workout_exercise_id: FieldRef<"exercise_progress", 'Int'>
    readonly sets: FieldRef<"exercise_progress", 'Int'>
    readonly reps: FieldRef<"exercise_progress", 'Int'>
    readonly weight_used: FieldRef<"exercise_progress", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * exercise_progress findUnique
   */
  export type exercise_progressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter, which exercise_progress to fetch.
     */
    where: exercise_progressWhereUniqueInput
  }

  /**
   * exercise_progress findUniqueOrThrow
   */
  export type exercise_progressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter, which exercise_progress to fetch.
     */
    where: exercise_progressWhereUniqueInput
  }

  /**
   * exercise_progress findFirst
   */
  export type exercise_progressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter, which exercise_progress to fetch.
     */
    where?: exercise_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_progresses to fetch.
     */
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_progresses.
     */
    cursor?: exercise_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_progresses.
     */
    distinct?: Exercise_progressScalarFieldEnum | Exercise_progressScalarFieldEnum[]
  }

  /**
   * exercise_progress findFirstOrThrow
   */
  export type exercise_progressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter, which exercise_progress to fetch.
     */
    where?: exercise_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_progresses to fetch.
     */
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_progresses.
     */
    cursor?: exercise_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_progresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_progresses.
     */
    distinct?: Exercise_progressScalarFieldEnum | Exercise_progressScalarFieldEnum[]
  }

  /**
   * exercise_progress findMany
   */
  export type exercise_progressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter, which exercise_progresses to fetch.
     */
    where?: exercise_progressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_progresses to fetch.
     */
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercise_progresses.
     */
    cursor?: exercise_progressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_progresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_progresses.
     */
    skip?: number
    distinct?: Exercise_progressScalarFieldEnum | Exercise_progressScalarFieldEnum[]
  }

  /**
   * exercise_progress create
   */
  export type exercise_progressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * The data needed to create a exercise_progress.
     */
    data: XOR<exercise_progressCreateInput, exercise_progressUncheckedCreateInput>
  }

  /**
   * exercise_progress createMany
   */
  export type exercise_progressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exercise_progresses.
     */
    data: exercise_progressCreateManyInput | exercise_progressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise_progress createManyAndReturn
   */
  export type exercise_progressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * The data used to create many exercise_progresses.
     */
    data: exercise_progressCreateManyInput | exercise_progressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_progress update
   */
  export type exercise_progressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * The data needed to update a exercise_progress.
     */
    data: XOR<exercise_progressUpdateInput, exercise_progressUncheckedUpdateInput>
    /**
     * Choose, which exercise_progress to update.
     */
    where: exercise_progressWhereUniqueInput
  }

  /**
   * exercise_progress updateMany
   */
  export type exercise_progressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exercise_progresses.
     */
    data: XOR<exercise_progressUpdateManyMutationInput, exercise_progressUncheckedUpdateManyInput>
    /**
     * Filter which exercise_progresses to update
     */
    where?: exercise_progressWhereInput
    limit?: number
  }

  /**
   * exercise_progress updateManyAndReturn
   */
  export type exercise_progressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * The data used to update exercise_progresses.
     */
    data: XOR<exercise_progressUpdateManyMutationInput, exercise_progressUncheckedUpdateManyInput>
    /**
     * Filter which exercise_progresses to update
     */
    where?: exercise_progressWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_progress upsert
   */
  export type exercise_progressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * The filter to search for the exercise_progress to update in case it exists.
     */
    where: exercise_progressWhereUniqueInput
    /**
     * In case the exercise_progress found by the `where` argument doesn't exist, create a new exercise_progress with this data.
     */
    create: XOR<exercise_progressCreateInput, exercise_progressUncheckedCreateInput>
    /**
     * In case the exercise_progress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exercise_progressUpdateInput, exercise_progressUncheckedUpdateInput>
  }

  /**
   * exercise_progress delete
   */
  export type exercise_progressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    /**
     * Filter which exercise_progress to delete.
     */
    where: exercise_progressWhereUniqueInput
  }

  /**
   * exercise_progress deleteMany
   */
  export type exercise_progressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_progresses to delete
     */
    where?: exercise_progressWhereInput
    limit?: number
  }

  /**
   * exercise_progress without action
   */
  export type exercise_progressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
  }


  /**
   * Model workoutperweek
   */

  export type AggregateWorkoutperweek = {
    _count: WorkoutperweekCountAggregateOutputType | null
    _avg: WorkoutperweekAvgAggregateOutputType | null
    _sum: WorkoutperweekSumAggregateOutputType | null
    _min: WorkoutperweekMinAggregateOutputType | null
    _max: WorkoutperweekMaxAggregateOutputType | null
  }

  export type WorkoutperweekAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkoutperweekSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkoutperweekMinAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkoutperweekMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type WorkoutperweekCountAggregateOutputType = {
    id: number
    user_id: number
    _all: number
  }


  export type WorkoutperweekAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkoutperweekSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkoutperweekMinAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkoutperweekMaxAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type WorkoutperweekCountAggregateInputType = {
    id?: true
    user_id?: true
    _all?: true
  }

  export type WorkoutperweekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workoutperweek to aggregate.
     */
    where?: workoutperweekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workoutperweeks to fetch.
     */
    orderBy?: workoutperweekOrderByWithRelationInput | workoutperweekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workoutperweekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workoutperweeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workoutperweeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workoutperweeks
    **/
    _count?: true | WorkoutperweekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutperweekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutperweekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutperweekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutperweekMaxAggregateInputType
  }

  export type GetWorkoutperweekAggregateType<T extends WorkoutperweekAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkoutperweek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkoutperweek[P]>
      : GetScalarType<T[P], AggregateWorkoutperweek[P]>
  }




  export type workoutperweekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workoutperweekWhereInput
    orderBy?: workoutperweekOrderByWithAggregationInput | workoutperweekOrderByWithAggregationInput[]
    by: WorkoutperweekScalarFieldEnum[] | WorkoutperweekScalarFieldEnum
    having?: workoutperweekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutperweekCountAggregateInputType | true
    _avg?: WorkoutperweekAvgAggregateInputType
    _sum?: WorkoutperweekSumAggregateInputType
    _min?: WorkoutperweekMinAggregateInputType
    _max?: WorkoutperweekMaxAggregateInputType
  }

  export type WorkoutperweekGroupByOutputType = {
    id: number
    user_id: number
    _count: WorkoutperweekCountAggregateOutputType | null
    _avg: WorkoutperweekAvgAggregateOutputType | null
    _sum: WorkoutperweekSumAggregateOutputType | null
    _min: WorkoutperweekMinAggregateOutputType | null
    _max: WorkoutperweekMaxAggregateOutputType | null
  }

  type GetWorkoutperweekGroupByPayload<T extends workoutperweekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutperweekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutperweekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutperweekGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutperweekGroupByOutputType[P]>
        }
      >
    >


  export type workoutperweekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    workouts?: boolean | workoutperweek$workoutsArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | WorkoutperweekCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutperweek"]>

  export type workoutperweekSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutperweek"]>

  export type workoutperweekSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workoutperweek"]>

  export type workoutperweekSelectScalar = {
    id?: boolean
    user_id?: boolean
  }

  export type workoutperweekOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id", ExtArgs["result"]["workoutperweek"]>
  export type workoutperweekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workouts?: boolean | workoutperweek$workoutsArgs<ExtArgs>
    user?: boolean | usersDefaultArgs<ExtArgs>
    _count?: boolean | WorkoutperweekCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type workoutperweekIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type workoutperweekIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $workoutperweekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workoutperweek"
    objects: {
      workouts: Prisma.$workout_per_week_workoutPayload<ExtArgs>[]
      user: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
    }, ExtArgs["result"]["workoutperweek"]>
    composites: {}
  }

  type workoutperweekGetPayload<S extends boolean | null | undefined | workoutperweekDefaultArgs> = $Result.GetResult<Prisma.$workoutperweekPayload, S>

  type workoutperweekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workoutperweekFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutperweekCountAggregateInputType | true
    }

  export interface workoutperweekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workoutperweek'], meta: { name: 'workoutperweek' } }
    /**
     * Find zero or one Workoutperweek that matches the filter.
     * @param {workoutperweekFindUniqueArgs} args - Arguments to find a Workoutperweek
     * @example
     * // Get one Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workoutperweekFindUniqueArgs>(args: SelectSubset<T, workoutperweekFindUniqueArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Workoutperweek that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workoutperweekFindUniqueOrThrowArgs} args - Arguments to find a Workoutperweek
     * @example
     * // Get one Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workoutperweekFindUniqueOrThrowArgs>(args: SelectSubset<T, workoutperweekFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Workoutperweek that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekFindFirstArgs} args - Arguments to find a Workoutperweek
     * @example
     * // Get one Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workoutperweekFindFirstArgs>(args?: SelectSubset<T, workoutperweekFindFirstArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Workoutperweek that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekFindFirstOrThrowArgs} args - Arguments to find a Workoutperweek
     * @example
     * // Get one Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workoutperweekFindFirstOrThrowArgs>(args?: SelectSubset<T, workoutperweekFindFirstOrThrowArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Workoutperweeks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workoutperweeks
     * const workoutperweeks = await prisma.workoutperweek.findMany()
     * 
     * // Get first 10 Workoutperweeks
     * const workoutperweeks = await prisma.workoutperweek.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutperweekWithIdOnly = await prisma.workoutperweek.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workoutperweekFindManyArgs>(args?: SelectSubset<T, workoutperweekFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Workoutperweek.
     * @param {workoutperweekCreateArgs} args - Arguments to create a Workoutperweek.
     * @example
     * // Create one Workoutperweek
     * const Workoutperweek = await prisma.workoutperweek.create({
     *   data: {
     *     // ... data to create a Workoutperweek
     *   }
     * })
     * 
     */
    create<T extends workoutperweekCreateArgs>(args: SelectSubset<T, workoutperweekCreateArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Workoutperweeks.
     * @param {workoutperweekCreateManyArgs} args - Arguments to create many Workoutperweeks.
     * @example
     * // Create many Workoutperweeks
     * const workoutperweek = await prisma.workoutperweek.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workoutperweekCreateManyArgs>(args?: SelectSubset<T, workoutperweekCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workoutperweeks and returns the data saved in the database.
     * @param {workoutperweekCreateManyAndReturnArgs} args - Arguments to create many Workoutperweeks.
     * @example
     * // Create many Workoutperweeks
     * const workoutperweek = await prisma.workoutperweek.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workoutperweeks and only return the `id`
     * const workoutperweekWithIdOnly = await prisma.workoutperweek.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends workoutperweekCreateManyAndReturnArgs>(args?: SelectSubset<T, workoutperweekCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Workoutperweek.
     * @param {workoutperweekDeleteArgs} args - Arguments to delete one Workoutperweek.
     * @example
     * // Delete one Workoutperweek
     * const Workoutperweek = await prisma.workoutperweek.delete({
     *   where: {
     *     // ... filter to delete one Workoutperweek
     *   }
     * })
     * 
     */
    delete<T extends workoutperweekDeleteArgs>(args: SelectSubset<T, workoutperweekDeleteArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Workoutperweek.
     * @param {workoutperweekUpdateArgs} args - Arguments to update one Workoutperweek.
     * @example
     * // Update one Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workoutperweekUpdateArgs>(args: SelectSubset<T, workoutperweekUpdateArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Workoutperweeks.
     * @param {workoutperweekDeleteManyArgs} args - Arguments to filter Workoutperweeks to delete.
     * @example
     * // Delete a few Workoutperweeks
     * const { count } = await prisma.workoutperweek.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workoutperweekDeleteManyArgs>(args?: SelectSubset<T, workoutperweekDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workoutperweeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workoutperweeks
     * const workoutperweek = await prisma.workoutperweek.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workoutperweekUpdateManyArgs>(args: SelectSubset<T, workoutperweekUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workoutperweeks and returns the data updated in the database.
     * @param {workoutperweekUpdateManyAndReturnArgs} args - Arguments to update many Workoutperweeks.
     * @example
     * // Update many Workoutperweeks
     * const workoutperweek = await prisma.workoutperweek.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workoutperweeks and only return the `id`
     * const workoutperweekWithIdOnly = await prisma.workoutperweek.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends workoutperweekUpdateManyAndReturnArgs>(args: SelectSubset<T, workoutperweekUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Workoutperweek.
     * @param {workoutperweekUpsertArgs} args - Arguments to update or create a Workoutperweek.
     * @example
     * // Update or create a Workoutperweek
     * const workoutperweek = await prisma.workoutperweek.upsert({
     *   create: {
     *     // ... data to create a Workoutperweek
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workoutperweek we want to update
     *   }
     * })
     */
    upsert<T extends workoutperweekUpsertArgs>(args: SelectSubset<T, workoutperweekUpsertArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Workoutperweeks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekCountArgs} args - Arguments to filter Workoutperweeks to count.
     * @example
     * // Count the number of Workoutperweeks
     * const count = await prisma.workoutperweek.count({
     *   where: {
     *     // ... the filter for the Workoutperweeks we want to count
     *   }
     * })
    **/
    count<T extends workoutperweekCountArgs>(
      args?: Subset<T, workoutperweekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutperweekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workoutperweek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutperweekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutperweekAggregateArgs>(args: Subset<T, WorkoutperweekAggregateArgs>): Prisma.PrismaPromise<GetWorkoutperweekAggregateType<T>>

    /**
     * Group by Workoutperweek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutperweekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workoutperweekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workoutperweekGroupByArgs['orderBy'] }
        : { orderBy?: workoutperweekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workoutperweekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutperweekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workoutperweek model
   */
  readonly fields: workoutperweekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workoutperweek.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workoutperweekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workouts<T extends workoutperweek$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, workoutperweek$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workoutperweek model
   */ 
  interface workoutperweekFieldRefs {
    readonly id: FieldRef<"workoutperweek", 'Int'>
    readonly user_id: FieldRef<"workoutperweek", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * workoutperweek findUnique
   */
  export type workoutperweekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter, which workoutperweek to fetch.
     */
    where: workoutperweekWhereUniqueInput
  }

  /**
   * workoutperweek findUniqueOrThrow
   */
  export type workoutperweekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter, which workoutperweek to fetch.
     */
    where: workoutperweekWhereUniqueInput
  }

  /**
   * workoutperweek findFirst
   */
  export type workoutperweekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter, which workoutperweek to fetch.
     */
    where?: workoutperweekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workoutperweeks to fetch.
     */
    orderBy?: workoutperweekOrderByWithRelationInput | workoutperweekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workoutperweeks.
     */
    cursor?: workoutperweekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workoutperweeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workoutperweeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workoutperweeks.
     */
    distinct?: WorkoutperweekScalarFieldEnum | WorkoutperweekScalarFieldEnum[]
  }

  /**
   * workoutperweek findFirstOrThrow
   */
  export type workoutperweekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter, which workoutperweek to fetch.
     */
    where?: workoutperweekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workoutperweeks to fetch.
     */
    orderBy?: workoutperweekOrderByWithRelationInput | workoutperweekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workoutperweeks.
     */
    cursor?: workoutperweekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workoutperweeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workoutperweeks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workoutperweeks.
     */
    distinct?: WorkoutperweekScalarFieldEnum | WorkoutperweekScalarFieldEnum[]
  }

  /**
   * workoutperweek findMany
   */
  export type workoutperweekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter, which workoutperweeks to fetch.
     */
    where?: workoutperweekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workoutperweeks to fetch.
     */
    orderBy?: workoutperweekOrderByWithRelationInput | workoutperweekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workoutperweeks.
     */
    cursor?: workoutperweekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workoutperweeks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workoutperweeks.
     */
    skip?: number
    distinct?: WorkoutperweekScalarFieldEnum | WorkoutperweekScalarFieldEnum[]
  }

  /**
   * workoutperweek create
   */
  export type workoutperweekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * The data needed to create a workoutperweek.
     */
    data: XOR<workoutperweekCreateInput, workoutperweekUncheckedCreateInput>
  }

  /**
   * workoutperweek createMany
   */
  export type workoutperweekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workoutperweeks.
     */
    data: workoutperweekCreateManyInput | workoutperweekCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workoutperweek createManyAndReturn
   */
  export type workoutperweekCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * The data used to create many workoutperweeks.
     */
    data: workoutperweekCreateManyInput | workoutperweekCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * workoutperweek update
   */
  export type workoutperweekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * The data needed to update a workoutperweek.
     */
    data: XOR<workoutperweekUpdateInput, workoutperweekUncheckedUpdateInput>
    /**
     * Choose, which workoutperweek to update.
     */
    where: workoutperweekWhereUniqueInput
  }

  /**
   * workoutperweek updateMany
   */
  export type workoutperweekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workoutperweeks.
     */
    data: XOR<workoutperweekUpdateManyMutationInput, workoutperweekUncheckedUpdateManyInput>
    /**
     * Filter which workoutperweeks to update
     */
    where?: workoutperweekWhereInput
    limit?: number
  }

  /**
   * workoutperweek updateManyAndReturn
   */
  export type workoutperweekUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * The data used to update workoutperweeks.
     */
    data: XOR<workoutperweekUpdateManyMutationInput, workoutperweekUncheckedUpdateManyInput>
    /**
     * Filter which workoutperweeks to update
     */
    where?: workoutperweekWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * workoutperweek upsert
   */
  export type workoutperweekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * The filter to search for the workoutperweek to update in case it exists.
     */
    where: workoutperweekWhereUniqueInput
    /**
     * In case the workoutperweek found by the `where` argument doesn't exist, create a new workoutperweek with this data.
     */
    create: XOR<workoutperweekCreateInput, workoutperweekUncheckedCreateInput>
    /**
     * In case the workoutperweek was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workoutperweekUpdateInput, workoutperweekUncheckedUpdateInput>
  }

  /**
   * workoutperweek delete
   */
  export type workoutperweekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
    /**
     * Filter which workoutperweek to delete.
     */
    where: workoutperweekWhereUniqueInput
  }

  /**
   * workoutperweek deleteMany
   */
  export type workoutperweekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workoutperweeks to delete
     */
    where?: workoutperweekWhereInput
    limit?: number
  }

  /**
   * workoutperweek.workouts
   */
  export type workoutperweek$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    where?: workout_per_week_workoutWhereInput
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    cursor?: workout_per_week_workoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_per_week_workoutScalarFieldEnum | Workout_per_week_workoutScalarFieldEnum[]
  }

  /**
   * workoutperweek without action
   */
  export type workoutperweekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workoutperweek
     */
    select?: workoutperweekSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workoutperweek
     */
    omit?: workoutperweekOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutperweekInclude<ExtArgs> | null
  }


  /**
   * Model workout
   */

  export type AggregateWorkout = {
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  export type WorkoutAvgAggregateOutputType = {
    id: number | null
  }

  export type WorkoutSumAggregateOutputType = {
    id: number | null
  }

  export type WorkoutMinAggregateOutputType = {
    id: number | null
    date: Date | null
    status: string | null
  }

  export type WorkoutMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    status: string | null
  }

  export type WorkoutCountAggregateOutputType = {
    id: number
    date: number
    status: number
    _all: number
  }


  export type WorkoutAvgAggregateInputType = {
    id?: true
  }

  export type WorkoutSumAggregateInputType = {
    id?: true
  }

  export type WorkoutMinAggregateInputType = {
    id?: true
    date?: true
    status?: true
  }

  export type WorkoutMaxAggregateInputType = {
    id?: true
    date?: true
    status?: true
  }

  export type WorkoutCountAggregateInputType = {
    id?: true
    date?: true
    status?: true
    _all?: true
  }

  export type WorkoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout to aggregate.
     */
    where?: workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workouts to fetch.
     */
    orderBy?: workoutOrderByWithRelationInput | workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workouts
    **/
    _count?: true | WorkoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkoutMaxAggregateInputType
  }

  export type GetWorkoutAggregateType<T extends WorkoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout[P]>
      : GetScalarType<T[P], AggregateWorkout[P]>
  }




  export type workoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workoutWhereInput
    orderBy?: workoutOrderByWithAggregationInput | workoutOrderByWithAggregationInput[]
    by: WorkoutScalarFieldEnum[] | WorkoutScalarFieldEnum
    having?: workoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkoutCountAggregateInputType | true
    _avg?: WorkoutAvgAggregateInputType
    _sum?: WorkoutSumAggregateInputType
    _min?: WorkoutMinAggregateInputType
    _max?: WorkoutMaxAggregateInputType
  }

  export type WorkoutGroupByOutputType = {
    id: number
    date: Date
    status: string | null
    _count: WorkoutCountAggregateOutputType | null
    _avg: WorkoutAvgAggregateOutputType | null
    _sum: WorkoutSumAggregateOutputType | null
    _min: WorkoutMinAggregateOutputType | null
    _max: WorkoutMaxAggregateOutputType | null
  }

  type GetWorkoutGroupByPayload<T extends workoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
            : GetScalarType<T[P], WorkoutGroupByOutputType[P]>
        }
      >
    >


  export type workoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    status?: boolean
    exercises?: boolean | workout$exercisesArgs<ExtArgs>
    perWeek?: boolean | workout$perWeekArgs<ExtArgs>
    workout_progress?: boolean | workout$workout_progressArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout"]>

  export type workoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    status?: boolean
  }, ExtArgs["result"]["workout"]>

  export type workoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    status?: boolean
  }, ExtArgs["result"]["workout"]>

  export type workoutSelectScalar = {
    id?: boolean
    date?: boolean
    status?: boolean
  }

  export type workoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "status", ExtArgs["result"]["workout"]>
  export type workoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | workout$exercisesArgs<ExtArgs>
    perWeek?: boolean | workout$perWeekArgs<ExtArgs>
    workout_progress?: boolean | workout$workout_progressArgs<ExtArgs>
    _count?: boolean | WorkoutCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type workoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type workoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $workoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workout"
    objects: {
      exercises: Prisma.$workout_exercisePayload<ExtArgs>[]
      perWeek: Prisma.$workout_per_week_workoutPayload<ExtArgs>[]
      workout_progress: Prisma.$workout_progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      status: string | null
    }, ExtArgs["result"]["workout"]>
    composites: {}
  }

  type workoutGetPayload<S extends boolean | null | undefined | workoutDefaultArgs> = $Result.GetResult<Prisma.$workoutPayload, S>

  type workoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkoutCountAggregateInputType | true
    }

  export interface workoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workout'], meta: { name: 'workout' } }
    /**
     * Find zero or one Workout that matches the filter.
     * @param {workoutFindUniqueArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workoutFindUniqueArgs>(args: SelectSubset<T, workoutFindUniqueArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Workout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workoutFindUniqueOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workoutFindUniqueOrThrowArgs>(args: SelectSubset<T, workoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutFindFirstArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workoutFindFirstArgs>(args?: SelectSubset<T, workoutFindFirstArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutFindFirstOrThrowArgs} args - Arguments to find a Workout
     * @example
     * // Get one Workout
     * const workout = await prisma.workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workoutFindFirstOrThrowArgs>(args?: SelectSubset<T, workoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workouts
     * const workouts = await prisma.workout.findMany()
     * 
     * // Get first 10 Workouts
     * const workouts = await prisma.workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workoutWithIdOnly = await prisma.workout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workoutFindManyArgs>(args?: SelectSubset<T, workoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Workout.
     * @param {workoutCreateArgs} args - Arguments to create a Workout.
     * @example
     * // Create one Workout
     * const Workout = await prisma.workout.create({
     *   data: {
     *     // ... data to create a Workout
     *   }
     * })
     * 
     */
    create<T extends workoutCreateArgs>(args: SelectSubset<T, workoutCreateArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Workouts.
     * @param {workoutCreateManyArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workoutCreateManyArgs>(args?: SelectSubset<T, workoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workouts and returns the data saved in the database.
     * @param {workoutCreateManyAndReturnArgs} args - Arguments to create many Workouts.
     * @example
     * // Create many Workouts
     * const workout = await prisma.workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends workoutCreateManyAndReturnArgs>(args?: SelectSubset<T, workoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Workout.
     * @param {workoutDeleteArgs} args - Arguments to delete one Workout.
     * @example
     * // Delete one Workout
     * const Workout = await prisma.workout.delete({
     *   where: {
     *     // ... filter to delete one Workout
     *   }
     * })
     * 
     */
    delete<T extends workoutDeleteArgs>(args: SelectSubset<T, workoutDeleteArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Workout.
     * @param {workoutUpdateArgs} args - Arguments to update one Workout.
     * @example
     * // Update one Workout
     * const workout = await prisma.workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workoutUpdateArgs>(args: SelectSubset<T, workoutUpdateArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Workouts.
     * @param {workoutDeleteManyArgs} args - Arguments to filter Workouts to delete.
     * @example
     * // Delete a few Workouts
     * const { count } = await prisma.workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workoutDeleteManyArgs>(args?: SelectSubset<T, workoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workoutUpdateManyArgs>(args: SelectSubset<T, workoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workouts and returns the data updated in the database.
     * @param {workoutUpdateManyAndReturnArgs} args - Arguments to update many Workouts.
     * @example
     * // Update many Workouts
     * const workout = await prisma.workout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workouts and only return the `id`
     * const workoutWithIdOnly = await prisma.workout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends workoutUpdateManyAndReturnArgs>(args: SelectSubset<T, workoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Workout.
     * @param {workoutUpsertArgs} args - Arguments to update or create a Workout.
     * @example
     * // Update or create a Workout
     * const workout = await prisma.workout.upsert({
     *   create: {
     *     // ... data to create a Workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout we want to update
     *   }
     * })
     */
    upsert<T extends workoutUpsertArgs>(args: SelectSubset<T, workoutUpsertArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutCountArgs} args - Arguments to filter Workouts to count.
     * @example
     * // Count the number of Workouts
     * const count = await prisma.workout.count({
     *   where: {
     *     // ... the filter for the Workouts we want to count
     *   }
     * })
    **/
    count<T extends workoutCountArgs>(
      args?: Subset<T, workoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkoutAggregateArgs>(args: Subset<T, WorkoutAggregateArgs>): Prisma.PrismaPromise<GetWorkoutAggregateType<T>>

    /**
     * Group by Workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workoutGroupByArgs['orderBy'] }
        : { orderBy?: workoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workout model
   */
  readonly fields: workoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends workout$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, workout$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    perWeek<T extends workout$perWeekArgs<ExtArgs> = {}>(args?: Subset<T, workout$perWeekArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workout_progress<T extends workout$workout_progressArgs<ExtArgs> = {}>(args?: Subset<T, workout$workout_progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_progressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workout model
   */ 
  interface workoutFieldRefs {
    readonly id: FieldRef<"workout", 'Int'>
    readonly date: FieldRef<"workout", 'DateTime'>
    readonly status: FieldRef<"workout", 'String'>
  }
    

  // Custom InputTypes
  /**
   * workout findUnique
   */
  export type workoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout to fetch.
     */
    where: workoutWhereUniqueInput
  }

  /**
   * workout findUniqueOrThrow
   */
  export type workoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout to fetch.
     */
    where: workoutWhereUniqueInput
  }

  /**
   * workout findFirst
   */
  export type workoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout to fetch.
     */
    where?: workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workouts to fetch.
     */
    orderBy?: workoutOrderByWithRelationInput | workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workouts.
     */
    cursor?: workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * workout findFirstOrThrow
   */
  export type workoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout to fetch.
     */
    where?: workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workouts to fetch.
     */
    orderBy?: workoutOrderByWithRelationInput | workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workouts.
     */
    cursor?: workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workouts.
     */
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * workout findMany
   */
  export type workoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter, which workouts to fetch.
     */
    where?: workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workouts to fetch.
     */
    orderBy?: workoutOrderByWithRelationInput | workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workouts.
     */
    cursor?: workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workouts.
     */
    skip?: number
    distinct?: WorkoutScalarFieldEnum | WorkoutScalarFieldEnum[]
  }

  /**
   * workout create
   */
  export type workoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * The data needed to create a workout.
     */
    data?: XOR<workoutCreateInput, workoutUncheckedCreateInput>
  }

  /**
   * workout createMany
   */
  export type workoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workouts.
     */
    data: workoutCreateManyInput | workoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workout createManyAndReturn
   */
  export type workoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * The data used to create many workouts.
     */
    data: workoutCreateManyInput | workoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workout update
   */
  export type workoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * The data needed to update a workout.
     */
    data: XOR<workoutUpdateInput, workoutUncheckedUpdateInput>
    /**
     * Choose, which workout to update.
     */
    where: workoutWhereUniqueInput
  }

  /**
   * workout updateMany
   */
  export type workoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workouts.
     */
    data: XOR<workoutUpdateManyMutationInput, workoutUncheckedUpdateManyInput>
    /**
     * Filter which workouts to update
     */
    where?: workoutWhereInput
    limit?: number
  }

  /**
   * workout updateManyAndReturn
   */
  export type workoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * The data used to update workouts.
     */
    data: XOR<workoutUpdateManyMutationInput, workoutUncheckedUpdateManyInput>
    /**
     * Filter which workouts to update
     */
    where?: workoutWhereInput
    limit?: number
  }

  /**
   * workout upsert
   */
  export type workoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * The filter to search for the workout to update in case it exists.
     */
    where: workoutWhereUniqueInput
    /**
     * In case the workout found by the `where` argument doesn't exist, create a new workout with this data.
     */
    create: XOR<workoutCreateInput, workoutUncheckedCreateInput>
    /**
     * In case the workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workoutUpdateInput, workoutUncheckedUpdateInput>
  }

  /**
   * workout delete
   */
  export type workoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
    /**
     * Filter which workout to delete.
     */
    where: workoutWhereUniqueInput
  }

  /**
   * workout deleteMany
   */
  export type workoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workouts to delete
     */
    where?: workoutWhereInput
    limit?: number
  }

  /**
   * workout.exercises
   */
  export type workout$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    where?: workout_exerciseWhereInput
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    cursor?: workout_exerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_exerciseScalarFieldEnum | Workout_exerciseScalarFieldEnum[]
  }

  /**
   * workout.perWeek
   */
  export type workout$perWeekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    where?: workout_per_week_workoutWhereInput
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    cursor?: workout_per_week_workoutWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_per_week_workoutScalarFieldEnum | Workout_per_week_workoutScalarFieldEnum[]
  }

  /**
   * workout.workout_progress
   */
  export type workout$workout_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_progress
     */
    select?: workout_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_progress
     */
    omit?: workout_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_progressInclude<ExtArgs> | null
    where?: workout_progressWhereInput
    orderBy?: workout_progressOrderByWithRelationInput | workout_progressOrderByWithRelationInput[]
    cursor?: workout_progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_progressScalarFieldEnum | Workout_progressScalarFieldEnum[]
  }

  /**
   * workout without action
   */
  export type workoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout
     */
    select?: workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout
     */
    omit?: workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workoutInclude<ExtArgs> | null
  }


  /**
   * Model workout_exercise
   */

  export type AggregateWorkout_exercise = {
    _count: Workout_exerciseCountAggregateOutputType | null
    _avg: Workout_exerciseAvgAggregateOutputType | null
    _sum: Workout_exerciseSumAggregateOutputType | null
    _min: Workout_exerciseMinAggregateOutputType | null
    _max: Workout_exerciseMaxAggregateOutputType | null
  }

  export type Workout_exerciseAvgAggregateOutputType = {
    id: number | null
    workout_id: number | null
    exercise_id: number | null
    reps: number | null
    set: number | null
    weight: number | null
  }

  export type Workout_exerciseSumAggregateOutputType = {
    id: number | null
    workout_id: number | null
    exercise_id: number | null
    reps: number | null
    set: number | null
    weight: number | null
  }

  export type Workout_exerciseMinAggregateOutputType = {
    id: number | null
    workout_id: number | null
    exercise_id: number | null
    reps: number | null
    set: number | null
    weight: number | null
  }

  export type Workout_exerciseMaxAggregateOutputType = {
    id: number | null
    workout_id: number | null
    exercise_id: number | null
    reps: number | null
    set: number | null
    weight: number | null
  }

  export type Workout_exerciseCountAggregateOutputType = {
    id: number
    workout_id: number
    exercise_id: number
    reps: number
    set: number
    weight: number
    _all: number
  }


  export type Workout_exerciseAvgAggregateInputType = {
    id?: true
    workout_id?: true
    exercise_id?: true
    reps?: true
    set?: true
    weight?: true
  }

  export type Workout_exerciseSumAggregateInputType = {
    id?: true
    workout_id?: true
    exercise_id?: true
    reps?: true
    set?: true
    weight?: true
  }

  export type Workout_exerciseMinAggregateInputType = {
    id?: true
    workout_id?: true
    exercise_id?: true
    reps?: true
    set?: true
    weight?: true
  }

  export type Workout_exerciseMaxAggregateInputType = {
    id?: true
    workout_id?: true
    exercise_id?: true
    reps?: true
    set?: true
    weight?: true
  }

  export type Workout_exerciseCountAggregateInputType = {
    id?: true
    workout_id?: true
    exercise_id?: true
    reps?: true
    set?: true
    weight?: true
    _all?: true
  }

  export type Workout_exerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_exercise to aggregate.
     */
    where?: workout_exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_exercises to fetch.
     */
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workout_exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workout_exercises
    **/
    _count?: true | Workout_exerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Workout_exerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Workout_exerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Workout_exerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Workout_exerciseMaxAggregateInputType
  }

  export type GetWorkout_exerciseAggregateType<T extends Workout_exerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout_exercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout_exercise[P]>
      : GetScalarType<T[P], AggregateWorkout_exercise[P]>
  }




  export type workout_exerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_exerciseWhereInput
    orderBy?: workout_exerciseOrderByWithAggregationInput | workout_exerciseOrderByWithAggregationInput[]
    by: Workout_exerciseScalarFieldEnum[] | Workout_exerciseScalarFieldEnum
    having?: workout_exerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Workout_exerciseCountAggregateInputType | true
    _avg?: Workout_exerciseAvgAggregateInputType
    _sum?: Workout_exerciseSumAggregateInputType
    _min?: Workout_exerciseMinAggregateInputType
    _max?: Workout_exerciseMaxAggregateInputType
  }

  export type Workout_exerciseGroupByOutputType = {
    id: number
    workout_id: number
    exercise_id: number
    reps: number
    set: number
    weight: number | null
    _count: Workout_exerciseCountAggregateOutputType | null
    _avg: Workout_exerciseAvgAggregateOutputType | null
    _sum: Workout_exerciseSumAggregateOutputType | null
    _min: Workout_exerciseMinAggregateOutputType | null
    _max: Workout_exerciseMaxAggregateOutputType | null
  }

  type GetWorkout_exerciseGroupByPayload<T extends workout_exerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Workout_exerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Workout_exerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Workout_exerciseGroupByOutputType[P]>
            : GetScalarType<T[P], Workout_exerciseGroupByOutputType[P]>
        }
      >
    >


  export type workout_exerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    exercise_id?: boolean
    reps?: boolean
    set?: boolean
    weight?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    exercise_progress?: boolean | workout_exercise$exercise_progressArgs<ExtArgs>
    _count?: boolean | Workout_exerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_exercise"]>

  export type workout_exerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    exercise_id?: boolean
    reps?: boolean
    set?: boolean
    weight?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_exercise"]>

  export type workout_exerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    exercise_id?: boolean
    reps?: boolean
    set?: boolean
    weight?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_exercise"]>

  export type workout_exerciseSelectScalar = {
    id?: boolean
    workout_id?: boolean
    exercise_id?: boolean
    reps?: boolean
    set?: boolean
    weight?: boolean
  }

  export type workout_exerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workout_id" | "exercise_id" | "reps" | "set" | "weight", ExtArgs["result"]["workout_exercise"]>
  export type workout_exerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    exercise_progress?: boolean | workout_exercise$exercise_progressArgs<ExtArgs>
    _count?: boolean | Workout_exerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type workout_exerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }
  export type workout_exerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
  }

  export type $workout_exercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workout_exercise"
    objects: {
      workout: Prisma.$workoutPayload<ExtArgs>
      exercise: Prisma.$exercisePayload<ExtArgs>
      exercise_progress: Prisma.$exercise_progressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workout_id: number
      exercise_id: number
      reps: number
      set: number
      weight: number | null
    }, ExtArgs["result"]["workout_exercise"]>
    composites: {}
  }

  type workout_exerciseGetPayload<S extends boolean | null | undefined | workout_exerciseDefaultArgs> = $Result.GetResult<Prisma.$workout_exercisePayload, S>

  type workout_exerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workout_exerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Workout_exerciseCountAggregateInputType | true
    }

  export interface workout_exerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workout_exercise'], meta: { name: 'workout_exercise' } }
    /**
     * Find zero or one Workout_exercise that matches the filter.
     * @param {workout_exerciseFindUniqueArgs} args - Arguments to find a Workout_exercise
     * @example
     * // Get one Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workout_exerciseFindUniqueArgs>(args: SelectSubset<T, workout_exerciseFindUniqueArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Workout_exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workout_exerciseFindUniqueOrThrowArgs} args - Arguments to find a Workout_exercise
     * @example
     * // Get one Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workout_exerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, workout_exerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseFindFirstArgs} args - Arguments to find a Workout_exercise
     * @example
     * // Get one Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workout_exerciseFindFirstArgs>(args?: SelectSubset<T, workout_exerciseFindFirstArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseFindFirstOrThrowArgs} args - Arguments to find a Workout_exercise
     * @example
     * // Get one Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workout_exerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, workout_exerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Workout_exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workout_exercises
     * const workout_exercises = await prisma.workout_exercise.findMany()
     * 
     * // Get first 10 Workout_exercises
     * const workout_exercises = await prisma.workout_exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workout_exerciseWithIdOnly = await prisma.workout_exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workout_exerciseFindManyArgs>(args?: SelectSubset<T, workout_exerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Workout_exercise.
     * @param {workout_exerciseCreateArgs} args - Arguments to create a Workout_exercise.
     * @example
     * // Create one Workout_exercise
     * const Workout_exercise = await prisma.workout_exercise.create({
     *   data: {
     *     // ... data to create a Workout_exercise
     *   }
     * })
     * 
     */
    create<T extends workout_exerciseCreateArgs>(args: SelectSubset<T, workout_exerciseCreateArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Workout_exercises.
     * @param {workout_exerciseCreateManyArgs} args - Arguments to create many Workout_exercises.
     * @example
     * // Create many Workout_exercises
     * const workout_exercise = await prisma.workout_exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workout_exerciseCreateManyArgs>(args?: SelectSubset<T, workout_exerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workout_exercises and returns the data saved in the database.
     * @param {workout_exerciseCreateManyAndReturnArgs} args - Arguments to create many Workout_exercises.
     * @example
     * // Create many Workout_exercises
     * const workout_exercise = await prisma.workout_exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workout_exercises and only return the `id`
     * const workout_exerciseWithIdOnly = await prisma.workout_exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends workout_exerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, workout_exerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Workout_exercise.
     * @param {workout_exerciseDeleteArgs} args - Arguments to delete one Workout_exercise.
     * @example
     * // Delete one Workout_exercise
     * const Workout_exercise = await prisma.workout_exercise.delete({
     *   where: {
     *     // ... filter to delete one Workout_exercise
     *   }
     * })
     * 
     */
    delete<T extends workout_exerciseDeleteArgs>(args: SelectSubset<T, workout_exerciseDeleteArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Workout_exercise.
     * @param {workout_exerciseUpdateArgs} args - Arguments to update one Workout_exercise.
     * @example
     * // Update one Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workout_exerciseUpdateArgs>(args: SelectSubset<T, workout_exerciseUpdateArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Workout_exercises.
     * @param {workout_exerciseDeleteManyArgs} args - Arguments to filter Workout_exercises to delete.
     * @example
     * // Delete a few Workout_exercises
     * const { count } = await prisma.workout_exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workout_exerciseDeleteManyArgs>(args?: SelectSubset<T, workout_exerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workout_exercises
     * const workout_exercise = await prisma.workout_exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workout_exerciseUpdateManyArgs>(args: SelectSubset<T, workout_exerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_exercises and returns the data updated in the database.
     * @param {workout_exerciseUpdateManyAndReturnArgs} args - Arguments to update many Workout_exercises.
     * @example
     * // Update many Workout_exercises
     * const workout_exercise = await prisma.workout_exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workout_exercises and only return the `id`
     * const workout_exerciseWithIdOnly = await prisma.workout_exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends workout_exerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, workout_exerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Workout_exercise.
     * @param {workout_exerciseUpsertArgs} args - Arguments to update or create a Workout_exercise.
     * @example
     * // Update or create a Workout_exercise
     * const workout_exercise = await prisma.workout_exercise.upsert({
     *   create: {
     *     // ... data to create a Workout_exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout_exercise we want to update
     *   }
     * })
     */
    upsert<T extends workout_exerciseUpsertArgs>(args: SelectSubset<T, workout_exerciseUpsertArgs<ExtArgs>>): Prisma__workout_exerciseClient<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Workout_exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseCountArgs} args - Arguments to filter Workout_exercises to count.
     * @example
     * // Count the number of Workout_exercises
     * const count = await prisma.workout_exercise.count({
     *   where: {
     *     // ... the filter for the Workout_exercises we want to count
     *   }
     * })
    **/
    count<T extends workout_exerciseCountArgs>(
      args?: Subset<T, workout_exerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Workout_exerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout_exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Workout_exerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Workout_exerciseAggregateArgs>(args: Subset<T, Workout_exerciseAggregateArgs>): Prisma.PrismaPromise<GetWorkout_exerciseAggregateType<T>>

    /**
     * Group by Workout_exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_exerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workout_exerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workout_exerciseGroupByArgs['orderBy'] }
        : { orderBy?: workout_exerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workout_exerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkout_exerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workout_exercise model
   */
  readonly fields: workout_exerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workout_exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workout_exerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workout<T extends workoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workoutDefaultArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    exercise_progress<T extends workout_exercise$exercise_progressArgs<ExtArgs> = {}>(args?: Subset<T, workout_exercise$exercise_progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_progressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workout_exercise model
   */ 
  interface workout_exerciseFieldRefs {
    readonly id: FieldRef<"workout_exercise", 'Int'>
    readonly workout_id: FieldRef<"workout_exercise", 'Int'>
    readonly exercise_id: FieldRef<"workout_exercise", 'Int'>
    readonly reps: FieldRef<"workout_exercise", 'Int'>
    readonly set: FieldRef<"workout_exercise", 'Int'>
    readonly weight: FieldRef<"workout_exercise", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * workout_exercise findUnique
   */
  export type workout_exerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter, which workout_exercise to fetch.
     */
    where: workout_exerciseWhereUniqueInput
  }

  /**
   * workout_exercise findUniqueOrThrow
   */
  export type workout_exerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter, which workout_exercise to fetch.
     */
    where: workout_exerciseWhereUniqueInput
  }

  /**
   * workout_exercise findFirst
   */
  export type workout_exerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter, which workout_exercise to fetch.
     */
    where?: workout_exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_exercises to fetch.
     */
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_exercises.
     */
    cursor?: workout_exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_exercises.
     */
    distinct?: Workout_exerciseScalarFieldEnum | Workout_exerciseScalarFieldEnum[]
  }

  /**
   * workout_exercise findFirstOrThrow
   */
  export type workout_exerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter, which workout_exercise to fetch.
     */
    where?: workout_exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_exercises to fetch.
     */
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_exercises.
     */
    cursor?: workout_exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_exercises.
     */
    distinct?: Workout_exerciseScalarFieldEnum | Workout_exerciseScalarFieldEnum[]
  }

  /**
   * workout_exercise findMany
   */
  export type workout_exerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter, which workout_exercises to fetch.
     */
    where?: workout_exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_exercises to fetch.
     */
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workout_exercises.
     */
    cursor?: workout_exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_exercises.
     */
    skip?: number
    distinct?: Workout_exerciseScalarFieldEnum | Workout_exerciseScalarFieldEnum[]
  }

  /**
   * workout_exercise create
   */
  export type workout_exerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a workout_exercise.
     */
    data: XOR<workout_exerciseCreateInput, workout_exerciseUncheckedCreateInput>
  }

  /**
   * workout_exercise createMany
   */
  export type workout_exerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workout_exercises.
     */
    data: workout_exerciseCreateManyInput | workout_exerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workout_exercise createManyAndReturn
   */
  export type workout_exerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * The data used to create many workout_exercises.
     */
    data: workout_exerciseCreateManyInput | workout_exerciseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_exercise update
   */
  export type workout_exerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a workout_exercise.
     */
    data: XOR<workout_exerciseUpdateInput, workout_exerciseUncheckedUpdateInput>
    /**
     * Choose, which workout_exercise to update.
     */
    where: workout_exerciseWhereUniqueInput
  }

  /**
   * workout_exercise updateMany
   */
  export type workout_exerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workout_exercises.
     */
    data: XOR<workout_exerciseUpdateManyMutationInput, workout_exerciseUncheckedUpdateManyInput>
    /**
     * Filter which workout_exercises to update
     */
    where?: workout_exerciseWhereInput
    limit?: number
  }

  /**
   * workout_exercise updateManyAndReturn
   */
  export type workout_exerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * The data used to update workout_exercises.
     */
    data: XOR<workout_exerciseUpdateManyMutationInput, workout_exerciseUncheckedUpdateManyInput>
    /**
     * Filter which workout_exercises to update
     */
    where?: workout_exerciseWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_exercise upsert
   */
  export type workout_exerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the workout_exercise to update in case it exists.
     */
    where: workout_exerciseWhereUniqueInput
    /**
     * In case the workout_exercise found by the `where` argument doesn't exist, create a new workout_exercise with this data.
     */
    create: XOR<workout_exerciseCreateInput, workout_exerciseUncheckedCreateInput>
    /**
     * In case the workout_exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workout_exerciseUpdateInput, workout_exerciseUncheckedUpdateInput>
  }

  /**
   * workout_exercise delete
   */
  export type workout_exerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    /**
     * Filter which workout_exercise to delete.
     */
    where: workout_exerciseWhereUniqueInput
  }

  /**
   * workout_exercise deleteMany
   */
  export type workout_exerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_exercises to delete
     */
    where?: workout_exerciseWhereInput
    limit?: number
  }

  /**
   * workout_exercise.exercise_progress
   */
  export type workout_exercise$exercise_progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_progress
     */
    select?: exercise_progressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_progress
     */
    omit?: exercise_progressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_progressInclude<ExtArgs> | null
    where?: exercise_progressWhereInput
    orderBy?: exercise_progressOrderByWithRelationInput | exercise_progressOrderByWithRelationInput[]
    cursor?: exercise_progressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_progressScalarFieldEnum | Exercise_progressScalarFieldEnum[]
  }

  /**
   * workout_exercise without action
   */
  export type workout_exerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
  }


  /**
   * Model exercise
   */

  export type AggregateExercise = {
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  export type ExerciseAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    max_rep: number | null
  }

  export type ExerciseSumAggregateOutputType = {
    id: number | null
    duration: number | null
    max_rep: number | null
  }

  export type ExerciseMinAggregateOutputType = {
    id: number | null
    exercise_cd: string | null
    name: string | null
    intensity: string | null
    duration: number | null
    types: string | null
    max_rep: number | null
    image: string | null
    description: string | null
  }

  export type ExerciseMaxAggregateOutputType = {
    id: number | null
    exercise_cd: string | null
    name: string | null
    intensity: string | null
    duration: number | null
    types: string | null
    max_rep: number | null
    image: string | null
    description: string | null
  }

  export type ExerciseCountAggregateOutputType = {
    id: number
    exercise_cd: number
    name: number
    intensity: number
    duration: number
    types: number
    max_rep: number
    image: number
    description: number
    _all: number
  }


  export type ExerciseAvgAggregateInputType = {
    id?: true
    duration?: true
    max_rep?: true
  }

  export type ExerciseSumAggregateInputType = {
    id?: true
    duration?: true
    max_rep?: true
  }

  export type ExerciseMinAggregateInputType = {
    id?: true
    exercise_cd?: true
    name?: true
    intensity?: true
    duration?: true
    types?: true
    max_rep?: true
    image?: true
    description?: true
  }

  export type ExerciseMaxAggregateInputType = {
    id?: true
    exercise_cd?: true
    name?: true
    intensity?: true
    duration?: true
    types?: true
    max_rep?: true
    image?: true
    description?: true
  }

  export type ExerciseCountAggregateInputType = {
    id?: true
    exercise_cd?: true
    name?: true
    intensity?: true
    duration?: true
    types?: true
    max_rep?: true
    image?: true
    description?: true
    _all?: true
  }

  export type ExerciseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise to aggregate.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercises
    **/
    _count?: true | ExerciseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExerciseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExerciseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseMaxAggregateInputType
  }

  export type GetExerciseAggregateType<T extends ExerciseAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise[P]>
      : GetScalarType<T[P], AggregateExercise[P]>
  }




  export type exerciseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exerciseWhereInput
    orderBy?: exerciseOrderByWithAggregationInput | exerciseOrderByWithAggregationInput[]
    by: ExerciseScalarFieldEnum[] | ExerciseScalarFieldEnum
    having?: exerciseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseCountAggregateInputType | true
    _avg?: ExerciseAvgAggregateInputType
    _sum?: ExerciseSumAggregateInputType
    _min?: ExerciseMinAggregateInputType
    _max?: ExerciseMaxAggregateInputType
  }

  export type ExerciseGroupByOutputType = {
    id: number
    exercise_cd: string
    name: string
    intensity: string
    duration: number | null
    types: string | null
    max_rep: number | null
    image: string | null
    description: string | null
    _count: ExerciseCountAggregateOutputType | null
    _avg: ExerciseAvgAggregateOutputType | null
    _sum: ExerciseSumAggregateOutputType | null
    _min: ExerciseMinAggregateOutputType | null
    _max: ExerciseMaxAggregateOutputType | null
  }

  type GetExerciseGroupByPayload<T extends exerciseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseGroupByOutputType[P]>
        }
      >
    >


  export type exerciseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_cd?: boolean
    name?: boolean
    intensity?: boolean
    duration?: boolean
    types?: boolean
    max_rep?: boolean
    image?: boolean
    description?: boolean
    muscles?: boolean | exercise$musclesArgs<ExtArgs>
    equipments?: boolean | exercise$equipmentsArgs<ExtArgs>
    workouts?: boolean | exercise$workoutsArgs<ExtArgs>
    group?: boolean | exercise$groupArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise"]>

  export type exerciseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_cd?: boolean
    name?: boolean
    intensity?: boolean
    duration?: boolean
    types?: boolean
    max_rep?: boolean
    image?: boolean
    description?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type exerciseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_cd?: boolean
    name?: boolean
    intensity?: boolean
    duration?: boolean
    types?: boolean
    max_rep?: boolean
    image?: boolean
    description?: boolean
  }, ExtArgs["result"]["exercise"]>

  export type exerciseSelectScalar = {
    id?: boolean
    exercise_cd?: boolean
    name?: boolean
    intensity?: boolean
    duration?: boolean
    types?: boolean
    max_rep?: boolean
    image?: boolean
    description?: boolean
  }

  export type exerciseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "exercise_cd" | "name" | "intensity" | "duration" | "types" | "max_rep" | "image" | "description", ExtArgs["result"]["exercise"]>
  export type exerciseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    muscles?: boolean | exercise$musclesArgs<ExtArgs>
    equipments?: boolean | exercise$equipmentsArgs<ExtArgs>
    workouts?: boolean | exercise$workoutsArgs<ExtArgs>
    group?: boolean | exercise$groupArgs<ExtArgs>
    _count?: boolean | ExerciseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type exerciseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type exerciseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $exercisePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exercise"
    objects: {
      muscles: Prisma.$exercise_musclePayload<ExtArgs>[]
      equipments: Prisma.$exercise_equipmentPayload<ExtArgs>[]
      workouts: Prisma.$workout_exercisePayload<ExtArgs>[]
      group: Prisma.$excercise_groupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      exercise_cd: string
      name: string
      intensity: string
      duration: number | null
      types: string | null
      max_rep: number | null
      image: string | null
      description: string | null
    }, ExtArgs["result"]["exercise"]>
    composites: {}
  }

  type exerciseGetPayload<S extends boolean | null | undefined | exerciseDefaultArgs> = $Result.GetResult<Prisma.$exercisePayload, S>

  type exerciseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exerciseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExerciseCountAggregateInputType | true
    }

  export interface exerciseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exercise'], meta: { name: 'exercise' } }
    /**
     * Find zero or one Exercise that matches the filter.
     * @param {exerciseFindUniqueArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exerciseFindUniqueArgs>(args: SelectSubset<T, exerciseFindUniqueArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Exercise that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exerciseFindUniqueOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exerciseFindUniqueOrThrowArgs>(args: SelectSubset<T, exerciseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindFirstArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exerciseFindFirstArgs>(args?: SelectSubset<T, exerciseFindFirstArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindFirstOrThrowArgs} args - Arguments to find a Exercise
     * @example
     * // Get one Exercise
     * const exercise = await prisma.exercise.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exerciseFindFirstOrThrowArgs>(args?: SelectSubset<T, exerciseFindFirstOrThrowArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercise.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercise.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseWithIdOnly = await prisma.exercise.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends exerciseFindManyArgs>(args?: SelectSubset<T, exerciseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Exercise.
     * @param {exerciseCreateArgs} args - Arguments to create a Exercise.
     * @example
     * // Create one Exercise
     * const Exercise = await prisma.exercise.create({
     *   data: {
     *     // ... data to create a Exercise
     *   }
     * })
     * 
     */
    create<T extends exerciseCreateArgs>(args: SelectSubset<T, exerciseCreateArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Exercises.
     * @param {exerciseCreateManyArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exerciseCreateManyArgs>(args?: SelectSubset<T, exerciseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercises and returns the data saved in the database.
     * @param {exerciseCreateManyAndReturnArgs} args - Arguments to create many Exercises.
     * @example
     * // Create many Exercises
     * const exercise = await prisma.exercise.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends exerciseCreateManyAndReturnArgs>(args?: SelectSubset<T, exerciseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Exercise.
     * @param {exerciseDeleteArgs} args - Arguments to delete one Exercise.
     * @example
     * // Delete one Exercise
     * const Exercise = await prisma.exercise.delete({
     *   where: {
     *     // ... filter to delete one Exercise
     *   }
     * })
     * 
     */
    delete<T extends exerciseDeleteArgs>(args: SelectSubset<T, exerciseDeleteArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Exercise.
     * @param {exerciseUpdateArgs} args - Arguments to update one Exercise.
     * @example
     * // Update one Exercise
     * const exercise = await prisma.exercise.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exerciseUpdateArgs>(args: SelectSubset<T, exerciseUpdateArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Exercises.
     * @param {exerciseDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercise.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exerciseDeleteManyArgs>(args?: SelectSubset<T, exerciseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exerciseUpdateManyArgs>(args: SelectSubset<T, exerciseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises and returns the data updated in the database.
     * @param {exerciseUpdateManyAndReturnArgs} args - Arguments to update many Exercises.
     * @example
     * // Update many Exercises
     * const exercise = await prisma.exercise.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercises and only return the `id`
     * const exerciseWithIdOnly = await prisma.exercise.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends exerciseUpdateManyAndReturnArgs>(args: SelectSubset<T, exerciseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Exercise.
     * @param {exerciseUpsertArgs} args - Arguments to update or create a Exercise.
     * @example
     * // Update or create a Exercise
     * const exercise = await prisma.exercise.upsert({
     *   create: {
     *     // ... data to create a Exercise
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise we want to update
     *   }
     * })
     */
    upsert<T extends exerciseUpsertArgs>(args: SelectSubset<T, exerciseUpsertArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercise.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends exerciseCountArgs>(
      args?: Subset<T, exerciseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseAggregateArgs>(args: Subset<T, ExerciseAggregateArgs>): Prisma.PrismaPromise<GetExerciseAggregateType<T>>

    /**
     * Group by Exercise.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exerciseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exerciseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exerciseGroupByArgs['orderBy'] }
        : { orderBy?: exerciseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exerciseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exercise model
   */
  readonly fields: exerciseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exercise.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exerciseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    muscles<T extends exercise$musclesArgs<ExtArgs> = {}>(args?: Subset<T, exercise$musclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    equipments<T extends exercise$equipmentsArgs<ExtArgs> = {}>(args?: Subset<T, exercise$equipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    workouts<T extends exercise$workoutsArgs<ExtArgs> = {}>(args?: Subset<T, exercise$workoutsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_exercisePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    group<T extends exercise$groupArgs<ExtArgs> = {}>(args?: Subset<T, exercise$groupArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exercise model
   */ 
  interface exerciseFieldRefs {
    readonly id: FieldRef<"exercise", 'Int'>
    readonly exercise_cd: FieldRef<"exercise", 'String'>
    readonly name: FieldRef<"exercise", 'String'>
    readonly intensity: FieldRef<"exercise", 'String'>
    readonly duration: FieldRef<"exercise", 'Int'>
    readonly types: FieldRef<"exercise", 'String'>
    readonly max_rep: FieldRef<"exercise", 'Int'>
    readonly image: FieldRef<"exercise", 'String'>
    readonly description: FieldRef<"exercise", 'String'>
  }
    

  // Custom InputTypes
  /**
   * exercise findUnique
   */
  export type exerciseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise findUniqueOrThrow
   */
  export type exerciseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise findFirst
   */
  export type exerciseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise findFirstOrThrow
   */
  export type exerciseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercise to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercises.
     */
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise findMany
   */
  export type exerciseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter, which exercises to fetch.
     */
    where?: exerciseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercises to fetch.
     */
    orderBy?: exerciseOrderByWithRelationInput | exerciseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercises.
     */
    cursor?: exerciseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercises.
     */
    skip?: number
    distinct?: ExerciseScalarFieldEnum | ExerciseScalarFieldEnum[]
  }

  /**
   * exercise create
   */
  export type exerciseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The data needed to create a exercise.
     */
    data: XOR<exerciseCreateInput, exerciseUncheckedCreateInput>
  }

  /**
   * exercise createMany
   */
  export type exerciseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exercises.
     */
    data: exerciseCreateManyInput | exerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise createManyAndReturn
   */
  export type exerciseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * The data used to create many exercises.
     */
    data: exerciseCreateManyInput | exerciseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise update
   */
  export type exerciseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The data needed to update a exercise.
     */
    data: XOR<exerciseUpdateInput, exerciseUncheckedUpdateInput>
    /**
     * Choose, which exercise to update.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise updateMany
   */
  export type exerciseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exercises.
     */
    data: XOR<exerciseUpdateManyMutationInput, exerciseUncheckedUpdateManyInput>
    /**
     * Filter which exercises to update
     */
    where?: exerciseWhereInput
    limit?: number
  }

  /**
   * exercise updateManyAndReturn
   */
  export type exerciseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * The data used to update exercises.
     */
    data: XOR<exerciseUpdateManyMutationInput, exerciseUncheckedUpdateManyInput>
    /**
     * Filter which exercises to update
     */
    where?: exerciseWhereInput
    limit?: number
  }

  /**
   * exercise upsert
   */
  export type exerciseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * The filter to search for the exercise to update in case it exists.
     */
    where: exerciseWhereUniqueInput
    /**
     * In case the exercise found by the `where` argument doesn't exist, create a new exercise with this data.
     */
    create: XOR<exerciseCreateInput, exerciseUncheckedCreateInput>
    /**
     * In case the exercise was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exerciseUpdateInput, exerciseUncheckedUpdateInput>
  }

  /**
   * exercise delete
   */
  export type exerciseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
    /**
     * Filter which exercise to delete.
     */
    where: exerciseWhereUniqueInput
  }

  /**
   * exercise deleteMany
   */
  export type exerciseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercises to delete
     */
    where?: exerciseWhereInput
    limit?: number
  }

  /**
   * exercise.muscles
   */
  export type exercise$musclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    where?: exercise_muscleWhereInput
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    cursor?: exercise_muscleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_muscleScalarFieldEnum | Exercise_muscleScalarFieldEnum[]
  }

  /**
   * exercise.equipments
   */
  export type exercise$equipmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    where?: exercise_equipmentWhereInput
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    cursor?: exercise_equipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_equipmentScalarFieldEnum | Exercise_equipmentScalarFieldEnum[]
  }

  /**
   * exercise.workouts
   */
  export type exercise$workoutsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_exercise
     */
    select?: workout_exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_exercise
     */
    omit?: workout_exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_exerciseInclude<ExtArgs> | null
    where?: workout_exerciseWhereInput
    orderBy?: workout_exerciseOrderByWithRelationInput | workout_exerciseOrderByWithRelationInput[]
    cursor?: workout_exerciseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Workout_exerciseScalarFieldEnum | Workout_exerciseScalarFieldEnum[]
  }

  /**
   * exercise.group
   */
  export type exercise$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    where?: excercise_groupWhereInput
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    cursor?: excercise_groupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Excercise_groupScalarFieldEnum | Excercise_groupScalarFieldEnum[]
  }

  /**
   * exercise without action
   */
  export type exerciseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise
     */
    select?: exerciseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise
     */
    omit?: exerciseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exerciseInclude<ExtArgs> | null
  }


  /**
   * Model group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which group to aggregate.
     */
    where?: groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     */
    orderBy?: groupOrderByWithRelationInput | groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type groupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupWhereInput
    orderBy?: groupOrderByWithAggregationInput | groupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: groupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    name: string
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends groupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type groupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    exercises?: boolean | group$exercisesArgs<ExtArgs>
    user?: boolean | group$userArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type groupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["group"]>

  export type groupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["group"]>

  export type groupSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type groupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["group"]>
  export type groupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | group$exercisesArgs<ExtArgs>
    user?: boolean | group$userArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type groupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type groupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $groupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "group"
    objects: {
      exercises: Prisma.$excercise_groupPayload<ExtArgs>[]
      user: Prisma.$user_group_levelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type groupGetPayload<S extends boolean | null | undefined | groupDefaultArgs> = $Result.GetResult<Prisma.$groupPayload, S>

  type groupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<groupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface groupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['group'], meta: { name: 'group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {groupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends groupFindUniqueArgs>(args: SelectSubset<T, groupFindUniqueArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {groupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends groupFindUniqueOrThrowArgs>(args: SelectSubset<T, groupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends groupFindFirstArgs>(args?: SelectSubset<T, groupFindFirstArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends groupFindFirstOrThrowArgs>(args?: SelectSubset<T, groupFindFirstOrThrowArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends groupFindManyArgs>(args?: SelectSubset<T, groupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Group.
     * @param {groupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
     */
    create<T extends groupCreateArgs>(args: SelectSubset<T, groupCreateArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Groups.
     * @param {groupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends groupCreateManyArgs>(args?: SelectSubset<T, groupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {groupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends groupCreateManyAndReturnArgs>(args?: SelectSubset<T, groupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Group.
     * @param {groupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
     */
    delete<T extends groupDeleteArgs>(args: SelectSubset<T, groupDeleteArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Group.
     * @param {groupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends groupUpdateArgs>(args: SelectSubset<T, groupUpdateArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Groups.
     * @param {groupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends groupDeleteManyArgs>(args?: SelectSubset<T, groupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends groupUpdateManyArgs>(args: SelectSubset<T, groupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups and returns the data updated in the database.
     * @param {groupUpdateManyAndReturnArgs} args - Arguments to update many Groups.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends groupUpdateManyAndReturnArgs>(args: SelectSubset<T, groupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Group.
     * @param {groupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
     */
    upsert<T extends groupUpsertArgs>(args: SelectSubset<T, groupUpsertArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends groupCountArgs>(
      args?: Subset<T, groupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends groupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: groupGroupByArgs['orderBy'] }
        : { orderBy?: groupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, groupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the group model
   */
  readonly fields: groupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__groupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends group$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, group$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user<T extends group$userArgs<ExtArgs> = {}>(args?: Subset<T, group$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the group model
   */ 
  interface groupFieldRefs {
    readonly id: FieldRef<"group", 'Int'>
    readonly name: FieldRef<"group", 'String'>
  }
    

  // Custom InputTypes
  /**
   * group findUnique
   */
  export type groupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter, which group to fetch.
     */
    where: groupWhereUniqueInput
  }

  /**
   * group findUniqueOrThrow
   */
  export type groupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter, which group to fetch.
     */
    where: groupWhereUniqueInput
  }

  /**
   * group findFirst
   */
  export type groupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter, which group to fetch.
     */
    where?: groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     */
    orderBy?: groupOrderByWithRelationInput | groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups.
     */
    cursor?: groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * group findFirstOrThrow
   */
  export type groupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter, which group to fetch.
     */
    where?: groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     */
    orderBy?: groupOrderByWithRelationInput | groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groups.
     */
    cursor?: groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * group findMany
   */
  export type groupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter, which groups to fetch.
     */
    where?: groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groups to fetch.
     */
    orderBy?: groupOrderByWithRelationInput | groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groups.
     */
    cursor?: groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * group create
   */
  export type groupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * The data needed to create a group.
     */
    data: XOR<groupCreateInput, groupUncheckedCreateInput>
  }

  /**
   * group createMany
   */
  export type groupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many groups.
     */
    data: groupCreateManyInput | groupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * group createManyAndReturn
   */
  export type groupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * The data used to create many groups.
     */
    data: groupCreateManyInput | groupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * group update
   */
  export type groupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * The data needed to update a group.
     */
    data: XOR<groupUpdateInput, groupUncheckedUpdateInput>
    /**
     * Choose, which group to update.
     */
    where: groupWhereUniqueInput
  }

  /**
   * group updateMany
   */
  export type groupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update groups.
     */
    data: XOR<groupUpdateManyMutationInput, groupUncheckedUpdateManyInput>
    /**
     * Filter which groups to update
     */
    where?: groupWhereInput
    limit?: number
  }

  /**
   * group updateManyAndReturn
   */
  export type groupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * The data used to update groups.
     */
    data: XOR<groupUpdateManyMutationInput, groupUncheckedUpdateManyInput>
    /**
     * Filter which groups to update
     */
    where?: groupWhereInput
    limit?: number
  }

  /**
   * group upsert
   */
  export type groupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * The filter to search for the group to update in case it exists.
     */
    where: groupWhereUniqueInput
    /**
     * In case the group found by the `where` argument doesn't exist, create a new group with this data.
     */
    create: XOR<groupCreateInput, groupUncheckedCreateInput>
    /**
     * In case the group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<groupUpdateInput, groupUncheckedUpdateInput>
  }

  /**
   * group delete
   */
  export type groupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
    /**
     * Filter which group to delete.
     */
    where: groupWhereUniqueInput
  }

  /**
   * group deleteMany
   */
  export type groupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which groups to delete
     */
    where?: groupWhereInput
    limit?: number
  }

  /**
   * group.exercises
   */
  export type group$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    where?: excercise_groupWhereInput
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    cursor?: excercise_groupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Excercise_groupScalarFieldEnum | Excercise_groupScalarFieldEnum[]
  }

  /**
   * group.user
   */
  export type group$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    where?: user_group_levelWhereInput
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    cursor?: user_group_levelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_group_levelScalarFieldEnum | User_group_levelScalarFieldEnum[]
  }

  /**
   * group without action
   */
  export type groupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the group
     */
    select?: groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the group
     */
    omit?: groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupInclude<ExtArgs> | null
  }


  /**
   * Model user_group_level
   */

  export type AggregateUser_group_level = {
    _count: User_group_levelCountAggregateOutputType | null
    _avg: User_group_levelAvgAggregateOutputType | null
    _sum: User_group_levelSumAggregateOutputType | null
    _min: User_group_levelMinAggregateOutputType | null
    _max: User_group_levelMaxAggregateOutputType | null
  }

  export type User_group_levelAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    group_id: number | null
    level: number | null
  }

  export type User_group_levelSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    group_id: number | null
    level: number | null
  }

  export type User_group_levelMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    group_id: number | null
    level: number | null
  }

  export type User_group_levelMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    group_id: number | null
    level: number | null
  }

  export type User_group_levelCountAggregateOutputType = {
    id: number
    user_id: number
    group_id: number
    level: number
    _all: number
  }


  export type User_group_levelAvgAggregateInputType = {
    id?: true
    user_id?: true
    group_id?: true
    level?: true
  }

  export type User_group_levelSumAggregateInputType = {
    id?: true
    user_id?: true
    group_id?: true
    level?: true
  }

  export type User_group_levelMinAggregateInputType = {
    id?: true
    user_id?: true
    group_id?: true
    level?: true
  }

  export type User_group_levelMaxAggregateInputType = {
    id?: true
    user_id?: true
    group_id?: true
    level?: true
  }

  export type User_group_levelCountAggregateInputType = {
    id?: true
    user_id?: true
    group_id?: true
    level?: true
    _all?: true
  }

  export type User_group_levelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_group_level to aggregate.
     */
    where?: user_group_levelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_levels to fetch.
     */
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_group_levelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_group_levels
    **/
    _count?: true | User_group_levelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_group_levelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_group_levelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_group_levelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_group_levelMaxAggregateInputType
  }

  export type GetUser_group_levelAggregateType<T extends User_group_levelAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_group_level]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_group_level[P]>
      : GetScalarType<T[P], AggregateUser_group_level[P]>
  }




  export type user_group_levelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_group_levelWhereInput
    orderBy?: user_group_levelOrderByWithAggregationInput | user_group_levelOrderByWithAggregationInput[]
    by: User_group_levelScalarFieldEnum[] | User_group_levelScalarFieldEnum
    having?: user_group_levelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_group_levelCountAggregateInputType | true
    _avg?: User_group_levelAvgAggregateInputType
    _sum?: User_group_levelSumAggregateInputType
    _min?: User_group_levelMinAggregateInputType
    _max?: User_group_levelMaxAggregateInputType
  }

  export type User_group_levelGroupByOutputType = {
    id: number
    user_id: number
    group_id: number
    level: number | null
    _count: User_group_levelCountAggregateOutputType | null
    _avg: User_group_levelAvgAggregateOutputType | null
    _sum: User_group_levelSumAggregateOutputType | null
    _min: User_group_levelMinAggregateOutputType | null
    _max: User_group_levelMaxAggregateOutputType | null
  }

  type GetUser_group_levelGroupByPayload<T extends user_group_levelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_group_levelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_group_levelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_group_levelGroupByOutputType[P]>
            : GetScalarType<T[P], User_group_levelGroupByOutputType[P]>
        }
      >
    >


  export type user_group_levelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    group_id?: boolean
    level?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_group_level"]>

  export type user_group_levelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    group_id?: boolean
    level?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_group_level"]>

  export type user_group_levelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    group_id?: boolean
    level?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_group_level"]>

  export type user_group_levelSelectScalar = {
    id?: boolean
    user_id?: boolean
    group_id?: boolean
    level?: boolean
  }

  export type user_group_levelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "group_id" | "level", ExtArgs["result"]["user_group_level"]>
  export type user_group_levelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }
  export type user_group_levelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }
  export type user_group_levelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }

  export type $user_group_levelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_group_level"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      group: Prisma.$groupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      group_id: number
      level: number | null
    }, ExtArgs["result"]["user_group_level"]>
    composites: {}
  }

  type user_group_levelGetPayload<S extends boolean | null | undefined | user_group_levelDefaultArgs> = $Result.GetResult<Prisma.$user_group_levelPayload, S>

  type user_group_levelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_group_levelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_group_levelCountAggregateInputType | true
    }

  export interface user_group_levelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_group_level'], meta: { name: 'user_group_level' } }
    /**
     * Find zero or one User_group_level that matches the filter.
     * @param {user_group_levelFindUniqueArgs} args - Arguments to find a User_group_level
     * @example
     * // Get one User_group_level
     * const user_group_level = await prisma.user_group_level.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_group_levelFindUniqueArgs>(args: SelectSubset<T, user_group_levelFindUniqueArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User_group_level that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_group_levelFindUniqueOrThrowArgs} args - Arguments to find a User_group_level
     * @example
     * // Get one User_group_level
     * const user_group_level = await prisma.user_group_level.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_group_levelFindUniqueOrThrowArgs>(args: SelectSubset<T, user_group_levelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User_group_level that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelFindFirstArgs} args - Arguments to find a User_group_level
     * @example
     * // Get one User_group_level
     * const user_group_level = await prisma.user_group_level.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_group_levelFindFirstArgs>(args?: SelectSubset<T, user_group_levelFindFirstArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User_group_level that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelFindFirstOrThrowArgs} args - Arguments to find a User_group_level
     * @example
     * // Get one User_group_level
     * const user_group_level = await prisma.user_group_level.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_group_levelFindFirstOrThrowArgs>(args?: SelectSubset<T, user_group_levelFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more User_group_levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_group_levels
     * const user_group_levels = await prisma.user_group_level.findMany()
     * 
     * // Get first 10 User_group_levels
     * const user_group_levels = await prisma.user_group_level.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_group_levelWithIdOnly = await prisma.user_group_level.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_group_levelFindManyArgs>(args?: SelectSubset<T, user_group_levelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User_group_level.
     * @param {user_group_levelCreateArgs} args - Arguments to create a User_group_level.
     * @example
     * // Create one User_group_level
     * const User_group_level = await prisma.user_group_level.create({
     *   data: {
     *     // ... data to create a User_group_level
     *   }
     * })
     * 
     */
    create<T extends user_group_levelCreateArgs>(args: SelectSubset<T, user_group_levelCreateArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many User_group_levels.
     * @param {user_group_levelCreateManyArgs} args - Arguments to create many User_group_levels.
     * @example
     * // Create many User_group_levels
     * const user_group_level = await prisma.user_group_level.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_group_levelCreateManyArgs>(args?: SelectSubset<T, user_group_levelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_group_levels and returns the data saved in the database.
     * @param {user_group_levelCreateManyAndReturnArgs} args - Arguments to create many User_group_levels.
     * @example
     * // Create many User_group_levels
     * const user_group_level = await prisma.user_group_level.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_group_levels and only return the `id`
     * const user_group_levelWithIdOnly = await prisma.user_group_level.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_group_levelCreateManyAndReturnArgs>(args?: SelectSubset<T, user_group_levelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User_group_level.
     * @param {user_group_levelDeleteArgs} args - Arguments to delete one User_group_level.
     * @example
     * // Delete one User_group_level
     * const User_group_level = await prisma.user_group_level.delete({
     *   where: {
     *     // ... filter to delete one User_group_level
     *   }
     * })
     * 
     */
    delete<T extends user_group_levelDeleteArgs>(args: SelectSubset<T, user_group_levelDeleteArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User_group_level.
     * @param {user_group_levelUpdateArgs} args - Arguments to update one User_group_level.
     * @example
     * // Update one User_group_level
     * const user_group_level = await prisma.user_group_level.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_group_levelUpdateArgs>(args: SelectSubset<T, user_group_levelUpdateArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more User_group_levels.
     * @param {user_group_levelDeleteManyArgs} args - Arguments to filter User_group_levels to delete.
     * @example
     * // Delete a few User_group_levels
     * const { count } = await prisma.user_group_level.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_group_levelDeleteManyArgs>(args?: SelectSubset<T, user_group_levelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_group_levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_group_levels
     * const user_group_level = await prisma.user_group_level.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_group_levelUpdateManyArgs>(args: SelectSubset<T, user_group_levelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_group_levels and returns the data updated in the database.
     * @param {user_group_levelUpdateManyAndReturnArgs} args - Arguments to update many User_group_levels.
     * @example
     * // Update many User_group_levels
     * const user_group_level = await prisma.user_group_level.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_group_levels and only return the `id`
     * const user_group_levelWithIdOnly = await prisma.user_group_level.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_group_levelUpdateManyAndReturnArgs>(args: SelectSubset<T, user_group_levelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User_group_level.
     * @param {user_group_levelUpsertArgs} args - Arguments to update or create a User_group_level.
     * @example
     * // Update or create a User_group_level
     * const user_group_level = await prisma.user_group_level.upsert({
     *   create: {
     *     // ... data to create a User_group_level
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_group_level we want to update
     *   }
     * })
     */
    upsert<T extends user_group_levelUpsertArgs>(args: SelectSubset<T, user_group_levelUpsertArgs<ExtArgs>>): Prisma__user_group_levelClient<$Result.GetResult<Prisma.$user_group_levelPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of User_group_levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelCountArgs} args - Arguments to filter User_group_levels to count.
     * @example
     * // Count the number of User_group_levels
     * const count = await prisma.user_group_level.count({
     *   where: {
     *     // ... the filter for the User_group_levels we want to count
     *   }
     * })
    **/
    count<T extends user_group_levelCountArgs>(
      args?: Subset<T, user_group_levelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_group_levelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_group_level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_group_levelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_group_levelAggregateArgs>(args: Subset<T, User_group_levelAggregateArgs>): Prisma.PrismaPromise<GetUser_group_levelAggregateType<T>>

    /**
     * Group by User_group_level.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_levelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_group_levelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_group_levelGroupByArgs['orderBy'] }
        : { orderBy?: user_group_levelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_group_levelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_group_levelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_group_level model
   */
  readonly fields: user_group_levelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_group_level.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_group_levelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    group<T extends groupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, groupDefaultArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_group_level model
   */ 
  interface user_group_levelFieldRefs {
    readonly id: FieldRef<"user_group_level", 'Int'>
    readonly user_id: FieldRef<"user_group_level", 'Int'>
    readonly group_id: FieldRef<"user_group_level", 'Int'>
    readonly level: FieldRef<"user_group_level", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_group_level findUnique
   */
  export type user_group_levelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter, which user_group_level to fetch.
     */
    where: user_group_levelWhereUniqueInput
  }

  /**
   * user_group_level findUniqueOrThrow
   */
  export type user_group_levelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter, which user_group_level to fetch.
     */
    where: user_group_levelWhereUniqueInput
  }

  /**
   * user_group_level findFirst
   */
  export type user_group_levelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter, which user_group_level to fetch.
     */
    where?: user_group_levelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_levels to fetch.
     */
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_group_levels.
     */
    cursor?: user_group_levelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_group_levels.
     */
    distinct?: User_group_levelScalarFieldEnum | User_group_levelScalarFieldEnum[]
  }

  /**
   * user_group_level findFirstOrThrow
   */
  export type user_group_levelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter, which user_group_level to fetch.
     */
    where?: user_group_levelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_levels to fetch.
     */
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_group_levels.
     */
    cursor?: user_group_levelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_group_levels.
     */
    distinct?: User_group_levelScalarFieldEnum | User_group_levelScalarFieldEnum[]
  }

  /**
   * user_group_level findMany
   */
  export type user_group_levelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter, which user_group_levels to fetch.
     */
    where?: user_group_levelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_levels to fetch.
     */
    orderBy?: user_group_levelOrderByWithRelationInput | user_group_levelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_group_levels.
     */
    cursor?: user_group_levelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_levels.
     */
    skip?: number
    distinct?: User_group_levelScalarFieldEnum | User_group_levelScalarFieldEnum[]
  }

  /**
   * user_group_level create
   */
  export type user_group_levelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * The data needed to create a user_group_level.
     */
    data: XOR<user_group_levelCreateInput, user_group_levelUncheckedCreateInput>
  }

  /**
   * user_group_level createMany
   */
  export type user_group_levelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_group_levels.
     */
    data: user_group_levelCreateManyInput | user_group_levelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_group_level createManyAndReturn
   */
  export type user_group_levelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * The data used to create many user_group_levels.
     */
    data: user_group_levelCreateManyInput | user_group_levelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_group_level update
   */
  export type user_group_levelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * The data needed to update a user_group_level.
     */
    data: XOR<user_group_levelUpdateInput, user_group_levelUncheckedUpdateInput>
    /**
     * Choose, which user_group_level to update.
     */
    where: user_group_levelWhereUniqueInput
  }

  /**
   * user_group_level updateMany
   */
  export type user_group_levelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_group_levels.
     */
    data: XOR<user_group_levelUpdateManyMutationInput, user_group_levelUncheckedUpdateManyInput>
    /**
     * Filter which user_group_levels to update
     */
    where?: user_group_levelWhereInput
    limit?: number
  }

  /**
   * user_group_level updateManyAndReturn
   */
  export type user_group_levelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * The data used to update user_group_levels.
     */
    data: XOR<user_group_levelUpdateManyMutationInput, user_group_levelUncheckedUpdateManyInput>
    /**
     * Filter which user_group_levels to update
     */
    where?: user_group_levelWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_group_level upsert
   */
  export type user_group_levelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * The filter to search for the user_group_level to update in case it exists.
     */
    where: user_group_levelWhereUniqueInput
    /**
     * In case the user_group_level found by the `where` argument doesn't exist, create a new user_group_level with this data.
     */
    create: XOR<user_group_levelCreateInput, user_group_levelUncheckedCreateInput>
    /**
     * In case the user_group_level was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_group_levelUpdateInput, user_group_levelUncheckedUpdateInput>
  }

  /**
   * user_group_level delete
   */
  export type user_group_levelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
    /**
     * Filter which user_group_level to delete.
     */
    where: user_group_levelWhereUniqueInput
  }

  /**
   * user_group_level deleteMany
   */
  export type user_group_levelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_group_levels to delete
     */
    where?: user_group_levelWhereInput
    limit?: number
  }

  /**
   * user_group_level without action
   */
  export type user_group_levelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_group_level
     */
    select?: user_group_levelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_group_level
     */
    omit?: user_group_levelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_group_levelInclude<ExtArgs> | null
  }


  /**
   * Model excercise_group
   */

  export type AggregateExcercise_group = {
    _count: Excercise_groupCountAggregateOutputType | null
    _avg: Excercise_groupAvgAggregateOutputType | null
    _sum: Excercise_groupSumAggregateOutputType | null
    _min: Excercise_groupMinAggregateOutputType | null
    _max: Excercise_groupMaxAggregateOutputType | null
  }

  export type Excercise_groupAvgAggregateOutputType = {
    id: number | null
    excercise_id: number | null
    group_id: number | null
    difficulty: number | null
  }

  export type Excercise_groupSumAggregateOutputType = {
    id: number | null
    excercise_id: number | null
    group_id: number | null
    difficulty: number | null
  }

  export type Excercise_groupMinAggregateOutputType = {
    id: number | null
    excercise_id: number | null
    group_id: number | null
    difficulty: number | null
  }

  export type Excercise_groupMaxAggregateOutputType = {
    id: number | null
    excercise_id: number | null
    group_id: number | null
    difficulty: number | null
  }

  export type Excercise_groupCountAggregateOutputType = {
    id: number
    excercise_id: number
    group_id: number
    difficulty: number
    _all: number
  }


  export type Excercise_groupAvgAggregateInputType = {
    id?: true
    excercise_id?: true
    group_id?: true
    difficulty?: true
  }

  export type Excercise_groupSumAggregateInputType = {
    id?: true
    excercise_id?: true
    group_id?: true
    difficulty?: true
  }

  export type Excercise_groupMinAggregateInputType = {
    id?: true
    excercise_id?: true
    group_id?: true
    difficulty?: true
  }

  export type Excercise_groupMaxAggregateInputType = {
    id?: true
    excercise_id?: true
    group_id?: true
    difficulty?: true
  }

  export type Excercise_groupCountAggregateInputType = {
    id?: true
    excercise_id?: true
    group_id?: true
    difficulty?: true
    _all?: true
  }

  export type Excercise_groupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which excercise_group to aggregate.
     */
    where?: excercise_groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of excercise_groups to fetch.
     */
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: excercise_groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` excercise_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` excercise_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned excercise_groups
    **/
    _count?: true | Excercise_groupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Excercise_groupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Excercise_groupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Excercise_groupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Excercise_groupMaxAggregateInputType
  }

  export type GetExcercise_groupAggregateType<T extends Excercise_groupAggregateArgs> = {
        [P in keyof T & keyof AggregateExcercise_group]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExcercise_group[P]>
      : GetScalarType<T[P], AggregateExcercise_group[P]>
  }




  export type excercise_groupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: excercise_groupWhereInput
    orderBy?: excercise_groupOrderByWithAggregationInput | excercise_groupOrderByWithAggregationInput[]
    by: Excercise_groupScalarFieldEnum[] | Excercise_groupScalarFieldEnum
    having?: excercise_groupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Excercise_groupCountAggregateInputType | true
    _avg?: Excercise_groupAvgAggregateInputType
    _sum?: Excercise_groupSumAggregateInputType
    _min?: Excercise_groupMinAggregateInputType
    _max?: Excercise_groupMaxAggregateInputType
  }

  export type Excercise_groupGroupByOutputType = {
    id: number
    excercise_id: number
    group_id: number
    difficulty: number | null
    _count: Excercise_groupCountAggregateOutputType | null
    _avg: Excercise_groupAvgAggregateOutputType | null
    _sum: Excercise_groupSumAggregateOutputType | null
    _min: Excercise_groupMinAggregateOutputType | null
    _max: Excercise_groupMaxAggregateOutputType | null
  }

  type GetExcercise_groupGroupByPayload<T extends excercise_groupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Excercise_groupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Excercise_groupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Excercise_groupGroupByOutputType[P]>
            : GetScalarType<T[P], Excercise_groupGroupByOutputType[P]>
        }
      >
    >


  export type excercise_groupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    excercise_id?: boolean
    group_id?: boolean
    difficulty?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["excercise_group"]>

  export type excercise_groupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    excercise_id?: boolean
    group_id?: boolean
    difficulty?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["excercise_group"]>

  export type excercise_groupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    excercise_id?: boolean
    group_id?: boolean
    difficulty?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["excercise_group"]>

  export type excercise_groupSelectScalar = {
    id?: boolean
    excercise_id?: boolean
    group_id?: boolean
    difficulty?: boolean
  }

  export type excercise_groupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "excercise_id" | "group_id" | "difficulty", ExtArgs["result"]["excercise_group"]>
  export type excercise_groupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }
  export type excercise_groupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }
  export type excercise_groupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    group?: boolean | groupDefaultArgs<ExtArgs>
  }

  export type $excercise_groupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "excercise_group"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>
      group: Prisma.$groupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      excercise_id: number
      group_id: number
      difficulty: number | null
    }, ExtArgs["result"]["excercise_group"]>
    composites: {}
  }

  type excercise_groupGetPayload<S extends boolean | null | undefined | excercise_groupDefaultArgs> = $Result.GetResult<Prisma.$excercise_groupPayload, S>

  type excercise_groupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<excercise_groupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Excercise_groupCountAggregateInputType | true
    }

  export interface excercise_groupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['excercise_group'], meta: { name: 'excercise_group' } }
    /**
     * Find zero or one Excercise_group that matches the filter.
     * @param {excercise_groupFindUniqueArgs} args - Arguments to find a Excercise_group
     * @example
     * // Get one Excercise_group
     * const excercise_group = await prisma.excercise_group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends excercise_groupFindUniqueArgs>(args: SelectSubset<T, excercise_groupFindUniqueArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Excercise_group that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {excercise_groupFindUniqueOrThrowArgs} args - Arguments to find a Excercise_group
     * @example
     * // Get one Excercise_group
     * const excercise_group = await prisma.excercise_group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends excercise_groupFindUniqueOrThrowArgs>(args: SelectSubset<T, excercise_groupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Excercise_group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupFindFirstArgs} args - Arguments to find a Excercise_group
     * @example
     * // Get one Excercise_group
     * const excercise_group = await prisma.excercise_group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends excercise_groupFindFirstArgs>(args?: SelectSubset<T, excercise_groupFindFirstArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Excercise_group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupFindFirstOrThrowArgs} args - Arguments to find a Excercise_group
     * @example
     * // Get one Excercise_group
     * const excercise_group = await prisma.excercise_group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends excercise_groupFindFirstOrThrowArgs>(args?: SelectSubset<T, excercise_groupFindFirstOrThrowArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Excercise_groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Excercise_groups
     * const excercise_groups = await prisma.excercise_group.findMany()
     * 
     * // Get first 10 Excercise_groups
     * const excercise_groups = await prisma.excercise_group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const excercise_groupWithIdOnly = await prisma.excercise_group.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends excercise_groupFindManyArgs>(args?: SelectSubset<T, excercise_groupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Excercise_group.
     * @param {excercise_groupCreateArgs} args - Arguments to create a Excercise_group.
     * @example
     * // Create one Excercise_group
     * const Excercise_group = await prisma.excercise_group.create({
     *   data: {
     *     // ... data to create a Excercise_group
     *   }
     * })
     * 
     */
    create<T extends excercise_groupCreateArgs>(args: SelectSubset<T, excercise_groupCreateArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Excercise_groups.
     * @param {excercise_groupCreateManyArgs} args - Arguments to create many Excercise_groups.
     * @example
     * // Create many Excercise_groups
     * const excercise_group = await prisma.excercise_group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends excercise_groupCreateManyArgs>(args?: SelectSubset<T, excercise_groupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Excercise_groups and returns the data saved in the database.
     * @param {excercise_groupCreateManyAndReturnArgs} args - Arguments to create many Excercise_groups.
     * @example
     * // Create many Excercise_groups
     * const excercise_group = await prisma.excercise_group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Excercise_groups and only return the `id`
     * const excercise_groupWithIdOnly = await prisma.excercise_group.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends excercise_groupCreateManyAndReturnArgs>(args?: SelectSubset<T, excercise_groupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Excercise_group.
     * @param {excercise_groupDeleteArgs} args - Arguments to delete one Excercise_group.
     * @example
     * // Delete one Excercise_group
     * const Excercise_group = await prisma.excercise_group.delete({
     *   where: {
     *     // ... filter to delete one Excercise_group
     *   }
     * })
     * 
     */
    delete<T extends excercise_groupDeleteArgs>(args: SelectSubset<T, excercise_groupDeleteArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Excercise_group.
     * @param {excercise_groupUpdateArgs} args - Arguments to update one Excercise_group.
     * @example
     * // Update one Excercise_group
     * const excercise_group = await prisma.excercise_group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends excercise_groupUpdateArgs>(args: SelectSubset<T, excercise_groupUpdateArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Excercise_groups.
     * @param {excercise_groupDeleteManyArgs} args - Arguments to filter Excercise_groups to delete.
     * @example
     * // Delete a few Excercise_groups
     * const { count } = await prisma.excercise_group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends excercise_groupDeleteManyArgs>(args?: SelectSubset<T, excercise_groupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Excercise_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Excercise_groups
     * const excercise_group = await prisma.excercise_group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends excercise_groupUpdateManyArgs>(args: SelectSubset<T, excercise_groupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Excercise_groups and returns the data updated in the database.
     * @param {excercise_groupUpdateManyAndReturnArgs} args - Arguments to update many Excercise_groups.
     * @example
     * // Update many Excercise_groups
     * const excercise_group = await prisma.excercise_group.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Excercise_groups and only return the `id`
     * const excercise_groupWithIdOnly = await prisma.excercise_group.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends excercise_groupUpdateManyAndReturnArgs>(args: SelectSubset<T, excercise_groupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Excercise_group.
     * @param {excercise_groupUpsertArgs} args - Arguments to update or create a Excercise_group.
     * @example
     * // Update or create a Excercise_group
     * const excercise_group = await prisma.excercise_group.upsert({
     *   create: {
     *     // ... data to create a Excercise_group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Excercise_group we want to update
     *   }
     * })
     */
    upsert<T extends excercise_groupUpsertArgs>(args: SelectSubset<T, excercise_groupUpsertArgs<ExtArgs>>): Prisma__excercise_groupClient<$Result.GetResult<Prisma.$excercise_groupPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Excercise_groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupCountArgs} args - Arguments to filter Excercise_groups to count.
     * @example
     * // Count the number of Excercise_groups
     * const count = await prisma.excercise_group.count({
     *   where: {
     *     // ... the filter for the Excercise_groups we want to count
     *   }
     * })
    **/
    count<T extends excercise_groupCountArgs>(
      args?: Subset<T, excercise_groupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Excercise_groupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Excercise_group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Excercise_groupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Excercise_groupAggregateArgs>(args: Subset<T, Excercise_groupAggregateArgs>): Prisma.PrismaPromise<GetExcercise_groupAggregateType<T>>

    /**
     * Group by Excercise_group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {excercise_groupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends excercise_groupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: excercise_groupGroupByArgs['orderBy'] }
        : { orderBy?: excercise_groupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, excercise_groupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExcercise_groupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the excercise_group model
   */
  readonly fields: excercise_groupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for excercise_group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__excercise_groupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    group<T extends groupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, groupDefaultArgs<ExtArgs>>): Prisma__groupClient<$Result.GetResult<Prisma.$groupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the excercise_group model
   */ 
  interface excercise_groupFieldRefs {
    readonly id: FieldRef<"excercise_group", 'Int'>
    readonly excercise_id: FieldRef<"excercise_group", 'Int'>
    readonly group_id: FieldRef<"excercise_group", 'Int'>
    readonly difficulty: FieldRef<"excercise_group", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * excercise_group findUnique
   */
  export type excercise_groupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter, which excercise_group to fetch.
     */
    where: excercise_groupWhereUniqueInput
  }

  /**
   * excercise_group findUniqueOrThrow
   */
  export type excercise_groupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter, which excercise_group to fetch.
     */
    where: excercise_groupWhereUniqueInput
  }

  /**
   * excercise_group findFirst
   */
  export type excercise_groupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter, which excercise_group to fetch.
     */
    where?: excercise_groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of excercise_groups to fetch.
     */
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for excercise_groups.
     */
    cursor?: excercise_groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` excercise_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` excercise_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of excercise_groups.
     */
    distinct?: Excercise_groupScalarFieldEnum | Excercise_groupScalarFieldEnum[]
  }

  /**
   * excercise_group findFirstOrThrow
   */
  export type excercise_groupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter, which excercise_group to fetch.
     */
    where?: excercise_groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of excercise_groups to fetch.
     */
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for excercise_groups.
     */
    cursor?: excercise_groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` excercise_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` excercise_groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of excercise_groups.
     */
    distinct?: Excercise_groupScalarFieldEnum | Excercise_groupScalarFieldEnum[]
  }

  /**
   * excercise_group findMany
   */
  export type excercise_groupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter, which excercise_groups to fetch.
     */
    where?: excercise_groupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of excercise_groups to fetch.
     */
    orderBy?: excercise_groupOrderByWithRelationInput | excercise_groupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing excercise_groups.
     */
    cursor?: excercise_groupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` excercise_groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` excercise_groups.
     */
    skip?: number
    distinct?: Excercise_groupScalarFieldEnum | Excercise_groupScalarFieldEnum[]
  }

  /**
   * excercise_group create
   */
  export type excercise_groupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * The data needed to create a excercise_group.
     */
    data: XOR<excercise_groupCreateInput, excercise_groupUncheckedCreateInput>
  }

  /**
   * excercise_group createMany
   */
  export type excercise_groupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many excercise_groups.
     */
    data: excercise_groupCreateManyInput | excercise_groupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * excercise_group createManyAndReturn
   */
  export type excercise_groupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * The data used to create many excercise_groups.
     */
    data: excercise_groupCreateManyInput | excercise_groupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * excercise_group update
   */
  export type excercise_groupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * The data needed to update a excercise_group.
     */
    data: XOR<excercise_groupUpdateInput, excercise_groupUncheckedUpdateInput>
    /**
     * Choose, which excercise_group to update.
     */
    where: excercise_groupWhereUniqueInput
  }

  /**
   * excercise_group updateMany
   */
  export type excercise_groupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update excercise_groups.
     */
    data: XOR<excercise_groupUpdateManyMutationInput, excercise_groupUncheckedUpdateManyInput>
    /**
     * Filter which excercise_groups to update
     */
    where?: excercise_groupWhereInput
    limit?: number
  }

  /**
   * excercise_group updateManyAndReturn
   */
  export type excercise_groupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * The data used to update excercise_groups.
     */
    data: XOR<excercise_groupUpdateManyMutationInput, excercise_groupUncheckedUpdateManyInput>
    /**
     * Filter which excercise_groups to update
     */
    where?: excercise_groupWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * excercise_group upsert
   */
  export type excercise_groupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * The filter to search for the excercise_group to update in case it exists.
     */
    where: excercise_groupWhereUniqueInput
    /**
     * In case the excercise_group found by the `where` argument doesn't exist, create a new excercise_group with this data.
     */
    create: XOR<excercise_groupCreateInput, excercise_groupUncheckedCreateInput>
    /**
     * In case the excercise_group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<excercise_groupUpdateInput, excercise_groupUncheckedUpdateInput>
  }

  /**
   * excercise_group delete
   */
  export type excercise_groupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
    /**
     * Filter which excercise_group to delete.
     */
    where: excercise_groupWhereUniqueInput
  }

  /**
   * excercise_group deleteMany
   */
  export type excercise_groupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which excercise_groups to delete
     */
    where?: excercise_groupWhereInput
    limit?: number
  }

  /**
   * excercise_group without action
   */
  export type excercise_groupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the excercise_group
     */
    select?: excercise_groupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the excercise_group
     */
    omit?: excercise_groupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: excercise_groupInclude<ExtArgs> | null
  }


  /**
   * Model exercise_muscle
   */

  export type AggregateExercise_muscle = {
    _count: Exercise_muscleCountAggregateOutputType | null
    _avg: Exercise_muscleAvgAggregateOutputType | null
    _sum: Exercise_muscleSumAggregateOutputType | null
    _min: Exercise_muscleMinAggregateOutputType | null
    _max: Exercise_muscleMaxAggregateOutputType | null
  }

  export type Exercise_muscleAvgAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    muscle_id: number | null
    rating: number | null
  }

  export type Exercise_muscleSumAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    muscle_id: number | null
    rating: number | null
  }

  export type Exercise_muscleMinAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    muscle_id: number | null
    rating: number | null
  }

  export type Exercise_muscleMaxAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    muscle_id: number | null
    rating: number | null
  }

  export type Exercise_muscleCountAggregateOutputType = {
    id: number
    exercise_id: number
    muscle_id: number
    rating: number
    _all: number
  }


  export type Exercise_muscleAvgAggregateInputType = {
    id?: true
    exercise_id?: true
    muscle_id?: true
    rating?: true
  }

  export type Exercise_muscleSumAggregateInputType = {
    id?: true
    exercise_id?: true
    muscle_id?: true
    rating?: true
  }

  export type Exercise_muscleMinAggregateInputType = {
    id?: true
    exercise_id?: true
    muscle_id?: true
    rating?: true
  }

  export type Exercise_muscleMaxAggregateInputType = {
    id?: true
    exercise_id?: true
    muscle_id?: true
    rating?: true
  }

  export type Exercise_muscleCountAggregateInputType = {
    id?: true
    exercise_id?: true
    muscle_id?: true
    rating?: true
    _all?: true
  }

  export type Exercise_muscleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_muscle to aggregate.
     */
    where?: exercise_muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_muscles to fetch.
     */
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exercise_muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercise_muscles
    **/
    _count?: true | Exercise_muscleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Exercise_muscleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Exercise_muscleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Exercise_muscleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Exercise_muscleMaxAggregateInputType
  }

  export type GetExercise_muscleAggregateType<T extends Exercise_muscleAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise_muscle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise_muscle[P]>
      : GetScalarType<T[P], AggregateExercise_muscle[P]>
  }




  export type exercise_muscleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_muscleWhereInput
    orderBy?: exercise_muscleOrderByWithAggregationInput | exercise_muscleOrderByWithAggregationInput[]
    by: Exercise_muscleScalarFieldEnum[] | Exercise_muscleScalarFieldEnum
    having?: exercise_muscleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Exercise_muscleCountAggregateInputType | true
    _avg?: Exercise_muscleAvgAggregateInputType
    _sum?: Exercise_muscleSumAggregateInputType
    _min?: Exercise_muscleMinAggregateInputType
    _max?: Exercise_muscleMaxAggregateInputType
  }

  export type Exercise_muscleGroupByOutputType = {
    id: number
    exercise_id: number
    muscle_id: number
    rating: number
    _count: Exercise_muscleCountAggregateOutputType | null
    _avg: Exercise_muscleAvgAggregateOutputType | null
    _sum: Exercise_muscleSumAggregateOutputType | null
    _min: Exercise_muscleMinAggregateOutputType | null
    _max: Exercise_muscleMaxAggregateOutputType | null
  }

  type GetExercise_muscleGroupByPayload<T extends exercise_muscleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Exercise_muscleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Exercise_muscleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Exercise_muscleGroupByOutputType[P]>
            : GetScalarType<T[P], Exercise_muscleGroupByOutputType[P]>
        }
      >
    >


  export type exercise_muscleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    muscle_id?: boolean
    rating?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_muscle"]>

  export type exercise_muscleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    muscle_id?: boolean
    rating?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_muscle"]>

  export type exercise_muscleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    muscle_id?: boolean
    rating?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_muscle"]>

  export type exercise_muscleSelectScalar = {
    id?: boolean
    exercise_id?: boolean
    muscle_id?: boolean
    rating?: boolean
  }

  export type exercise_muscleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "exercise_id" | "muscle_id" | "rating", ExtArgs["result"]["exercise_muscle"]>
  export type exercise_muscleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }
  export type exercise_muscleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }
  export type exercise_muscleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    muscle?: boolean | muscleDefaultArgs<ExtArgs>
  }

  export type $exercise_musclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exercise_muscle"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>
      muscle: Prisma.$musclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      exercise_id: number
      muscle_id: number
      rating: number
    }, ExtArgs["result"]["exercise_muscle"]>
    composites: {}
  }

  type exercise_muscleGetPayload<S extends boolean | null | undefined | exercise_muscleDefaultArgs> = $Result.GetResult<Prisma.$exercise_musclePayload, S>

  type exercise_muscleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exercise_muscleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Exercise_muscleCountAggregateInputType | true
    }

  export interface exercise_muscleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exercise_muscle'], meta: { name: 'exercise_muscle' } }
    /**
     * Find zero or one Exercise_muscle that matches the filter.
     * @param {exercise_muscleFindUniqueArgs} args - Arguments to find a Exercise_muscle
     * @example
     * // Get one Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exercise_muscleFindUniqueArgs>(args: SelectSubset<T, exercise_muscleFindUniqueArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Exercise_muscle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exercise_muscleFindUniqueOrThrowArgs} args - Arguments to find a Exercise_muscle
     * @example
     * // Get one Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exercise_muscleFindUniqueOrThrowArgs>(args: SelectSubset<T, exercise_muscleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_muscle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleFindFirstArgs} args - Arguments to find a Exercise_muscle
     * @example
     * // Get one Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exercise_muscleFindFirstArgs>(args?: SelectSubset<T, exercise_muscleFindFirstArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_muscle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleFindFirstOrThrowArgs} args - Arguments to find a Exercise_muscle
     * @example
     * // Get one Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exercise_muscleFindFirstOrThrowArgs>(args?: SelectSubset<T, exercise_muscleFindFirstOrThrowArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Exercise_muscles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercise_muscles
     * const exercise_muscles = await prisma.exercise_muscle.findMany()
     * 
     * // Get first 10 Exercise_muscles
     * const exercise_muscles = await prisma.exercise_muscle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercise_muscleWithIdOnly = await prisma.exercise_muscle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends exercise_muscleFindManyArgs>(args?: SelectSubset<T, exercise_muscleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Exercise_muscle.
     * @param {exercise_muscleCreateArgs} args - Arguments to create a Exercise_muscle.
     * @example
     * // Create one Exercise_muscle
     * const Exercise_muscle = await prisma.exercise_muscle.create({
     *   data: {
     *     // ... data to create a Exercise_muscle
     *   }
     * })
     * 
     */
    create<T extends exercise_muscleCreateArgs>(args: SelectSubset<T, exercise_muscleCreateArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Exercise_muscles.
     * @param {exercise_muscleCreateManyArgs} args - Arguments to create many Exercise_muscles.
     * @example
     * // Create many Exercise_muscles
     * const exercise_muscle = await prisma.exercise_muscle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exercise_muscleCreateManyArgs>(args?: SelectSubset<T, exercise_muscleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercise_muscles and returns the data saved in the database.
     * @param {exercise_muscleCreateManyAndReturnArgs} args - Arguments to create many Exercise_muscles.
     * @example
     * // Create many Exercise_muscles
     * const exercise_muscle = await prisma.exercise_muscle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercise_muscles and only return the `id`
     * const exercise_muscleWithIdOnly = await prisma.exercise_muscle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends exercise_muscleCreateManyAndReturnArgs>(args?: SelectSubset<T, exercise_muscleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Exercise_muscle.
     * @param {exercise_muscleDeleteArgs} args - Arguments to delete one Exercise_muscle.
     * @example
     * // Delete one Exercise_muscle
     * const Exercise_muscle = await prisma.exercise_muscle.delete({
     *   where: {
     *     // ... filter to delete one Exercise_muscle
     *   }
     * })
     * 
     */
    delete<T extends exercise_muscleDeleteArgs>(args: SelectSubset<T, exercise_muscleDeleteArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Exercise_muscle.
     * @param {exercise_muscleUpdateArgs} args - Arguments to update one Exercise_muscle.
     * @example
     * // Update one Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exercise_muscleUpdateArgs>(args: SelectSubset<T, exercise_muscleUpdateArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Exercise_muscles.
     * @param {exercise_muscleDeleteManyArgs} args - Arguments to filter Exercise_muscles to delete.
     * @example
     * // Delete a few Exercise_muscles
     * const { count } = await prisma.exercise_muscle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exercise_muscleDeleteManyArgs>(args?: SelectSubset<T, exercise_muscleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercise_muscles
     * const exercise_muscle = await prisma.exercise_muscle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exercise_muscleUpdateManyArgs>(args: SelectSubset<T, exercise_muscleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_muscles and returns the data updated in the database.
     * @param {exercise_muscleUpdateManyAndReturnArgs} args - Arguments to update many Exercise_muscles.
     * @example
     * // Update many Exercise_muscles
     * const exercise_muscle = await prisma.exercise_muscle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercise_muscles and only return the `id`
     * const exercise_muscleWithIdOnly = await prisma.exercise_muscle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends exercise_muscleUpdateManyAndReturnArgs>(args: SelectSubset<T, exercise_muscleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Exercise_muscle.
     * @param {exercise_muscleUpsertArgs} args - Arguments to update or create a Exercise_muscle.
     * @example
     * // Update or create a Exercise_muscle
     * const exercise_muscle = await prisma.exercise_muscle.upsert({
     *   create: {
     *     // ... data to create a Exercise_muscle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise_muscle we want to update
     *   }
     * })
     */
    upsert<T extends exercise_muscleUpsertArgs>(args: SelectSubset<T, exercise_muscleUpsertArgs<ExtArgs>>): Prisma__exercise_muscleClient<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Exercise_muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleCountArgs} args - Arguments to filter Exercise_muscles to count.
     * @example
     * // Count the number of Exercise_muscles
     * const count = await prisma.exercise_muscle.count({
     *   where: {
     *     // ... the filter for the Exercise_muscles we want to count
     *   }
     * })
    **/
    count<T extends exercise_muscleCountArgs>(
      args?: Subset<T, exercise_muscleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Exercise_muscleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise_muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Exercise_muscleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Exercise_muscleAggregateArgs>(args: Subset<T, Exercise_muscleAggregateArgs>): Prisma.PrismaPromise<GetExercise_muscleAggregateType<T>>

    /**
     * Group by Exercise_muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_muscleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exercise_muscleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exercise_muscleGroupByArgs['orderBy'] }
        : { orderBy?: exercise_muscleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exercise_muscleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercise_muscleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exercise_muscle model
   */
  readonly fields: exercise_muscleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exercise_muscle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exercise_muscleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    muscle<T extends muscleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, muscleDefaultArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exercise_muscle model
   */ 
  interface exercise_muscleFieldRefs {
    readonly id: FieldRef<"exercise_muscle", 'Int'>
    readonly exercise_id: FieldRef<"exercise_muscle", 'Int'>
    readonly muscle_id: FieldRef<"exercise_muscle", 'Int'>
    readonly rating: FieldRef<"exercise_muscle", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * exercise_muscle findUnique
   */
  export type exercise_muscleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter, which exercise_muscle to fetch.
     */
    where: exercise_muscleWhereUniqueInput
  }

  /**
   * exercise_muscle findUniqueOrThrow
   */
  export type exercise_muscleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter, which exercise_muscle to fetch.
     */
    where: exercise_muscleWhereUniqueInput
  }

  /**
   * exercise_muscle findFirst
   */
  export type exercise_muscleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter, which exercise_muscle to fetch.
     */
    where?: exercise_muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_muscles to fetch.
     */
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_muscles.
     */
    cursor?: exercise_muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_muscles.
     */
    distinct?: Exercise_muscleScalarFieldEnum | Exercise_muscleScalarFieldEnum[]
  }

  /**
   * exercise_muscle findFirstOrThrow
   */
  export type exercise_muscleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter, which exercise_muscle to fetch.
     */
    where?: exercise_muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_muscles to fetch.
     */
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_muscles.
     */
    cursor?: exercise_muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_muscles.
     */
    distinct?: Exercise_muscleScalarFieldEnum | Exercise_muscleScalarFieldEnum[]
  }

  /**
   * exercise_muscle findMany
   */
  export type exercise_muscleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter, which exercise_muscles to fetch.
     */
    where?: exercise_muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_muscles to fetch.
     */
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercise_muscles.
     */
    cursor?: exercise_muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_muscles.
     */
    skip?: number
    distinct?: Exercise_muscleScalarFieldEnum | Exercise_muscleScalarFieldEnum[]
  }

  /**
   * exercise_muscle create
   */
  export type exercise_muscleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * The data needed to create a exercise_muscle.
     */
    data: XOR<exercise_muscleCreateInput, exercise_muscleUncheckedCreateInput>
  }

  /**
   * exercise_muscle createMany
   */
  export type exercise_muscleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exercise_muscles.
     */
    data: exercise_muscleCreateManyInput | exercise_muscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise_muscle createManyAndReturn
   */
  export type exercise_muscleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * The data used to create many exercise_muscles.
     */
    data: exercise_muscleCreateManyInput | exercise_muscleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_muscle update
   */
  export type exercise_muscleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * The data needed to update a exercise_muscle.
     */
    data: XOR<exercise_muscleUpdateInput, exercise_muscleUncheckedUpdateInput>
    /**
     * Choose, which exercise_muscle to update.
     */
    where: exercise_muscleWhereUniqueInput
  }

  /**
   * exercise_muscle updateMany
   */
  export type exercise_muscleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exercise_muscles.
     */
    data: XOR<exercise_muscleUpdateManyMutationInput, exercise_muscleUncheckedUpdateManyInput>
    /**
     * Filter which exercise_muscles to update
     */
    where?: exercise_muscleWhereInput
    limit?: number
  }

  /**
   * exercise_muscle updateManyAndReturn
   */
  export type exercise_muscleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * The data used to update exercise_muscles.
     */
    data: XOR<exercise_muscleUpdateManyMutationInput, exercise_muscleUncheckedUpdateManyInput>
    /**
     * Filter which exercise_muscles to update
     */
    where?: exercise_muscleWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_muscle upsert
   */
  export type exercise_muscleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * The filter to search for the exercise_muscle to update in case it exists.
     */
    where: exercise_muscleWhereUniqueInput
    /**
     * In case the exercise_muscle found by the `where` argument doesn't exist, create a new exercise_muscle with this data.
     */
    create: XOR<exercise_muscleCreateInput, exercise_muscleUncheckedCreateInput>
    /**
     * In case the exercise_muscle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exercise_muscleUpdateInput, exercise_muscleUncheckedUpdateInput>
  }

  /**
   * exercise_muscle delete
   */
  export type exercise_muscleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    /**
     * Filter which exercise_muscle to delete.
     */
    where: exercise_muscleWhereUniqueInput
  }

  /**
   * exercise_muscle deleteMany
   */
  export type exercise_muscleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_muscles to delete
     */
    where?: exercise_muscleWhereInput
    limit?: number
  }

  /**
   * exercise_muscle without action
   */
  export type exercise_muscleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
  }


  /**
   * Model muscle
   */

  export type AggregateMuscle = {
    _count: MuscleCountAggregateOutputType | null
    _avg: MuscleAvgAggregateOutputType | null
    _sum: MuscleSumAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  export type MuscleAvgAggregateOutputType = {
    id: number | null
  }

  export type MuscleSumAggregateOutputType = {
    id: number | null
  }

  export type MuscleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MuscleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type MuscleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type MuscleAvgAggregateInputType = {
    id?: true
  }

  export type MuscleSumAggregateInputType = {
    id?: true
  }

  export type MuscleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type MuscleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type MuscleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type MuscleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which muscle to aggregate.
     */
    where?: muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of muscles to fetch.
     */
    orderBy?: muscleOrderByWithRelationInput | muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned muscles
    **/
    _count?: true | MuscleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MuscleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MuscleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MuscleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MuscleMaxAggregateInputType
  }

  export type GetMuscleAggregateType<T extends MuscleAggregateArgs> = {
        [P in keyof T & keyof AggregateMuscle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMuscle[P]>
      : GetScalarType<T[P], AggregateMuscle[P]>
  }




  export type muscleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: muscleWhereInput
    orderBy?: muscleOrderByWithAggregationInput | muscleOrderByWithAggregationInput[]
    by: MuscleScalarFieldEnum[] | MuscleScalarFieldEnum
    having?: muscleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MuscleCountAggregateInputType | true
    _avg?: MuscleAvgAggregateInputType
    _sum?: MuscleSumAggregateInputType
    _min?: MuscleMinAggregateInputType
    _max?: MuscleMaxAggregateInputType
  }

  export type MuscleGroupByOutputType = {
    id: number
    name: string
    _count: MuscleCountAggregateOutputType | null
    _avg: MuscleAvgAggregateOutputType | null
    _sum: MuscleSumAggregateOutputType | null
    _min: MuscleMinAggregateOutputType | null
    _max: MuscleMaxAggregateOutputType | null
  }

  type GetMuscleGroupByPayload<T extends muscleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MuscleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MuscleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MuscleGroupByOutputType[P]>
            : GetScalarType<T[P], MuscleGroupByOutputType[P]>
        }
      >
    >


  export type muscleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    exercises?: boolean | muscle$exercisesArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["muscle"]>

  export type muscleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["muscle"]>

  export type muscleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["muscle"]>

  export type muscleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type muscleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["muscle"]>
  export type muscleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | muscle$exercisesArgs<ExtArgs>
    _count?: boolean | MuscleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type muscleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type muscleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $musclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "muscle"
    objects: {
      exercises: Prisma.$exercise_musclePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["muscle"]>
    composites: {}
  }

  type muscleGetPayload<S extends boolean | null | undefined | muscleDefaultArgs> = $Result.GetResult<Prisma.$musclePayload, S>

  type muscleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<muscleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MuscleCountAggregateInputType | true
    }

  export interface muscleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['muscle'], meta: { name: 'muscle' } }
    /**
     * Find zero or one Muscle that matches the filter.
     * @param {muscleFindUniqueArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends muscleFindUniqueArgs>(args: SelectSubset<T, muscleFindUniqueArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Muscle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {muscleFindUniqueOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends muscleFindUniqueOrThrowArgs>(args: SelectSubset<T, muscleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Muscle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleFindFirstArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends muscleFindFirstArgs>(args?: SelectSubset<T, muscleFindFirstArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Muscle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleFindFirstOrThrowArgs} args - Arguments to find a Muscle
     * @example
     * // Get one Muscle
     * const muscle = await prisma.muscle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends muscleFindFirstOrThrowArgs>(args?: SelectSubset<T, muscleFindFirstOrThrowArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Muscles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Muscles
     * const muscles = await prisma.muscle.findMany()
     * 
     * // Get first 10 Muscles
     * const muscles = await prisma.muscle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const muscleWithIdOnly = await prisma.muscle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends muscleFindManyArgs>(args?: SelectSubset<T, muscleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Muscle.
     * @param {muscleCreateArgs} args - Arguments to create a Muscle.
     * @example
     * // Create one Muscle
     * const Muscle = await prisma.muscle.create({
     *   data: {
     *     // ... data to create a Muscle
     *   }
     * })
     * 
     */
    create<T extends muscleCreateArgs>(args: SelectSubset<T, muscleCreateArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Muscles.
     * @param {muscleCreateManyArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends muscleCreateManyArgs>(args?: SelectSubset<T, muscleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Muscles and returns the data saved in the database.
     * @param {muscleCreateManyAndReturnArgs} args - Arguments to create many Muscles.
     * @example
     * // Create many Muscles
     * const muscle = await prisma.muscle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Muscles and only return the `id`
     * const muscleWithIdOnly = await prisma.muscle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends muscleCreateManyAndReturnArgs>(args?: SelectSubset<T, muscleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Muscle.
     * @param {muscleDeleteArgs} args - Arguments to delete one Muscle.
     * @example
     * // Delete one Muscle
     * const Muscle = await prisma.muscle.delete({
     *   where: {
     *     // ... filter to delete one Muscle
     *   }
     * })
     * 
     */
    delete<T extends muscleDeleteArgs>(args: SelectSubset<T, muscleDeleteArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Muscle.
     * @param {muscleUpdateArgs} args - Arguments to update one Muscle.
     * @example
     * // Update one Muscle
     * const muscle = await prisma.muscle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends muscleUpdateArgs>(args: SelectSubset<T, muscleUpdateArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Muscles.
     * @param {muscleDeleteManyArgs} args - Arguments to filter Muscles to delete.
     * @example
     * // Delete a few Muscles
     * const { count } = await prisma.muscle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends muscleDeleteManyArgs>(args?: SelectSubset<T, muscleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Muscles
     * const muscle = await prisma.muscle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends muscleUpdateManyArgs>(args: SelectSubset<T, muscleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Muscles and returns the data updated in the database.
     * @param {muscleUpdateManyAndReturnArgs} args - Arguments to update many Muscles.
     * @example
     * // Update many Muscles
     * const muscle = await prisma.muscle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Muscles and only return the `id`
     * const muscleWithIdOnly = await prisma.muscle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends muscleUpdateManyAndReturnArgs>(args: SelectSubset<T, muscleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Muscle.
     * @param {muscleUpsertArgs} args - Arguments to update or create a Muscle.
     * @example
     * // Update or create a Muscle
     * const muscle = await prisma.muscle.upsert({
     *   create: {
     *     // ... data to create a Muscle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Muscle we want to update
     *   }
     * })
     */
    upsert<T extends muscleUpsertArgs>(args: SelectSubset<T, muscleUpsertArgs<ExtArgs>>): Prisma__muscleClient<$Result.GetResult<Prisma.$musclePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Muscles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleCountArgs} args - Arguments to filter Muscles to count.
     * @example
     * // Count the number of Muscles
     * const count = await prisma.muscle.count({
     *   where: {
     *     // ... the filter for the Muscles we want to count
     *   }
     * })
    **/
    count<T extends muscleCountArgs>(
      args?: Subset<T, muscleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MuscleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MuscleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MuscleAggregateArgs>(args: Subset<T, MuscleAggregateArgs>): Prisma.PrismaPromise<GetMuscleAggregateType<T>>

    /**
     * Group by Muscle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {muscleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends muscleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: muscleGroupByArgs['orderBy'] }
        : { orderBy?: muscleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, muscleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMuscleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the muscle model
   */
  readonly fields: muscleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for muscle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__muscleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends muscle$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, muscle$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_musclePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the muscle model
   */ 
  interface muscleFieldRefs {
    readonly id: FieldRef<"muscle", 'Int'>
    readonly name: FieldRef<"muscle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * muscle findUnique
   */
  export type muscleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter, which muscle to fetch.
     */
    where: muscleWhereUniqueInput
  }

  /**
   * muscle findUniqueOrThrow
   */
  export type muscleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter, which muscle to fetch.
     */
    where: muscleWhereUniqueInput
  }

  /**
   * muscle findFirst
   */
  export type muscleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter, which muscle to fetch.
     */
    where?: muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of muscles to fetch.
     */
    orderBy?: muscleOrderByWithRelationInput | muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for muscles.
     */
    cursor?: muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * muscle findFirstOrThrow
   */
  export type muscleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter, which muscle to fetch.
     */
    where?: muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of muscles to fetch.
     */
    orderBy?: muscleOrderByWithRelationInput | muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for muscles.
     */
    cursor?: muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` muscles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of muscles.
     */
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * muscle findMany
   */
  export type muscleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter, which muscles to fetch.
     */
    where?: muscleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of muscles to fetch.
     */
    orderBy?: muscleOrderByWithRelationInput | muscleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing muscles.
     */
    cursor?: muscleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` muscles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` muscles.
     */
    skip?: number
    distinct?: MuscleScalarFieldEnum | MuscleScalarFieldEnum[]
  }

  /**
   * muscle create
   */
  export type muscleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * The data needed to create a muscle.
     */
    data: XOR<muscleCreateInput, muscleUncheckedCreateInput>
  }

  /**
   * muscle createMany
   */
  export type muscleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many muscles.
     */
    data: muscleCreateManyInput | muscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * muscle createManyAndReturn
   */
  export type muscleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * The data used to create many muscles.
     */
    data: muscleCreateManyInput | muscleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * muscle update
   */
  export type muscleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * The data needed to update a muscle.
     */
    data: XOR<muscleUpdateInput, muscleUncheckedUpdateInput>
    /**
     * Choose, which muscle to update.
     */
    where: muscleWhereUniqueInput
  }

  /**
   * muscle updateMany
   */
  export type muscleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update muscles.
     */
    data: XOR<muscleUpdateManyMutationInput, muscleUncheckedUpdateManyInput>
    /**
     * Filter which muscles to update
     */
    where?: muscleWhereInput
    limit?: number
  }

  /**
   * muscle updateManyAndReturn
   */
  export type muscleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * The data used to update muscles.
     */
    data: XOR<muscleUpdateManyMutationInput, muscleUncheckedUpdateManyInput>
    /**
     * Filter which muscles to update
     */
    where?: muscleWhereInput
    limit?: number
  }

  /**
   * muscle upsert
   */
  export type muscleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * The filter to search for the muscle to update in case it exists.
     */
    where: muscleWhereUniqueInput
    /**
     * In case the muscle found by the `where` argument doesn't exist, create a new muscle with this data.
     */
    create: XOR<muscleCreateInput, muscleUncheckedCreateInput>
    /**
     * In case the muscle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<muscleUpdateInput, muscleUncheckedUpdateInput>
  }

  /**
   * muscle delete
   */
  export type muscleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
    /**
     * Filter which muscle to delete.
     */
    where: muscleWhereUniqueInput
  }

  /**
   * muscle deleteMany
   */
  export type muscleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which muscles to delete
     */
    where?: muscleWhereInput
    limit?: number
  }

  /**
   * muscle.exercises
   */
  export type muscle$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_muscle
     */
    select?: exercise_muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_muscle
     */
    omit?: exercise_muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_muscleInclude<ExtArgs> | null
    where?: exercise_muscleWhereInput
    orderBy?: exercise_muscleOrderByWithRelationInput | exercise_muscleOrderByWithRelationInput[]
    cursor?: exercise_muscleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_muscleScalarFieldEnum | Exercise_muscleScalarFieldEnum[]
  }

  /**
   * muscle without action
   */
  export type muscleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the muscle
     */
    select?: muscleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the muscle
     */
    omit?: muscleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: muscleInclude<ExtArgs> | null
  }


  /**
   * Model equipment
   */

  export type AggregateEquipment = {
    _count: EquipmentCountAggregateOutputType | null
    _avg: EquipmentAvgAggregateOutputType | null
    _sum: EquipmentSumAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  export type EquipmentAvgAggregateOutputType = {
    id: number | null
  }

  export type EquipmentSumAggregateOutputType = {
    id: number | null
  }

  export type EquipmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
  }

  export type EquipmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
  }

  export type EquipmentCountAggregateOutputType = {
    id: number
    name: number
    image: number
    _all: number
  }


  export type EquipmentAvgAggregateInputType = {
    id?: true
  }

  export type EquipmentSumAggregateInputType = {
    id?: true
  }

  export type EquipmentMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
  }

  export type EquipmentMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
  }

  export type EquipmentCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    _all?: true
  }

  export type EquipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which equipment to aggregate.
     */
    where?: equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of equipment to fetch.
     */
    orderBy?: equipmentOrderByWithRelationInput | equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned equipment
    **/
    _count?: true | EquipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EquipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EquipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentMaxAggregateInputType
  }

  export type GetEquipmentAggregateType<T extends EquipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipment[P]>
      : GetScalarType<T[P], AggregateEquipment[P]>
  }




  export type equipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: equipmentWhereInput
    orderBy?: equipmentOrderByWithAggregationInput | equipmentOrderByWithAggregationInput[]
    by: EquipmentScalarFieldEnum[] | EquipmentScalarFieldEnum
    having?: equipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentCountAggregateInputType | true
    _avg?: EquipmentAvgAggregateInputType
    _sum?: EquipmentSumAggregateInputType
    _min?: EquipmentMinAggregateInputType
    _max?: EquipmentMaxAggregateInputType
  }

  export type EquipmentGroupByOutputType = {
    id: number
    name: string
    image: string | null
    _count: EquipmentCountAggregateOutputType | null
    _avg: EquipmentAvgAggregateOutputType | null
    _sum: EquipmentSumAggregateOutputType | null
    _min: EquipmentMinAggregateOutputType | null
    _max: EquipmentMaxAggregateOutputType | null
  }

  type GetEquipmentGroupByPayload<T extends equipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EquipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentGroupByOutputType[P]>
        }
      >
    >


  export type equipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    exercises?: boolean | equipment$exercisesArgs<ExtArgs>
    users?: boolean | equipment$usersArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["equipment"]>

  export type equipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type equipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
  }, ExtArgs["result"]["equipment"]>

  export type equipmentSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
  }

  export type equipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image", ExtArgs["result"]["equipment"]>
  export type equipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercises?: boolean | equipment$exercisesArgs<ExtArgs>
    users?: boolean | equipment$usersArgs<ExtArgs>
    _count?: boolean | EquipmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type equipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type equipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $equipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "equipment"
    objects: {
      exercises: Prisma.$exercise_equipmentPayload<ExtArgs>[]
      users: Prisma.$user_equipmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      image: string | null
    }, ExtArgs["result"]["equipment"]>
    composites: {}
  }

  type equipmentGetPayload<S extends boolean | null | undefined | equipmentDefaultArgs> = $Result.GetResult<Prisma.$equipmentPayload, S>

  type equipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<equipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EquipmentCountAggregateInputType | true
    }

  export interface equipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['equipment'], meta: { name: 'equipment' } }
    /**
     * Find zero or one Equipment that matches the filter.
     * @param {equipmentFindUniqueArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends equipmentFindUniqueArgs>(args: SelectSubset<T, equipmentFindUniqueArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {equipmentFindUniqueOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends equipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, equipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentFindFirstArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends equipmentFindFirstArgs>(args?: SelectSubset<T, equipmentFindFirstArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentFindFirstOrThrowArgs} args - Arguments to find a Equipment
     * @example
     * // Get one Equipment
     * const equipment = await prisma.equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends equipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, equipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipment
     * const equipment = await prisma.equipment.findMany()
     * 
     * // Get first 10 Equipment
     * const equipment = await prisma.equipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentWithIdOnly = await prisma.equipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends equipmentFindManyArgs>(args?: SelectSubset<T, equipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Equipment.
     * @param {equipmentCreateArgs} args - Arguments to create a Equipment.
     * @example
     * // Create one Equipment
     * const Equipment = await prisma.equipment.create({
     *   data: {
     *     // ... data to create a Equipment
     *   }
     * })
     * 
     */
    create<T extends equipmentCreateArgs>(args: SelectSubset<T, equipmentCreateArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Equipment.
     * @param {equipmentCreateManyArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends equipmentCreateManyArgs>(args?: SelectSubset<T, equipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Equipment and returns the data saved in the database.
     * @param {equipmentCreateManyAndReturnArgs} args - Arguments to create many Equipment.
     * @example
     * // Create many Equipment
     * const equipment = await prisma.equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends equipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, equipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Equipment.
     * @param {equipmentDeleteArgs} args - Arguments to delete one Equipment.
     * @example
     * // Delete one Equipment
     * const Equipment = await prisma.equipment.delete({
     *   where: {
     *     // ... filter to delete one Equipment
     *   }
     * })
     * 
     */
    delete<T extends equipmentDeleteArgs>(args: SelectSubset<T, equipmentDeleteArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Equipment.
     * @param {equipmentUpdateArgs} args - Arguments to update one Equipment.
     * @example
     * // Update one Equipment
     * const equipment = await prisma.equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends equipmentUpdateArgs>(args: SelectSubset<T, equipmentUpdateArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Equipment.
     * @param {equipmentDeleteManyArgs} args - Arguments to filter Equipment to delete.
     * @example
     * // Delete a few Equipment
     * const { count } = await prisma.equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends equipmentDeleteManyArgs>(args?: SelectSubset<T, equipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends equipmentUpdateManyArgs>(args: SelectSubset<T, equipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipment and returns the data updated in the database.
     * @param {equipmentUpdateManyAndReturnArgs} args - Arguments to update many Equipment.
     * @example
     * // Update many Equipment
     * const equipment = await prisma.equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Equipment and only return the `id`
     * const equipmentWithIdOnly = await prisma.equipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends equipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, equipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Equipment.
     * @param {equipmentUpsertArgs} args - Arguments to update or create a Equipment.
     * @example
     * // Update or create a Equipment
     * const equipment = await prisma.equipment.upsert({
     *   create: {
     *     // ... data to create a Equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipment we want to update
     *   }
     * })
     */
    upsert<T extends equipmentUpsertArgs>(args: SelectSubset<T, equipmentUpsertArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentCountArgs} args - Arguments to filter Equipment to count.
     * @example
     * // Count the number of Equipment
     * const count = await prisma.equipment.count({
     *   where: {
     *     // ... the filter for the Equipment we want to count
     *   }
     * })
    **/
    count<T extends equipmentCountArgs>(
      args?: Subset<T, equipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentAggregateArgs>(args: Subset<T, EquipmentAggregateArgs>): Prisma.PrismaPromise<GetEquipmentAggregateType<T>>

    /**
     * Group by Equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {equipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends equipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: equipmentGroupByArgs['orderBy'] }
        : { orderBy?: equipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, equipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the equipment model
   */
  readonly fields: equipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__equipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercises<T extends equipment$exercisesArgs<ExtArgs> = {}>(args?: Subset<T, equipment$exercisesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    users<T extends equipment$usersArgs<ExtArgs> = {}>(args?: Subset<T, equipment$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the equipment model
   */ 
  interface equipmentFieldRefs {
    readonly id: FieldRef<"equipment", 'Int'>
    readonly name: FieldRef<"equipment", 'String'>
    readonly image: FieldRef<"equipment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * equipment findUnique
   */
  export type equipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter, which equipment to fetch.
     */
    where: equipmentWhereUniqueInput
  }

  /**
   * equipment findUniqueOrThrow
   */
  export type equipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter, which equipment to fetch.
     */
    where: equipmentWhereUniqueInput
  }

  /**
   * equipment findFirst
   */
  export type equipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter, which equipment to fetch.
     */
    where?: equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of equipment to fetch.
     */
    orderBy?: equipmentOrderByWithRelationInput | equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for equipment.
     */
    cursor?: equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * equipment findFirstOrThrow
   */
  export type equipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter, which equipment to fetch.
     */
    where?: equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of equipment to fetch.
     */
    orderBy?: equipmentOrderByWithRelationInput | equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for equipment.
     */
    cursor?: equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` equipment.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of equipment.
     */
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * equipment findMany
   */
  export type equipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter, which equipment to fetch.
     */
    where?: equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of equipment to fetch.
     */
    orderBy?: equipmentOrderByWithRelationInput | equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing equipment.
     */
    cursor?: equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` equipment from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` equipment.
     */
    skip?: number
    distinct?: EquipmentScalarFieldEnum | EquipmentScalarFieldEnum[]
  }

  /**
   * equipment create
   */
  export type equipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a equipment.
     */
    data: XOR<equipmentCreateInput, equipmentUncheckedCreateInput>
  }

  /**
   * equipment createMany
   */
  export type equipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many equipment.
     */
    data: equipmentCreateManyInput | equipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * equipment createManyAndReturn
   */
  export type equipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * The data used to create many equipment.
     */
    data: equipmentCreateManyInput | equipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * equipment update
   */
  export type equipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a equipment.
     */
    data: XOR<equipmentUpdateInput, equipmentUncheckedUpdateInput>
    /**
     * Choose, which equipment to update.
     */
    where: equipmentWhereUniqueInput
  }

  /**
   * equipment updateMany
   */
  export type equipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update equipment.
     */
    data: XOR<equipmentUpdateManyMutationInput, equipmentUncheckedUpdateManyInput>
    /**
     * Filter which equipment to update
     */
    where?: equipmentWhereInput
    limit?: number
  }

  /**
   * equipment updateManyAndReturn
   */
  export type equipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * The data used to update equipment.
     */
    data: XOR<equipmentUpdateManyMutationInput, equipmentUncheckedUpdateManyInput>
    /**
     * Filter which equipment to update
     */
    where?: equipmentWhereInput
    limit?: number
  }

  /**
   * equipment upsert
   */
  export type equipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the equipment to update in case it exists.
     */
    where: equipmentWhereUniqueInput
    /**
     * In case the equipment found by the `where` argument doesn't exist, create a new equipment with this data.
     */
    create: XOR<equipmentCreateInput, equipmentUncheckedCreateInput>
    /**
     * In case the equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<equipmentUpdateInput, equipmentUncheckedUpdateInput>
  }

  /**
   * equipment delete
   */
  export type equipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
    /**
     * Filter which equipment to delete.
     */
    where: equipmentWhereUniqueInput
  }

  /**
   * equipment deleteMany
   */
  export type equipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which equipment to delete
     */
    where?: equipmentWhereInput
    limit?: number
  }

  /**
   * equipment.exercises
   */
  export type equipment$exercisesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    where?: exercise_equipmentWhereInput
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    cursor?: exercise_equipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Exercise_equipmentScalarFieldEnum | Exercise_equipmentScalarFieldEnum[]
  }

  /**
   * equipment.users
   */
  export type equipment$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    where?: user_equipmentWhereInput
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    cursor?: user_equipmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_equipmentScalarFieldEnum | User_equipmentScalarFieldEnum[]
  }

  /**
   * equipment without action
   */
  export type equipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the equipment
     */
    select?: equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the equipment
     */
    omit?: equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: equipmentInclude<ExtArgs> | null
  }


  /**
   * Model exercise_equipment
   */

  export type AggregateExercise_equipment = {
    _count: Exercise_equipmentCountAggregateOutputType | null
    _avg: Exercise_equipmentAvgAggregateOutputType | null
    _sum: Exercise_equipmentSumAggregateOutputType | null
    _min: Exercise_equipmentMinAggregateOutputType | null
    _max: Exercise_equipmentMaxAggregateOutputType | null
  }

  export type Exercise_equipmentAvgAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    equipment_id: number | null
  }

  export type Exercise_equipmentSumAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    equipment_id: number | null
  }

  export type Exercise_equipmentMinAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    equipment_id: number | null
  }

  export type Exercise_equipmentMaxAggregateOutputType = {
    id: number | null
    exercise_id: number | null
    equipment_id: number | null
  }

  export type Exercise_equipmentCountAggregateOutputType = {
    id: number
    exercise_id: number
    equipment_id: number
    _all: number
  }


  export type Exercise_equipmentAvgAggregateInputType = {
    id?: true
    exercise_id?: true
    equipment_id?: true
  }

  export type Exercise_equipmentSumAggregateInputType = {
    id?: true
    exercise_id?: true
    equipment_id?: true
  }

  export type Exercise_equipmentMinAggregateInputType = {
    id?: true
    exercise_id?: true
    equipment_id?: true
  }

  export type Exercise_equipmentMaxAggregateInputType = {
    id?: true
    exercise_id?: true
    equipment_id?: true
  }

  export type Exercise_equipmentCountAggregateInputType = {
    id?: true
    exercise_id?: true
    equipment_id?: true
    _all?: true
  }

  export type Exercise_equipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_equipment to aggregate.
     */
    where?: exercise_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_equipments to fetch.
     */
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: exercise_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned exercise_equipments
    **/
    _count?: true | Exercise_equipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Exercise_equipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Exercise_equipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Exercise_equipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Exercise_equipmentMaxAggregateInputType
  }

  export type GetExercise_equipmentAggregateType<T extends Exercise_equipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateExercise_equipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercise_equipment[P]>
      : GetScalarType<T[P], AggregateExercise_equipment[P]>
  }




  export type exercise_equipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: exercise_equipmentWhereInput
    orderBy?: exercise_equipmentOrderByWithAggregationInput | exercise_equipmentOrderByWithAggregationInput[]
    by: Exercise_equipmentScalarFieldEnum[] | Exercise_equipmentScalarFieldEnum
    having?: exercise_equipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Exercise_equipmentCountAggregateInputType | true
    _avg?: Exercise_equipmentAvgAggregateInputType
    _sum?: Exercise_equipmentSumAggregateInputType
    _min?: Exercise_equipmentMinAggregateInputType
    _max?: Exercise_equipmentMaxAggregateInputType
  }

  export type Exercise_equipmentGroupByOutputType = {
    id: number
    exercise_id: number
    equipment_id: number
    _count: Exercise_equipmentCountAggregateOutputType | null
    _avg: Exercise_equipmentAvgAggregateOutputType | null
    _sum: Exercise_equipmentSumAggregateOutputType | null
    _min: Exercise_equipmentMinAggregateOutputType | null
    _max: Exercise_equipmentMaxAggregateOutputType | null
  }

  type GetExercise_equipmentGroupByPayload<T extends exercise_equipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Exercise_equipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Exercise_equipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Exercise_equipmentGroupByOutputType[P]>
            : GetScalarType<T[P], Exercise_equipmentGroupByOutputType[P]>
        }
      >
    >


  export type exercise_equipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    equipment_id?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_equipment"]>

  export type exercise_equipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    equipment_id?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_equipment"]>

  export type exercise_equipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise_id?: boolean
    equipment_id?: boolean
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exercise_equipment"]>

  export type exercise_equipmentSelectScalar = {
    id?: boolean
    exercise_id?: boolean
    equipment_id?: boolean
  }

  export type exercise_equipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "exercise_id" | "equipment_id", ExtArgs["result"]["exercise_equipment"]>
  export type exercise_equipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }
  export type exercise_equipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }
  export type exercise_equipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exercise?: boolean | exerciseDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }

  export type $exercise_equipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "exercise_equipment"
    objects: {
      exercise: Prisma.$exercisePayload<ExtArgs>
      equipment: Prisma.$equipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      exercise_id: number
      equipment_id: number
    }, ExtArgs["result"]["exercise_equipment"]>
    composites: {}
  }

  type exercise_equipmentGetPayload<S extends boolean | null | undefined | exercise_equipmentDefaultArgs> = $Result.GetResult<Prisma.$exercise_equipmentPayload, S>

  type exercise_equipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<exercise_equipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Exercise_equipmentCountAggregateInputType | true
    }

  export interface exercise_equipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['exercise_equipment'], meta: { name: 'exercise_equipment' } }
    /**
     * Find zero or one Exercise_equipment that matches the filter.
     * @param {exercise_equipmentFindUniqueArgs} args - Arguments to find a Exercise_equipment
     * @example
     * // Get one Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends exercise_equipmentFindUniqueArgs>(args: SelectSubset<T, exercise_equipmentFindUniqueArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Exercise_equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {exercise_equipmentFindUniqueOrThrowArgs} args - Arguments to find a Exercise_equipment
     * @example
     * // Get one Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends exercise_equipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, exercise_equipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentFindFirstArgs} args - Arguments to find a Exercise_equipment
     * @example
     * // Get one Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends exercise_equipmentFindFirstArgs>(args?: SelectSubset<T, exercise_equipmentFindFirstArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Exercise_equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentFindFirstOrThrowArgs} args - Arguments to find a Exercise_equipment
     * @example
     * // Get one Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends exercise_equipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, exercise_equipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Exercise_equipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercise_equipments
     * const exercise_equipments = await prisma.exercise_equipment.findMany()
     * 
     * // Get first 10 Exercise_equipments
     * const exercise_equipments = await prisma.exercise_equipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercise_equipmentWithIdOnly = await prisma.exercise_equipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends exercise_equipmentFindManyArgs>(args?: SelectSubset<T, exercise_equipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Exercise_equipment.
     * @param {exercise_equipmentCreateArgs} args - Arguments to create a Exercise_equipment.
     * @example
     * // Create one Exercise_equipment
     * const Exercise_equipment = await prisma.exercise_equipment.create({
     *   data: {
     *     // ... data to create a Exercise_equipment
     *   }
     * })
     * 
     */
    create<T extends exercise_equipmentCreateArgs>(args: SelectSubset<T, exercise_equipmentCreateArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Exercise_equipments.
     * @param {exercise_equipmentCreateManyArgs} args - Arguments to create many Exercise_equipments.
     * @example
     * // Create many Exercise_equipments
     * const exercise_equipment = await prisma.exercise_equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends exercise_equipmentCreateManyArgs>(args?: SelectSubset<T, exercise_equipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Exercise_equipments and returns the data saved in the database.
     * @param {exercise_equipmentCreateManyAndReturnArgs} args - Arguments to create many Exercise_equipments.
     * @example
     * // Create many Exercise_equipments
     * const exercise_equipment = await prisma.exercise_equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Exercise_equipments and only return the `id`
     * const exercise_equipmentWithIdOnly = await prisma.exercise_equipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends exercise_equipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, exercise_equipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Exercise_equipment.
     * @param {exercise_equipmentDeleteArgs} args - Arguments to delete one Exercise_equipment.
     * @example
     * // Delete one Exercise_equipment
     * const Exercise_equipment = await prisma.exercise_equipment.delete({
     *   where: {
     *     // ... filter to delete one Exercise_equipment
     *   }
     * })
     * 
     */
    delete<T extends exercise_equipmentDeleteArgs>(args: SelectSubset<T, exercise_equipmentDeleteArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Exercise_equipment.
     * @param {exercise_equipmentUpdateArgs} args - Arguments to update one Exercise_equipment.
     * @example
     * // Update one Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends exercise_equipmentUpdateArgs>(args: SelectSubset<T, exercise_equipmentUpdateArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Exercise_equipments.
     * @param {exercise_equipmentDeleteManyArgs} args - Arguments to filter Exercise_equipments to delete.
     * @example
     * // Delete a few Exercise_equipments
     * const { count } = await prisma.exercise_equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends exercise_equipmentDeleteManyArgs>(args?: SelectSubset<T, exercise_equipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercise_equipments
     * const exercise_equipment = await prisma.exercise_equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends exercise_equipmentUpdateManyArgs>(args: SelectSubset<T, exercise_equipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercise_equipments and returns the data updated in the database.
     * @param {exercise_equipmentUpdateManyAndReturnArgs} args - Arguments to update many Exercise_equipments.
     * @example
     * // Update many Exercise_equipments
     * const exercise_equipment = await prisma.exercise_equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Exercise_equipments and only return the `id`
     * const exercise_equipmentWithIdOnly = await prisma.exercise_equipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends exercise_equipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, exercise_equipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Exercise_equipment.
     * @param {exercise_equipmentUpsertArgs} args - Arguments to update or create a Exercise_equipment.
     * @example
     * // Update or create a Exercise_equipment
     * const exercise_equipment = await prisma.exercise_equipment.upsert({
     *   create: {
     *     // ... data to create a Exercise_equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercise_equipment we want to update
     *   }
     * })
     */
    upsert<T extends exercise_equipmentUpsertArgs>(args: SelectSubset<T, exercise_equipmentUpsertArgs<ExtArgs>>): Prisma__exercise_equipmentClient<$Result.GetResult<Prisma.$exercise_equipmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Exercise_equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentCountArgs} args - Arguments to filter Exercise_equipments to count.
     * @example
     * // Count the number of Exercise_equipments
     * const count = await prisma.exercise_equipment.count({
     *   where: {
     *     // ... the filter for the Exercise_equipments we want to count
     *   }
     * })
    **/
    count<T extends exercise_equipmentCountArgs>(
      args?: Subset<T, exercise_equipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Exercise_equipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercise_equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Exercise_equipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Exercise_equipmentAggregateArgs>(args: Subset<T, Exercise_equipmentAggregateArgs>): Prisma.PrismaPromise<GetExercise_equipmentAggregateType<T>>

    /**
     * Group by Exercise_equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {exercise_equipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends exercise_equipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: exercise_equipmentGroupByArgs['orderBy'] }
        : { orderBy?: exercise_equipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, exercise_equipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercise_equipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the exercise_equipment model
   */
  readonly fields: exercise_equipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for exercise_equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__exercise_equipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    exercise<T extends exerciseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, exerciseDefaultArgs<ExtArgs>>): Prisma__exerciseClient<$Result.GetResult<Prisma.$exercisePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    equipment<T extends equipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, equipmentDefaultArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the exercise_equipment model
   */ 
  interface exercise_equipmentFieldRefs {
    readonly id: FieldRef<"exercise_equipment", 'Int'>
    readonly exercise_id: FieldRef<"exercise_equipment", 'Int'>
    readonly equipment_id: FieldRef<"exercise_equipment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * exercise_equipment findUnique
   */
  export type exercise_equipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which exercise_equipment to fetch.
     */
    where: exercise_equipmentWhereUniqueInput
  }

  /**
   * exercise_equipment findUniqueOrThrow
   */
  export type exercise_equipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which exercise_equipment to fetch.
     */
    where: exercise_equipmentWhereUniqueInput
  }

  /**
   * exercise_equipment findFirst
   */
  export type exercise_equipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which exercise_equipment to fetch.
     */
    where?: exercise_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_equipments to fetch.
     */
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_equipments.
     */
    cursor?: exercise_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_equipments.
     */
    distinct?: Exercise_equipmentScalarFieldEnum | Exercise_equipmentScalarFieldEnum[]
  }

  /**
   * exercise_equipment findFirstOrThrow
   */
  export type exercise_equipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which exercise_equipment to fetch.
     */
    where?: exercise_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_equipments to fetch.
     */
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for exercise_equipments.
     */
    cursor?: exercise_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of exercise_equipments.
     */
    distinct?: Exercise_equipmentScalarFieldEnum | Exercise_equipmentScalarFieldEnum[]
  }

  /**
   * exercise_equipment findMany
   */
  export type exercise_equipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which exercise_equipments to fetch.
     */
    where?: exercise_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of exercise_equipments to fetch.
     */
    orderBy?: exercise_equipmentOrderByWithRelationInput | exercise_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing exercise_equipments.
     */
    cursor?: exercise_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` exercise_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` exercise_equipments.
     */
    skip?: number
    distinct?: Exercise_equipmentScalarFieldEnum | Exercise_equipmentScalarFieldEnum[]
  }

  /**
   * exercise_equipment create
   */
  export type exercise_equipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a exercise_equipment.
     */
    data: XOR<exercise_equipmentCreateInput, exercise_equipmentUncheckedCreateInput>
  }

  /**
   * exercise_equipment createMany
   */
  export type exercise_equipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many exercise_equipments.
     */
    data: exercise_equipmentCreateManyInput | exercise_equipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * exercise_equipment createManyAndReturn
   */
  export type exercise_equipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * The data used to create many exercise_equipments.
     */
    data: exercise_equipmentCreateManyInput | exercise_equipmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_equipment update
   */
  export type exercise_equipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a exercise_equipment.
     */
    data: XOR<exercise_equipmentUpdateInput, exercise_equipmentUncheckedUpdateInput>
    /**
     * Choose, which exercise_equipment to update.
     */
    where: exercise_equipmentWhereUniqueInput
  }

  /**
   * exercise_equipment updateMany
   */
  export type exercise_equipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update exercise_equipments.
     */
    data: XOR<exercise_equipmentUpdateManyMutationInput, exercise_equipmentUncheckedUpdateManyInput>
    /**
     * Filter which exercise_equipments to update
     */
    where?: exercise_equipmentWhereInput
    limit?: number
  }

  /**
   * exercise_equipment updateManyAndReturn
   */
  export type exercise_equipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * The data used to update exercise_equipments.
     */
    data: XOR<exercise_equipmentUpdateManyMutationInput, exercise_equipmentUncheckedUpdateManyInput>
    /**
     * Filter which exercise_equipments to update
     */
    where?: exercise_equipmentWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * exercise_equipment upsert
   */
  export type exercise_equipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the exercise_equipment to update in case it exists.
     */
    where: exercise_equipmentWhereUniqueInput
    /**
     * In case the exercise_equipment found by the `where` argument doesn't exist, create a new exercise_equipment with this data.
     */
    create: XOR<exercise_equipmentCreateInput, exercise_equipmentUncheckedCreateInput>
    /**
     * In case the exercise_equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<exercise_equipmentUpdateInput, exercise_equipmentUncheckedUpdateInput>
  }

  /**
   * exercise_equipment delete
   */
  export type exercise_equipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
    /**
     * Filter which exercise_equipment to delete.
     */
    where: exercise_equipmentWhereUniqueInput
  }

  /**
   * exercise_equipment deleteMany
   */
  export type exercise_equipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which exercise_equipments to delete
     */
    where?: exercise_equipmentWhereInput
    limit?: number
  }

  /**
   * exercise_equipment without action
   */
  export type exercise_equipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the exercise_equipment
     */
    select?: exercise_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the exercise_equipment
     */
    omit?: exercise_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: exercise_equipmentInclude<ExtArgs> | null
  }


  /**
   * Model user_equipment
   */

  export type AggregateUser_equipment = {
    _count: User_equipmentCountAggregateOutputType | null
    _avg: User_equipmentAvgAggregateOutputType | null
    _sum: User_equipmentSumAggregateOutputType | null
    _min: User_equipmentMinAggregateOutputType | null
    _max: User_equipmentMaxAggregateOutputType | null
  }

  export type User_equipmentAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    equipment_id: number | null
  }

  export type User_equipmentSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    equipment_id: number | null
  }

  export type User_equipmentMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    equipment_id: number | null
  }

  export type User_equipmentMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    equipment_id: number | null
  }

  export type User_equipmentCountAggregateOutputType = {
    id: number
    user_id: number
    equipment_id: number
    _all: number
  }


  export type User_equipmentAvgAggregateInputType = {
    id?: true
    user_id?: true
    equipment_id?: true
  }

  export type User_equipmentSumAggregateInputType = {
    id?: true
    user_id?: true
    equipment_id?: true
  }

  export type User_equipmentMinAggregateInputType = {
    id?: true
    user_id?: true
    equipment_id?: true
  }

  export type User_equipmentMaxAggregateInputType = {
    id?: true
    user_id?: true
    equipment_id?: true
  }

  export type User_equipmentCountAggregateInputType = {
    id?: true
    user_id?: true
    equipment_id?: true
    _all?: true
  }

  export type User_equipmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_equipment to aggregate.
     */
    where?: user_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_equipments to fetch.
     */
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_equipments
    **/
    _count?: true | User_equipmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_equipmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_equipmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_equipmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_equipmentMaxAggregateInputType
  }

  export type GetUser_equipmentAggregateType<T extends User_equipmentAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_equipment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_equipment[P]>
      : GetScalarType<T[P], AggregateUser_equipment[P]>
  }




  export type user_equipmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_equipmentWhereInput
    orderBy?: user_equipmentOrderByWithAggregationInput | user_equipmentOrderByWithAggregationInput[]
    by: User_equipmentScalarFieldEnum[] | User_equipmentScalarFieldEnum
    having?: user_equipmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_equipmentCountAggregateInputType | true
    _avg?: User_equipmentAvgAggregateInputType
    _sum?: User_equipmentSumAggregateInputType
    _min?: User_equipmentMinAggregateInputType
    _max?: User_equipmentMaxAggregateInputType
  }

  export type User_equipmentGroupByOutputType = {
    id: number
    user_id: number
    equipment_id: number
    _count: User_equipmentCountAggregateOutputType | null
    _avg: User_equipmentAvgAggregateOutputType | null
    _sum: User_equipmentSumAggregateOutputType | null
    _min: User_equipmentMinAggregateOutputType | null
    _max: User_equipmentMaxAggregateOutputType | null
  }

  type GetUser_equipmentGroupByPayload<T extends user_equipmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_equipmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_equipmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_equipmentGroupByOutputType[P]>
            : GetScalarType<T[P], User_equipmentGroupByOutputType[P]>
        }
      >
    >


  export type user_equipmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    equipment_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_equipment"]>

  export type user_equipmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    equipment_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_equipment"]>

  export type user_equipmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    equipment_id?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_equipment"]>

  export type user_equipmentSelectScalar = {
    id?: boolean
    user_id?: boolean
    equipment_id?: boolean
  }

  export type user_equipmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "equipment_id", ExtArgs["result"]["user_equipment"]>
  export type user_equipmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }
  export type user_equipmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }
  export type user_equipmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    equipment?: boolean | equipmentDefaultArgs<ExtArgs>
  }

  export type $user_equipmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_equipment"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      equipment: Prisma.$equipmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      equipment_id: number
    }, ExtArgs["result"]["user_equipment"]>
    composites: {}
  }

  type user_equipmentGetPayload<S extends boolean | null | undefined | user_equipmentDefaultArgs> = $Result.GetResult<Prisma.$user_equipmentPayload, S>

  type user_equipmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_equipmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_equipmentCountAggregateInputType | true
    }

  export interface user_equipmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_equipment'], meta: { name: 'user_equipment' } }
    /**
     * Find zero or one User_equipment that matches the filter.
     * @param {user_equipmentFindUniqueArgs} args - Arguments to find a User_equipment
     * @example
     * // Get one User_equipment
     * const user_equipment = await prisma.user_equipment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_equipmentFindUniqueArgs>(args: SelectSubset<T, user_equipmentFindUniqueArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User_equipment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_equipmentFindUniqueOrThrowArgs} args - Arguments to find a User_equipment
     * @example
     * // Get one User_equipment
     * const user_equipment = await prisma.user_equipment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_equipmentFindUniqueOrThrowArgs>(args: SelectSubset<T, user_equipmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User_equipment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentFindFirstArgs} args - Arguments to find a User_equipment
     * @example
     * // Get one User_equipment
     * const user_equipment = await prisma.user_equipment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_equipmentFindFirstArgs>(args?: SelectSubset<T, user_equipmentFindFirstArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User_equipment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentFindFirstOrThrowArgs} args - Arguments to find a User_equipment
     * @example
     * // Get one User_equipment
     * const user_equipment = await prisma.user_equipment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_equipmentFindFirstOrThrowArgs>(args?: SelectSubset<T, user_equipmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more User_equipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_equipments
     * const user_equipments = await prisma.user_equipment.findMany()
     * 
     * // Get first 10 User_equipments
     * const user_equipments = await prisma.user_equipment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_equipmentWithIdOnly = await prisma.user_equipment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_equipmentFindManyArgs>(args?: SelectSubset<T, user_equipmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User_equipment.
     * @param {user_equipmentCreateArgs} args - Arguments to create a User_equipment.
     * @example
     * // Create one User_equipment
     * const User_equipment = await prisma.user_equipment.create({
     *   data: {
     *     // ... data to create a User_equipment
     *   }
     * })
     * 
     */
    create<T extends user_equipmentCreateArgs>(args: SelectSubset<T, user_equipmentCreateArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many User_equipments.
     * @param {user_equipmentCreateManyArgs} args - Arguments to create many User_equipments.
     * @example
     * // Create many User_equipments
     * const user_equipment = await prisma.user_equipment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_equipmentCreateManyArgs>(args?: SelectSubset<T, user_equipmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_equipments and returns the data saved in the database.
     * @param {user_equipmentCreateManyAndReturnArgs} args - Arguments to create many User_equipments.
     * @example
     * // Create many User_equipments
     * const user_equipment = await prisma.user_equipment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_equipments and only return the `id`
     * const user_equipmentWithIdOnly = await prisma.user_equipment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_equipmentCreateManyAndReturnArgs>(args?: SelectSubset<T, user_equipmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User_equipment.
     * @param {user_equipmentDeleteArgs} args - Arguments to delete one User_equipment.
     * @example
     * // Delete one User_equipment
     * const User_equipment = await prisma.user_equipment.delete({
     *   where: {
     *     // ... filter to delete one User_equipment
     *   }
     * })
     * 
     */
    delete<T extends user_equipmentDeleteArgs>(args: SelectSubset<T, user_equipmentDeleteArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User_equipment.
     * @param {user_equipmentUpdateArgs} args - Arguments to update one User_equipment.
     * @example
     * // Update one User_equipment
     * const user_equipment = await prisma.user_equipment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_equipmentUpdateArgs>(args: SelectSubset<T, user_equipmentUpdateArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more User_equipments.
     * @param {user_equipmentDeleteManyArgs} args - Arguments to filter User_equipments to delete.
     * @example
     * // Delete a few User_equipments
     * const { count } = await prisma.user_equipment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_equipmentDeleteManyArgs>(args?: SelectSubset<T, user_equipmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_equipments
     * const user_equipment = await prisma.user_equipment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_equipmentUpdateManyArgs>(args: SelectSubset<T, user_equipmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_equipments and returns the data updated in the database.
     * @param {user_equipmentUpdateManyAndReturnArgs} args - Arguments to update many User_equipments.
     * @example
     * // Update many User_equipments
     * const user_equipment = await prisma.user_equipment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_equipments and only return the `id`
     * const user_equipmentWithIdOnly = await prisma.user_equipment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_equipmentUpdateManyAndReturnArgs>(args: SelectSubset<T, user_equipmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User_equipment.
     * @param {user_equipmentUpsertArgs} args - Arguments to update or create a User_equipment.
     * @example
     * // Update or create a User_equipment
     * const user_equipment = await prisma.user_equipment.upsert({
     *   create: {
     *     // ... data to create a User_equipment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_equipment we want to update
     *   }
     * })
     */
    upsert<T extends user_equipmentUpsertArgs>(args: SelectSubset<T, user_equipmentUpsertArgs<ExtArgs>>): Prisma__user_equipmentClient<$Result.GetResult<Prisma.$user_equipmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of User_equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentCountArgs} args - Arguments to filter User_equipments to count.
     * @example
     * // Count the number of User_equipments
     * const count = await prisma.user_equipment.count({
     *   where: {
     *     // ... the filter for the User_equipments we want to count
     *   }
     * })
    **/
    count<T extends user_equipmentCountArgs>(
      args?: Subset<T, user_equipmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_equipmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_equipmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_equipmentAggregateArgs>(args: Subset<T, User_equipmentAggregateArgs>): Prisma.PrismaPromise<GetUser_equipmentAggregateType<T>>

    /**
     * Group by User_equipment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_equipmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_equipmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_equipmentGroupByArgs['orderBy'] }
        : { orderBy?: user_equipmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_equipmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_equipmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_equipment model
   */
  readonly fields: user_equipmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_equipment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_equipmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    equipment<T extends equipmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, equipmentDefaultArgs<ExtArgs>>): Prisma__equipmentClient<$Result.GetResult<Prisma.$equipmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_equipment model
   */ 
  interface user_equipmentFieldRefs {
    readonly id: FieldRef<"user_equipment", 'Int'>
    readonly user_id: FieldRef<"user_equipment", 'Int'>
    readonly equipment_id: FieldRef<"user_equipment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user_equipment findUnique
   */
  export type user_equipmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which user_equipment to fetch.
     */
    where: user_equipmentWhereUniqueInput
  }

  /**
   * user_equipment findUniqueOrThrow
   */
  export type user_equipmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which user_equipment to fetch.
     */
    where: user_equipmentWhereUniqueInput
  }

  /**
   * user_equipment findFirst
   */
  export type user_equipmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which user_equipment to fetch.
     */
    where?: user_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_equipments to fetch.
     */
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_equipments.
     */
    cursor?: user_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_equipments.
     */
    distinct?: User_equipmentScalarFieldEnum | User_equipmentScalarFieldEnum[]
  }

  /**
   * user_equipment findFirstOrThrow
   */
  export type user_equipmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which user_equipment to fetch.
     */
    where?: user_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_equipments to fetch.
     */
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_equipments.
     */
    cursor?: user_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_equipments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_equipments.
     */
    distinct?: User_equipmentScalarFieldEnum | User_equipmentScalarFieldEnum[]
  }

  /**
   * user_equipment findMany
   */
  export type user_equipmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter, which user_equipments to fetch.
     */
    where?: user_equipmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_equipments to fetch.
     */
    orderBy?: user_equipmentOrderByWithRelationInput | user_equipmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_equipments.
     */
    cursor?: user_equipmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_equipments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_equipments.
     */
    skip?: number
    distinct?: User_equipmentScalarFieldEnum | User_equipmentScalarFieldEnum[]
  }

  /**
   * user_equipment create
   */
  export type user_equipmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * The data needed to create a user_equipment.
     */
    data: XOR<user_equipmentCreateInput, user_equipmentUncheckedCreateInput>
  }

  /**
   * user_equipment createMany
   */
  export type user_equipmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_equipments.
     */
    data: user_equipmentCreateManyInput | user_equipmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_equipment createManyAndReturn
   */
  export type user_equipmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * The data used to create many user_equipments.
     */
    data: user_equipmentCreateManyInput | user_equipmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_equipment update
   */
  export type user_equipmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * The data needed to update a user_equipment.
     */
    data: XOR<user_equipmentUpdateInput, user_equipmentUncheckedUpdateInput>
    /**
     * Choose, which user_equipment to update.
     */
    where: user_equipmentWhereUniqueInput
  }

  /**
   * user_equipment updateMany
   */
  export type user_equipmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_equipments.
     */
    data: XOR<user_equipmentUpdateManyMutationInput, user_equipmentUncheckedUpdateManyInput>
    /**
     * Filter which user_equipments to update
     */
    where?: user_equipmentWhereInput
    limit?: number
  }

  /**
   * user_equipment updateManyAndReturn
   */
  export type user_equipmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * The data used to update user_equipments.
     */
    data: XOR<user_equipmentUpdateManyMutationInput, user_equipmentUncheckedUpdateManyInput>
    /**
     * Filter which user_equipments to update
     */
    where?: user_equipmentWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_equipment upsert
   */
  export type user_equipmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * The filter to search for the user_equipment to update in case it exists.
     */
    where: user_equipmentWhereUniqueInput
    /**
     * In case the user_equipment found by the `where` argument doesn't exist, create a new user_equipment with this data.
     */
    create: XOR<user_equipmentCreateInput, user_equipmentUncheckedCreateInput>
    /**
     * In case the user_equipment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_equipmentUpdateInput, user_equipmentUncheckedUpdateInput>
  }

  /**
   * user_equipment delete
   */
  export type user_equipmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
    /**
     * Filter which user_equipment to delete.
     */
    where: user_equipmentWhereUniqueInput
  }

  /**
   * user_equipment deleteMany
   */
  export type user_equipmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_equipments to delete
     */
    where?: user_equipmentWhereInput
    limit?: number
  }

  /**
   * user_equipment without action
   */
  export type user_equipmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_equipment
     */
    select?: user_equipmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_equipment
     */
    omit?: user_equipmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_equipmentInclude<ExtArgs> | null
  }


  /**
   * Model workout_per_week_workout
   */

  export type AggregateWorkout_per_week_workout = {
    _count: Workout_per_week_workoutCountAggregateOutputType | null
    _avg: Workout_per_week_workoutAvgAggregateOutputType | null
    _sum: Workout_per_week_workoutSumAggregateOutputType | null
    _min: Workout_per_week_workoutMinAggregateOutputType | null
    _max: Workout_per_week_workoutMaxAggregateOutputType | null
  }

  export type Workout_per_week_workoutAvgAggregateOutputType = {
    id: number | null
    workout_id: number | null
    workoutperweek_id: number | null
  }

  export type Workout_per_week_workoutSumAggregateOutputType = {
    id: number | null
    workout_id: number | null
    workoutperweek_id: number | null
  }

  export type Workout_per_week_workoutMinAggregateOutputType = {
    id: number | null
    workout_id: number | null
    workoutperweek_id: number | null
  }

  export type Workout_per_week_workoutMaxAggregateOutputType = {
    id: number | null
    workout_id: number | null
    workoutperweek_id: number | null
  }

  export type Workout_per_week_workoutCountAggregateOutputType = {
    id: number
    workout_id: number
    workoutperweek_id: number
    _all: number
  }


  export type Workout_per_week_workoutAvgAggregateInputType = {
    id?: true
    workout_id?: true
    workoutperweek_id?: true
  }

  export type Workout_per_week_workoutSumAggregateInputType = {
    id?: true
    workout_id?: true
    workoutperweek_id?: true
  }

  export type Workout_per_week_workoutMinAggregateInputType = {
    id?: true
    workout_id?: true
    workoutperweek_id?: true
  }

  export type Workout_per_week_workoutMaxAggregateInputType = {
    id?: true
    workout_id?: true
    workoutperweek_id?: true
  }

  export type Workout_per_week_workoutCountAggregateInputType = {
    id?: true
    workout_id?: true
    workoutperweek_id?: true
    _all?: true
  }

  export type Workout_per_week_workoutAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_per_week_workout to aggregate.
     */
    where?: workout_per_week_workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_per_week_workouts to fetch.
     */
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: workout_per_week_workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_per_week_workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_per_week_workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned workout_per_week_workouts
    **/
    _count?: true | Workout_per_week_workoutCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Workout_per_week_workoutAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Workout_per_week_workoutSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Workout_per_week_workoutMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Workout_per_week_workoutMaxAggregateInputType
  }

  export type GetWorkout_per_week_workoutAggregateType<T extends Workout_per_week_workoutAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkout_per_week_workout]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkout_per_week_workout[P]>
      : GetScalarType<T[P], AggregateWorkout_per_week_workout[P]>
  }




  export type workout_per_week_workoutGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: workout_per_week_workoutWhereInput
    orderBy?: workout_per_week_workoutOrderByWithAggregationInput | workout_per_week_workoutOrderByWithAggregationInput[]
    by: Workout_per_week_workoutScalarFieldEnum[] | Workout_per_week_workoutScalarFieldEnum
    having?: workout_per_week_workoutScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Workout_per_week_workoutCountAggregateInputType | true
    _avg?: Workout_per_week_workoutAvgAggregateInputType
    _sum?: Workout_per_week_workoutSumAggregateInputType
    _min?: Workout_per_week_workoutMinAggregateInputType
    _max?: Workout_per_week_workoutMaxAggregateInputType
  }

  export type Workout_per_week_workoutGroupByOutputType = {
    id: number
    workout_id: number
    workoutperweek_id: number
    _count: Workout_per_week_workoutCountAggregateOutputType | null
    _avg: Workout_per_week_workoutAvgAggregateOutputType | null
    _sum: Workout_per_week_workoutSumAggregateOutputType | null
    _min: Workout_per_week_workoutMinAggregateOutputType | null
    _max: Workout_per_week_workoutMaxAggregateOutputType | null
  }

  type GetWorkout_per_week_workoutGroupByPayload<T extends workout_per_week_workoutGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Workout_per_week_workoutGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Workout_per_week_workoutGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Workout_per_week_workoutGroupByOutputType[P]>
            : GetScalarType<T[P], Workout_per_week_workoutGroupByOutputType[P]>
        }
      >
    >


  export type workout_per_week_workoutSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    workoutperweek_id?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_per_week_workout"]>

  export type workout_per_week_workoutSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    workoutperweek_id?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_per_week_workout"]>

  export type workout_per_week_workoutSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workout_id?: boolean
    workoutperweek_id?: boolean
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workout_per_week_workout"]>

  export type workout_per_week_workoutSelectScalar = {
    id?: boolean
    workout_id?: boolean
    workoutperweek_id?: boolean
  }

  export type workout_per_week_workoutOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workout_id" | "workoutperweek_id", ExtArgs["result"]["workout_per_week_workout"]>
  export type workout_per_week_workoutInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }
  export type workout_per_week_workoutIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }
  export type workout_per_week_workoutIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workout?: boolean | workoutDefaultArgs<ExtArgs>
    workoutperweek?: boolean | workoutperweekDefaultArgs<ExtArgs>
  }

  export type $workout_per_week_workoutPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "workout_per_week_workout"
    objects: {
      workout: Prisma.$workoutPayload<ExtArgs>
      workoutperweek: Prisma.$workoutperweekPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workout_id: number
      workoutperweek_id: number
    }, ExtArgs["result"]["workout_per_week_workout"]>
    composites: {}
  }

  type workout_per_week_workoutGetPayload<S extends boolean | null | undefined | workout_per_week_workoutDefaultArgs> = $Result.GetResult<Prisma.$workout_per_week_workoutPayload, S>

  type workout_per_week_workoutCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<workout_per_week_workoutFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Workout_per_week_workoutCountAggregateInputType | true
    }

  export interface workout_per_week_workoutDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['workout_per_week_workout'], meta: { name: 'workout_per_week_workout' } }
    /**
     * Find zero or one Workout_per_week_workout that matches the filter.
     * @param {workout_per_week_workoutFindUniqueArgs} args - Arguments to find a Workout_per_week_workout
     * @example
     * // Get one Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends workout_per_week_workoutFindUniqueArgs>(args: SelectSubset<T, workout_per_week_workoutFindUniqueArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Workout_per_week_workout that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {workout_per_week_workoutFindUniqueOrThrowArgs} args - Arguments to find a Workout_per_week_workout
     * @example
     * // Get one Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends workout_per_week_workoutFindUniqueOrThrowArgs>(args: SelectSubset<T, workout_per_week_workoutFindUniqueOrThrowArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_per_week_workout that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutFindFirstArgs} args - Arguments to find a Workout_per_week_workout
     * @example
     * // Get one Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends workout_per_week_workoutFindFirstArgs>(args?: SelectSubset<T, workout_per_week_workoutFindFirstArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Workout_per_week_workout that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutFindFirstOrThrowArgs} args - Arguments to find a Workout_per_week_workout
     * @example
     * // Get one Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends workout_per_week_workoutFindFirstOrThrowArgs>(args?: SelectSubset<T, workout_per_week_workoutFindFirstOrThrowArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Workout_per_week_workouts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Workout_per_week_workouts
     * const workout_per_week_workouts = await prisma.workout_per_week_workout.findMany()
     * 
     * // Get first 10 Workout_per_week_workouts
     * const workout_per_week_workouts = await prisma.workout_per_week_workout.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workout_per_week_workoutWithIdOnly = await prisma.workout_per_week_workout.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends workout_per_week_workoutFindManyArgs>(args?: SelectSubset<T, workout_per_week_workoutFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Workout_per_week_workout.
     * @param {workout_per_week_workoutCreateArgs} args - Arguments to create a Workout_per_week_workout.
     * @example
     * // Create one Workout_per_week_workout
     * const Workout_per_week_workout = await prisma.workout_per_week_workout.create({
     *   data: {
     *     // ... data to create a Workout_per_week_workout
     *   }
     * })
     * 
     */
    create<T extends workout_per_week_workoutCreateArgs>(args: SelectSubset<T, workout_per_week_workoutCreateArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Workout_per_week_workouts.
     * @param {workout_per_week_workoutCreateManyArgs} args - Arguments to create many Workout_per_week_workouts.
     * @example
     * // Create many Workout_per_week_workouts
     * const workout_per_week_workout = await prisma.workout_per_week_workout.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends workout_per_week_workoutCreateManyArgs>(args?: SelectSubset<T, workout_per_week_workoutCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Workout_per_week_workouts and returns the data saved in the database.
     * @param {workout_per_week_workoutCreateManyAndReturnArgs} args - Arguments to create many Workout_per_week_workouts.
     * @example
     * // Create many Workout_per_week_workouts
     * const workout_per_week_workout = await prisma.workout_per_week_workout.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Workout_per_week_workouts and only return the `id`
     * const workout_per_week_workoutWithIdOnly = await prisma.workout_per_week_workout.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends workout_per_week_workoutCreateManyAndReturnArgs>(args?: SelectSubset<T, workout_per_week_workoutCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Workout_per_week_workout.
     * @param {workout_per_week_workoutDeleteArgs} args - Arguments to delete one Workout_per_week_workout.
     * @example
     * // Delete one Workout_per_week_workout
     * const Workout_per_week_workout = await prisma.workout_per_week_workout.delete({
     *   where: {
     *     // ... filter to delete one Workout_per_week_workout
     *   }
     * })
     * 
     */
    delete<T extends workout_per_week_workoutDeleteArgs>(args: SelectSubset<T, workout_per_week_workoutDeleteArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Workout_per_week_workout.
     * @param {workout_per_week_workoutUpdateArgs} args - Arguments to update one Workout_per_week_workout.
     * @example
     * // Update one Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends workout_per_week_workoutUpdateArgs>(args: SelectSubset<T, workout_per_week_workoutUpdateArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Workout_per_week_workouts.
     * @param {workout_per_week_workoutDeleteManyArgs} args - Arguments to filter Workout_per_week_workouts to delete.
     * @example
     * // Delete a few Workout_per_week_workouts
     * const { count } = await prisma.workout_per_week_workout.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends workout_per_week_workoutDeleteManyArgs>(args?: SelectSubset<T, workout_per_week_workoutDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_per_week_workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Workout_per_week_workouts
     * const workout_per_week_workout = await prisma.workout_per_week_workout.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends workout_per_week_workoutUpdateManyArgs>(args: SelectSubset<T, workout_per_week_workoutUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Workout_per_week_workouts and returns the data updated in the database.
     * @param {workout_per_week_workoutUpdateManyAndReturnArgs} args - Arguments to update many Workout_per_week_workouts.
     * @example
     * // Update many Workout_per_week_workouts
     * const workout_per_week_workout = await prisma.workout_per_week_workout.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Workout_per_week_workouts and only return the `id`
     * const workout_per_week_workoutWithIdOnly = await prisma.workout_per_week_workout.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends workout_per_week_workoutUpdateManyAndReturnArgs>(args: SelectSubset<T, workout_per_week_workoutUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Workout_per_week_workout.
     * @param {workout_per_week_workoutUpsertArgs} args - Arguments to update or create a Workout_per_week_workout.
     * @example
     * // Update or create a Workout_per_week_workout
     * const workout_per_week_workout = await prisma.workout_per_week_workout.upsert({
     *   create: {
     *     // ... data to create a Workout_per_week_workout
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Workout_per_week_workout we want to update
     *   }
     * })
     */
    upsert<T extends workout_per_week_workoutUpsertArgs>(args: SelectSubset<T, workout_per_week_workoutUpsertArgs<ExtArgs>>): Prisma__workout_per_week_workoutClient<$Result.GetResult<Prisma.$workout_per_week_workoutPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Workout_per_week_workouts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutCountArgs} args - Arguments to filter Workout_per_week_workouts to count.
     * @example
     * // Count the number of Workout_per_week_workouts
     * const count = await prisma.workout_per_week_workout.count({
     *   where: {
     *     // ... the filter for the Workout_per_week_workouts we want to count
     *   }
     * })
    **/
    count<T extends workout_per_week_workoutCountArgs>(
      args?: Subset<T, workout_per_week_workoutCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Workout_per_week_workoutCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Workout_per_week_workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Workout_per_week_workoutAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Workout_per_week_workoutAggregateArgs>(args: Subset<T, Workout_per_week_workoutAggregateArgs>): Prisma.PrismaPromise<GetWorkout_per_week_workoutAggregateType<T>>

    /**
     * Group by Workout_per_week_workout.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {workout_per_week_workoutGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends workout_per_week_workoutGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: workout_per_week_workoutGroupByArgs['orderBy'] }
        : { orderBy?: workout_per_week_workoutGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, workout_per_week_workoutGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkout_per_week_workoutGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the workout_per_week_workout model
   */
  readonly fields: workout_per_week_workoutFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for workout_per_week_workout.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__workout_per_week_workoutClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workout<T extends workoutDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workoutDefaultArgs<ExtArgs>>): Prisma__workoutClient<$Result.GetResult<Prisma.$workoutPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    workoutperweek<T extends workoutperweekDefaultArgs<ExtArgs> = {}>(args?: Subset<T, workoutperweekDefaultArgs<ExtArgs>>): Prisma__workoutperweekClient<$Result.GetResult<Prisma.$workoutperweekPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the workout_per_week_workout model
   */ 
  interface workout_per_week_workoutFieldRefs {
    readonly id: FieldRef<"workout_per_week_workout", 'Int'>
    readonly workout_id: FieldRef<"workout_per_week_workout", 'Int'>
    readonly workoutperweek_id: FieldRef<"workout_per_week_workout", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * workout_per_week_workout findUnique
   */
  export type workout_per_week_workoutFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout_per_week_workout to fetch.
     */
    where: workout_per_week_workoutWhereUniqueInput
  }

  /**
   * workout_per_week_workout findUniqueOrThrow
   */
  export type workout_per_week_workoutFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout_per_week_workout to fetch.
     */
    where: workout_per_week_workoutWhereUniqueInput
  }

  /**
   * workout_per_week_workout findFirst
   */
  export type workout_per_week_workoutFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout_per_week_workout to fetch.
     */
    where?: workout_per_week_workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_per_week_workouts to fetch.
     */
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_per_week_workouts.
     */
    cursor?: workout_per_week_workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_per_week_workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_per_week_workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_per_week_workouts.
     */
    distinct?: Workout_per_week_workoutScalarFieldEnum | Workout_per_week_workoutScalarFieldEnum[]
  }

  /**
   * workout_per_week_workout findFirstOrThrow
   */
  export type workout_per_week_workoutFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout_per_week_workout to fetch.
     */
    where?: workout_per_week_workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_per_week_workouts to fetch.
     */
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for workout_per_week_workouts.
     */
    cursor?: workout_per_week_workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_per_week_workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_per_week_workouts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of workout_per_week_workouts.
     */
    distinct?: Workout_per_week_workoutScalarFieldEnum | Workout_per_week_workoutScalarFieldEnum[]
  }

  /**
   * workout_per_week_workout findMany
   */
  export type workout_per_week_workoutFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter, which workout_per_week_workouts to fetch.
     */
    where?: workout_per_week_workoutWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of workout_per_week_workouts to fetch.
     */
    orderBy?: workout_per_week_workoutOrderByWithRelationInput | workout_per_week_workoutOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing workout_per_week_workouts.
     */
    cursor?: workout_per_week_workoutWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` workout_per_week_workouts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` workout_per_week_workouts.
     */
    skip?: number
    distinct?: Workout_per_week_workoutScalarFieldEnum | Workout_per_week_workoutScalarFieldEnum[]
  }

  /**
   * workout_per_week_workout create
   */
  export type workout_per_week_workoutCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * The data needed to create a workout_per_week_workout.
     */
    data: XOR<workout_per_week_workoutCreateInput, workout_per_week_workoutUncheckedCreateInput>
  }

  /**
   * workout_per_week_workout createMany
   */
  export type workout_per_week_workoutCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many workout_per_week_workouts.
     */
    data: workout_per_week_workoutCreateManyInput | workout_per_week_workoutCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * workout_per_week_workout createManyAndReturn
   */
  export type workout_per_week_workoutCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * The data used to create many workout_per_week_workouts.
     */
    data: workout_per_week_workoutCreateManyInput | workout_per_week_workoutCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_per_week_workout update
   */
  export type workout_per_week_workoutUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * The data needed to update a workout_per_week_workout.
     */
    data: XOR<workout_per_week_workoutUpdateInput, workout_per_week_workoutUncheckedUpdateInput>
    /**
     * Choose, which workout_per_week_workout to update.
     */
    where: workout_per_week_workoutWhereUniqueInput
  }

  /**
   * workout_per_week_workout updateMany
   */
  export type workout_per_week_workoutUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update workout_per_week_workouts.
     */
    data: XOR<workout_per_week_workoutUpdateManyMutationInput, workout_per_week_workoutUncheckedUpdateManyInput>
    /**
     * Filter which workout_per_week_workouts to update
     */
    where?: workout_per_week_workoutWhereInput
    limit?: number
  }

  /**
   * workout_per_week_workout updateManyAndReturn
   */
  export type workout_per_week_workoutUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * The data used to update workout_per_week_workouts.
     */
    data: XOR<workout_per_week_workoutUpdateManyMutationInput, workout_per_week_workoutUncheckedUpdateManyInput>
    /**
     * Filter which workout_per_week_workouts to update
     */
    where?: workout_per_week_workoutWhereInput
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * workout_per_week_workout upsert
   */
  export type workout_per_week_workoutUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * The filter to search for the workout_per_week_workout to update in case it exists.
     */
    where: workout_per_week_workoutWhereUniqueInput
    /**
     * In case the workout_per_week_workout found by the `where` argument doesn't exist, create a new workout_per_week_workout with this data.
     */
    create: XOR<workout_per_week_workoutCreateInput, workout_per_week_workoutUncheckedCreateInput>
    /**
     * In case the workout_per_week_workout was found with the provided `where` argument, update it with this data.
     */
    update: XOR<workout_per_week_workoutUpdateInput, workout_per_week_workoutUncheckedUpdateInput>
  }

  /**
   * workout_per_week_workout delete
   */
  export type workout_per_week_workoutDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
    /**
     * Filter which workout_per_week_workout to delete.
     */
    where: workout_per_week_workoutWhereUniqueInput
  }

  /**
   * workout_per_week_workout deleteMany
   */
  export type workout_per_week_workoutDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which workout_per_week_workouts to delete
     */
    where?: workout_per_week_workoutWhereInput
    limit?: number
  }

  /**
   * workout_per_week_workout without action
   */
  export type workout_per_week_workoutDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the workout_per_week_workout
     */
    select?: workout_per_week_workoutSelect<ExtArgs> | null
    /**
     * Omit specific fields from the workout_per_week_workout
     */
    omit?: workout_per_week_workoutOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: workout_per_week_workoutInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    height: 'height',
    weight: 'weight',
    days_of_workout: 'days_of_workout'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const User_availabilityScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    day: 'day',
    minutes: 'minutes'
  };

  export type User_availabilityScalarFieldEnum = (typeof User_availabilityScalarFieldEnum)[keyof typeof User_availabilityScalarFieldEnum]


  export const Workout_progressScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    workout_id: 'workout_id',
    date: 'date'
  };

  export type Workout_progressScalarFieldEnum = (typeof Workout_progressScalarFieldEnum)[keyof typeof Workout_progressScalarFieldEnum]


  export const Exercise_progressScalarFieldEnum: {
    id: 'id',
    workout_progress_id: 'workout_progress_id',
    workout_exercise_id: 'workout_exercise_id',
    sets: 'sets',
    reps: 'reps',
    weight_used: 'weight_used'
  };

  export type Exercise_progressScalarFieldEnum = (typeof Exercise_progressScalarFieldEnum)[keyof typeof Exercise_progressScalarFieldEnum]


  export const WorkoutperweekScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type WorkoutperweekScalarFieldEnum = (typeof WorkoutperweekScalarFieldEnum)[keyof typeof WorkoutperweekScalarFieldEnum]


  export const WorkoutScalarFieldEnum: {
    id: 'id',
    date: 'date',
    status: 'status'
  };

  export type WorkoutScalarFieldEnum = (typeof WorkoutScalarFieldEnum)[keyof typeof WorkoutScalarFieldEnum]


  export const Workout_exerciseScalarFieldEnum: {
    id: 'id',
    workout_id: 'workout_id',
    exercise_id: 'exercise_id',
    reps: 'reps',
    set: 'set',
    weight: 'weight'
  };

  export type Workout_exerciseScalarFieldEnum = (typeof Workout_exerciseScalarFieldEnum)[keyof typeof Workout_exerciseScalarFieldEnum]


  export const ExerciseScalarFieldEnum: {
    id: 'id',
    exercise_cd: 'exercise_cd',
    name: 'name',
    intensity: 'intensity',
    duration: 'duration',
    types: 'types',
    max_rep: 'max_rep',
    image: 'image',
    description: 'description'
  };

  export type ExerciseScalarFieldEnum = (typeof ExerciseScalarFieldEnum)[keyof typeof ExerciseScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const User_group_levelScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    group_id: 'group_id',
    level: 'level'
  };

  export type User_group_levelScalarFieldEnum = (typeof User_group_levelScalarFieldEnum)[keyof typeof User_group_levelScalarFieldEnum]


  export const Excercise_groupScalarFieldEnum: {
    id: 'id',
    excercise_id: 'excercise_id',
    group_id: 'group_id',
    difficulty: 'difficulty'
  };

  export type Excercise_groupScalarFieldEnum = (typeof Excercise_groupScalarFieldEnum)[keyof typeof Excercise_groupScalarFieldEnum]


  export const Exercise_muscleScalarFieldEnum: {
    id: 'id',
    exercise_id: 'exercise_id',
    muscle_id: 'muscle_id',
    rating: 'rating'
  };

  export type Exercise_muscleScalarFieldEnum = (typeof Exercise_muscleScalarFieldEnum)[keyof typeof Exercise_muscleScalarFieldEnum]


  export const MuscleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type MuscleScalarFieldEnum = (typeof MuscleScalarFieldEnum)[keyof typeof MuscleScalarFieldEnum]


  export const EquipmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image'
  };

  export type EquipmentScalarFieldEnum = (typeof EquipmentScalarFieldEnum)[keyof typeof EquipmentScalarFieldEnum]


  export const Exercise_equipmentScalarFieldEnum: {
    id: 'id',
    exercise_id: 'exercise_id',
    equipment_id: 'equipment_id'
  };

  export type Exercise_equipmentScalarFieldEnum = (typeof Exercise_equipmentScalarFieldEnum)[keyof typeof Exercise_equipmentScalarFieldEnum]


  export const User_equipmentScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    equipment_id: 'equipment_id'
  };

  export type User_equipmentScalarFieldEnum = (typeof User_equipmentScalarFieldEnum)[keyof typeof User_equipmentScalarFieldEnum]


  export const Workout_per_week_workoutScalarFieldEnum: {
    id: 'id',
    workout_id: 'workout_id',
    workoutperweek_id: 'workoutperweek_id'
  };

  export type Workout_per_week_workoutScalarFieldEnum = (typeof Workout_per_week_workoutScalarFieldEnum)[keyof typeof Workout_per_week_workoutScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    height?: FloatNullableFilter<"users"> | number | null
    weight?: FloatNullableFilter<"users"> | number | null
    days_of_workout?: IntNullableFilter<"users"> | number | null
    equipments?: User_equipmentListRelationFilter
    workouts?: WorkoutperweekListRelationFilter
    availabilities?: User_availabilityListRelationFilter
    workout_progress?: Workout_progressListRelationFilter
    level?: User_group_levelListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    days_of_workout?: SortOrderInput | SortOrder
    equipments?: user_equipmentOrderByRelationAggregateInput
    workouts?: workoutperweekOrderByRelationAggregateInput
    availabilities?: user_availabilityOrderByRelationAggregateInput
    workout_progress?: workout_progressOrderByRelationAggregateInput
    level?: user_group_levelOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    height?: FloatNullableFilter<"users"> | number | null
    weight?: FloatNullableFilter<"users"> | number | null
    days_of_workout?: IntNullableFilter<"users"> | number | null
    equipments?: User_equipmentListRelationFilter
    workouts?: WorkoutperweekListRelationFilter
    availabilities?: User_availabilityListRelationFilter
    workout_progress?: Workout_progressListRelationFilter
    level?: User_group_levelListRelationFilter
  }, "id">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    days_of_workout?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    height?: FloatNullableWithAggregatesFilter<"users"> | number | null
    weight?: FloatNullableWithAggregatesFilter<"users"> | number | null
    days_of_workout?: IntNullableWithAggregatesFilter<"users"> | number | null
  }

  export type user_availabilityWhereInput = {
    AND?: user_availabilityWhereInput | user_availabilityWhereInput[]
    OR?: user_availabilityWhereInput[]
    NOT?: user_availabilityWhereInput | user_availabilityWhereInput[]
    id?: IntFilter<"user_availability"> | number
    user_id?: IntFilter<"user_availability"> | number
    day?: StringFilter<"user_availability"> | string
    minutes?: IntFilter<"user_availability"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type user_availabilityOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    day?: SortOrder
    minutes?: SortOrder
    user?: usersOrderByWithRelationInput
  }

  export type user_availabilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_availabilityWhereInput | user_availabilityWhereInput[]
    OR?: user_availabilityWhereInput[]
    NOT?: user_availabilityWhereInput | user_availabilityWhereInput[]
    user_id?: IntFilter<"user_availability"> | number
    day?: StringFilter<"user_availability"> | string
    minutes?: IntFilter<"user_availability"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type user_availabilityOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    day?: SortOrder
    minutes?: SortOrder
    _count?: user_availabilityCountOrderByAggregateInput
    _avg?: user_availabilityAvgOrderByAggregateInput
    _max?: user_availabilityMaxOrderByAggregateInput
    _min?: user_availabilityMinOrderByAggregateInput
    _sum?: user_availabilitySumOrderByAggregateInput
  }

  export type user_availabilityScalarWhereWithAggregatesInput = {
    AND?: user_availabilityScalarWhereWithAggregatesInput | user_availabilityScalarWhereWithAggregatesInput[]
    OR?: user_availabilityScalarWhereWithAggregatesInput[]
    NOT?: user_availabilityScalarWhereWithAggregatesInput | user_availabilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_availability"> | number
    user_id?: IntWithAggregatesFilter<"user_availability"> | number
    day?: StringWithAggregatesFilter<"user_availability"> | string
    minutes?: IntWithAggregatesFilter<"user_availability"> | number
  }

  export type workout_progressWhereInput = {
    AND?: workout_progressWhereInput | workout_progressWhereInput[]
    OR?: workout_progressWhereInput[]
    NOT?: workout_progressWhereInput | workout_progressWhereInput[]
    id?: IntFilter<"workout_progress"> | number
    user_id?: IntFilter<"workout_progress"> | number
    workout_id?: IntFilter<"workout_progress"> | number
    date?: DateTimeFilter<"workout_progress"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    exerciseProgress?: Exercise_progressListRelationFilter
  }

  export type workout_progressOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
    date?: SortOrder
    user?: usersOrderByWithRelationInput
    workout?: workoutOrderByWithRelationInput
    exerciseProgress?: exercise_progressOrderByRelationAggregateInput
  }

  export type workout_progressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workout_progressWhereInput | workout_progressWhereInput[]
    OR?: workout_progressWhereInput[]
    NOT?: workout_progressWhereInput | workout_progressWhereInput[]
    user_id?: IntFilter<"workout_progress"> | number
    workout_id?: IntFilter<"workout_progress"> | number
    date?: DateTimeFilter<"workout_progress"> | Date | string
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    exerciseProgress?: Exercise_progressListRelationFilter
  }, "id">

  export type workout_progressOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
    date?: SortOrder
    _count?: workout_progressCountOrderByAggregateInput
    _avg?: workout_progressAvgOrderByAggregateInput
    _max?: workout_progressMaxOrderByAggregateInput
    _min?: workout_progressMinOrderByAggregateInput
    _sum?: workout_progressSumOrderByAggregateInput
  }

  export type workout_progressScalarWhereWithAggregatesInput = {
    AND?: workout_progressScalarWhereWithAggregatesInput | workout_progressScalarWhereWithAggregatesInput[]
    OR?: workout_progressScalarWhereWithAggregatesInput[]
    NOT?: workout_progressScalarWhereWithAggregatesInput | workout_progressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workout_progress"> | number
    user_id?: IntWithAggregatesFilter<"workout_progress"> | number
    workout_id?: IntWithAggregatesFilter<"workout_progress"> | number
    date?: DateTimeWithAggregatesFilter<"workout_progress"> | Date | string
  }

  export type exercise_progressWhereInput = {
    AND?: exercise_progressWhereInput | exercise_progressWhereInput[]
    OR?: exercise_progressWhereInput[]
    NOT?: exercise_progressWhereInput | exercise_progressWhereInput[]
    id?: IntFilter<"exercise_progress"> | number
    workout_progress_id?: IntFilter<"exercise_progress"> | number
    workout_exercise_id?: IntFilter<"exercise_progress"> | number
    sets?: IntFilter<"exercise_progress"> | number
    reps?: IntFilter<"exercise_progress"> | number
    weight_used?: FloatNullableFilter<"exercise_progress"> | number | null
    workout_progress?: XOR<Workout_progressScalarRelationFilter, workout_progressWhereInput>
    workout_exercise?: XOR<Workout_exerciseScalarRelationFilter, workout_exerciseWhereInput>
  }

  export type exercise_progressOrderByWithRelationInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrderInput | SortOrder
    workout_progress?: workout_progressOrderByWithRelationInput
    workout_exercise?: workout_exerciseOrderByWithRelationInput
  }

  export type exercise_progressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: exercise_progressWhereInput | exercise_progressWhereInput[]
    OR?: exercise_progressWhereInput[]
    NOT?: exercise_progressWhereInput | exercise_progressWhereInput[]
    workout_progress_id?: IntFilter<"exercise_progress"> | number
    workout_exercise_id?: IntFilter<"exercise_progress"> | number
    sets?: IntFilter<"exercise_progress"> | number
    reps?: IntFilter<"exercise_progress"> | number
    weight_used?: FloatNullableFilter<"exercise_progress"> | number | null
    workout_progress?: XOR<Workout_progressScalarRelationFilter, workout_progressWhereInput>
    workout_exercise?: XOR<Workout_exerciseScalarRelationFilter, workout_exerciseWhereInput>
  }, "id">

  export type exercise_progressOrderByWithAggregationInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrderInput | SortOrder
    _count?: exercise_progressCountOrderByAggregateInput
    _avg?: exercise_progressAvgOrderByAggregateInput
    _max?: exercise_progressMaxOrderByAggregateInput
    _min?: exercise_progressMinOrderByAggregateInput
    _sum?: exercise_progressSumOrderByAggregateInput
  }

  export type exercise_progressScalarWhereWithAggregatesInput = {
    AND?: exercise_progressScalarWhereWithAggregatesInput | exercise_progressScalarWhereWithAggregatesInput[]
    OR?: exercise_progressScalarWhereWithAggregatesInput[]
    NOT?: exercise_progressScalarWhereWithAggregatesInput | exercise_progressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exercise_progress"> | number
    workout_progress_id?: IntWithAggregatesFilter<"exercise_progress"> | number
    workout_exercise_id?: IntWithAggregatesFilter<"exercise_progress"> | number
    sets?: IntWithAggregatesFilter<"exercise_progress"> | number
    reps?: IntWithAggregatesFilter<"exercise_progress"> | number
    weight_used?: FloatNullableWithAggregatesFilter<"exercise_progress"> | number | null
  }

  export type workoutperweekWhereInput = {
    AND?: workoutperweekWhereInput | workoutperweekWhereInput[]
    OR?: workoutperweekWhereInput[]
    NOT?: workoutperweekWhereInput | workoutperweekWhereInput[]
    id?: IntFilter<"workoutperweek"> | number
    user_id?: IntFilter<"workoutperweek"> | number
    workouts?: Workout_per_week_workoutListRelationFilter
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type workoutperweekOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    workouts?: workout_per_week_workoutOrderByRelationAggregateInput
    user?: usersOrderByWithRelationInput
  }

  export type workoutperweekWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workoutperweekWhereInput | workoutperweekWhereInput[]
    OR?: workoutperweekWhereInput[]
    NOT?: workoutperweekWhereInput | workoutperweekWhereInput[]
    user_id?: IntFilter<"workoutperweek"> | number
    workouts?: Workout_per_week_workoutListRelationFilter
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type workoutperweekOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    _count?: workoutperweekCountOrderByAggregateInput
    _avg?: workoutperweekAvgOrderByAggregateInput
    _max?: workoutperweekMaxOrderByAggregateInput
    _min?: workoutperweekMinOrderByAggregateInput
    _sum?: workoutperweekSumOrderByAggregateInput
  }

  export type workoutperweekScalarWhereWithAggregatesInput = {
    AND?: workoutperweekScalarWhereWithAggregatesInput | workoutperweekScalarWhereWithAggregatesInput[]
    OR?: workoutperweekScalarWhereWithAggregatesInput[]
    NOT?: workoutperweekScalarWhereWithAggregatesInput | workoutperweekScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workoutperweek"> | number
    user_id?: IntWithAggregatesFilter<"workoutperweek"> | number
  }

  export type workoutWhereInput = {
    AND?: workoutWhereInput | workoutWhereInput[]
    OR?: workoutWhereInput[]
    NOT?: workoutWhereInput | workoutWhereInput[]
    id?: IntFilter<"workout"> | number
    date?: DateTimeFilter<"workout"> | Date | string
    status?: StringNullableFilter<"workout"> | string | null
    exercises?: Workout_exerciseListRelationFilter
    perWeek?: Workout_per_week_workoutListRelationFilter
    workout_progress?: Workout_progressListRelationFilter
  }

  export type workoutOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrderInput | SortOrder
    exercises?: workout_exerciseOrderByRelationAggregateInput
    perWeek?: workout_per_week_workoutOrderByRelationAggregateInput
    workout_progress?: workout_progressOrderByRelationAggregateInput
  }

  export type workoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workoutWhereInput | workoutWhereInput[]
    OR?: workoutWhereInput[]
    NOT?: workoutWhereInput | workoutWhereInput[]
    date?: DateTimeFilter<"workout"> | Date | string
    status?: StringNullableFilter<"workout"> | string | null
    exercises?: Workout_exerciseListRelationFilter
    perWeek?: Workout_per_week_workoutListRelationFilter
    workout_progress?: Workout_progressListRelationFilter
  }, "id">

  export type workoutOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrderInput | SortOrder
    _count?: workoutCountOrderByAggregateInput
    _avg?: workoutAvgOrderByAggregateInput
    _max?: workoutMaxOrderByAggregateInput
    _min?: workoutMinOrderByAggregateInput
    _sum?: workoutSumOrderByAggregateInput
  }

  export type workoutScalarWhereWithAggregatesInput = {
    AND?: workoutScalarWhereWithAggregatesInput | workoutScalarWhereWithAggregatesInput[]
    OR?: workoutScalarWhereWithAggregatesInput[]
    NOT?: workoutScalarWhereWithAggregatesInput | workoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workout"> | number
    date?: DateTimeWithAggregatesFilter<"workout"> | Date | string
    status?: StringNullableWithAggregatesFilter<"workout"> | string | null
  }

  export type workout_exerciseWhereInput = {
    AND?: workout_exerciseWhereInput | workout_exerciseWhereInput[]
    OR?: workout_exerciseWhereInput[]
    NOT?: workout_exerciseWhereInput | workout_exerciseWhereInput[]
    id?: IntFilter<"workout_exercise"> | number
    workout_id?: IntFilter<"workout_exercise"> | number
    exercise_id?: IntFilter<"workout_exercise"> | number
    reps?: IntFilter<"workout_exercise"> | number
    set?: IntFilter<"workout_exercise"> | number
    weight?: FloatNullableFilter<"workout_exercise"> | number | null
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    exercise_progress?: Exercise_progressListRelationFilter
  }

  export type workout_exerciseOrderByWithRelationInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrderInput | SortOrder
    workout?: workoutOrderByWithRelationInput
    exercise?: exerciseOrderByWithRelationInput
    exercise_progress?: exercise_progressOrderByRelationAggregateInput
  }

  export type workout_exerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workout_exerciseWhereInput | workout_exerciseWhereInput[]
    OR?: workout_exerciseWhereInput[]
    NOT?: workout_exerciseWhereInput | workout_exerciseWhereInput[]
    workout_id?: IntFilter<"workout_exercise"> | number
    exercise_id?: IntFilter<"workout_exercise"> | number
    reps?: IntFilter<"workout_exercise"> | number
    set?: IntFilter<"workout_exercise"> | number
    weight?: FloatNullableFilter<"workout_exercise"> | number | null
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    exercise_progress?: Exercise_progressListRelationFilter
  }, "id">

  export type workout_exerciseOrderByWithAggregationInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrderInput | SortOrder
    _count?: workout_exerciseCountOrderByAggregateInput
    _avg?: workout_exerciseAvgOrderByAggregateInput
    _max?: workout_exerciseMaxOrderByAggregateInput
    _min?: workout_exerciseMinOrderByAggregateInput
    _sum?: workout_exerciseSumOrderByAggregateInput
  }

  export type workout_exerciseScalarWhereWithAggregatesInput = {
    AND?: workout_exerciseScalarWhereWithAggregatesInput | workout_exerciseScalarWhereWithAggregatesInput[]
    OR?: workout_exerciseScalarWhereWithAggregatesInput[]
    NOT?: workout_exerciseScalarWhereWithAggregatesInput | workout_exerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workout_exercise"> | number
    workout_id?: IntWithAggregatesFilter<"workout_exercise"> | number
    exercise_id?: IntWithAggregatesFilter<"workout_exercise"> | number
    reps?: IntWithAggregatesFilter<"workout_exercise"> | number
    set?: IntWithAggregatesFilter<"workout_exercise"> | number
    weight?: FloatNullableWithAggregatesFilter<"workout_exercise"> | number | null
  }

  export type exerciseWhereInput = {
    AND?: exerciseWhereInput | exerciseWhereInput[]
    OR?: exerciseWhereInput[]
    NOT?: exerciseWhereInput | exerciseWhereInput[]
    id?: IntFilter<"exercise"> | number
    exercise_cd?: StringFilter<"exercise"> | string
    name?: StringFilter<"exercise"> | string
    intensity?: StringFilter<"exercise"> | string
    duration?: IntNullableFilter<"exercise"> | number | null
    types?: StringNullableFilter<"exercise"> | string | null
    max_rep?: IntNullableFilter<"exercise"> | number | null
    image?: StringNullableFilter<"exercise"> | string | null
    description?: StringNullableFilter<"exercise"> | string | null
    muscles?: Exercise_muscleListRelationFilter
    equipments?: Exercise_equipmentListRelationFilter
    workouts?: Workout_exerciseListRelationFilter
    group?: Excercise_groupListRelationFilter
  }

  export type exerciseOrderByWithRelationInput = {
    id?: SortOrder
    exercise_cd?: SortOrder
    name?: SortOrder
    intensity?: SortOrder
    duration?: SortOrderInput | SortOrder
    types?: SortOrderInput | SortOrder
    max_rep?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    muscles?: exercise_muscleOrderByRelationAggregateInput
    equipments?: exercise_equipmentOrderByRelationAggregateInput
    workouts?: workout_exerciseOrderByRelationAggregateInput
    group?: excercise_groupOrderByRelationAggregateInput
  }

  export type exerciseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: exerciseWhereInput | exerciseWhereInput[]
    OR?: exerciseWhereInput[]
    NOT?: exerciseWhereInput | exerciseWhereInput[]
    exercise_cd?: StringFilter<"exercise"> | string
    name?: StringFilter<"exercise"> | string
    intensity?: StringFilter<"exercise"> | string
    duration?: IntNullableFilter<"exercise"> | number | null
    types?: StringNullableFilter<"exercise"> | string | null
    max_rep?: IntNullableFilter<"exercise"> | number | null
    image?: StringNullableFilter<"exercise"> | string | null
    description?: StringNullableFilter<"exercise"> | string | null
    muscles?: Exercise_muscleListRelationFilter
    equipments?: Exercise_equipmentListRelationFilter
    workouts?: Workout_exerciseListRelationFilter
    group?: Excercise_groupListRelationFilter
  }, "id">

  export type exerciseOrderByWithAggregationInput = {
    id?: SortOrder
    exercise_cd?: SortOrder
    name?: SortOrder
    intensity?: SortOrder
    duration?: SortOrderInput | SortOrder
    types?: SortOrderInput | SortOrder
    max_rep?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    _count?: exerciseCountOrderByAggregateInput
    _avg?: exerciseAvgOrderByAggregateInput
    _max?: exerciseMaxOrderByAggregateInput
    _min?: exerciseMinOrderByAggregateInput
    _sum?: exerciseSumOrderByAggregateInput
  }

  export type exerciseScalarWhereWithAggregatesInput = {
    AND?: exerciseScalarWhereWithAggregatesInput | exerciseScalarWhereWithAggregatesInput[]
    OR?: exerciseScalarWhereWithAggregatesInput[]
    NOT?: exerciseScalarWhereWithAggregatesInput | exerciseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exercise"> | number
    exercise_cd?: StringWithAggregatesFilter<"exercise"> | string
    name?: StringWithAggregatesFilter<"exercise"> | string
    intensity?: StringWithAggregatesFilter<"exercise"> | string
    duration?: IntNullableWithAggregatesFilter<"exercise"> | number | null
    types?: StringNullableWithAggregatesFilter<"exercise"> | string | null
    max_rep?: IntNullableWithAggregatesFilter<"exercise"> | number | null
    image?: StringNullableWithAggregatesFilter<"exercise"> | string | null
    description?: StringNullableWithAggregatesFilter<"exercise"> | string | null
  }

  export type groupWhereInput = {
    AND?: groupWhereInput | groupWhereInput[]
    OR?: groupWhereInput[]
    NOT?: groupWhereInput | groupWhereInput[]
    id?: IntFilter<"group"> | number
    name?: StringFilter<"group"> | string
    exercises?: Excercise_groupListRelationFilter
    user?: User_group_levelListRelationFilter
  }

  export type groupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    exercises?: excercise_groupOrderByRelationAggregateInput
    user?: user_group_levelOrderByRelationAggregateInput
  }

  export type groupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: groupWhereInput | groupWhereInput[]
    OR?: groupWhereInput[]
    NOT?: groupWhereInput | groupWhereInput[]
    name?: StringFilter<"group"> | string
    exercises?: Excercise_groupListRelationFilter
    user?: User_group_levelListRelationFilter
  }, "id">

  export type groupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: groupCountOrderByAggregateInput
    _avg?: groupAvgOrderByAggregateInput
    _max?: groupMaxOrderByAggregateInput
    _min?: groupMinOrderByAggregateInput
    _sum?: groupSumOrderByAggregateInput
  }

  export type groupScalarWhereWithAggregatesInput = {
    AND?: groupScalarWhereWithAggregatesInput | groupScalarWhereWithAggregatesInput[]
    OR?: groupScalarWhereWithAggregatesInput[]
    NOT?: groupScalarWhereWithAggregatesInput | groupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"group"> | number
    name?: StringWithAggregatesFilter<"group"> | string
  }

  export type user_group_levelWhereInput = {
    AND?: user_group_levelWhereInput | user_group_levelWhereInput[]
    OR?: user_group_levelWhereInput[]
    NOT?: user_group_levelWhereInput | user_group_levelWhereInput[]
    id?: IntFilter<"user_group_level"> | number
    user_id?: IntFilter<"user_group_level"> | number
    group_id?: IntFilter<"user_group_level"> | number
    level?: IntNullableFilter<"user_group_level"> | number | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    group?: XOR<GroupScalarRelationFilter, groupWhereInput>
  }

  export type user_group_levelOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrderInput | SortOrder
    user?: usersOrderByWithRelationInput
    group?: groupOrderByWithRelationInput
  }

  export type user_group_levelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id_group_id?: user_group_levelUser_idGroup_idCompoundUniqueInput
    AND?: user_group_levelWhereInput | user_group_levelWhereInput[]
    OR?: user_group_levelWhereInput[]
    NOT?: user_group_levelWhereInput | user_group_levelWhereInput[]
    user_id?: IntFilter<"user_group_level"> | number
    group_id?: IntFilter<"user_group_level"> | number
    level?: IntNullableFilter<"user_group_level"> | number | null
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    group?: XOR<GroupScalarRelationFilter, groupWhereInput>
  }, "id" | "user_id_group_id">

  export type user_group_levelOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrderInput | SortOrder
    _count?: user_group_levelCountOrderByAggregateInput
    _avg?: user_group_levelAvgOrderByAggregateInput
    _max?: user_group_levelMaxOrderByAggregateInput
    _min?: user_group_levelMinOrderByAggregateInput
    _sum?: user_group_levelSumOrderByAggregateInput
  }

  export type user_group_levelScalarWhereWithAggregatesInput = {
    AND?: user_group_levelScalarWhereWithAggregatesInput | user_group_levelScalarWhereWithAggregatesInput[]
    OR?: user_group_levelScalarWhereWithAggregatesInput[]
    NOT?: user_group_levelScalarWhereWithAggregatesInput | user_group_levelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_group_level"> | number
    user_id?: IntWithAggregatesFilter<"user_group_level"> | number
    group_id?: IntWithAggregatesFilter<"user_group_level"> | number
    level?: IntNullableWithAggregatesFilter<"user_group_level"> | number | null
  }

  export type excercise_groupWhereInput = {
    AND?: excercise_groupWhereInput | excercise_groupWhereInput[]
    OR?: excercise_groupWhereInput[]
    NOT?: excercise_groupWhereInput | excercise_groupWhereInput[]
    id?: IntFilter<"excercise_group"> | number
    excercise_id?: IntFilter<"excercise_group"> | number
    group_id?: IntFilter<"excercise_group"> | number
    difficulty?: IntNullableFilter<"excercise_group"> | number | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    group?: XOR<GroupScalarRelationFilter, groupWhereInput>
  }

  export type excercise_groupOrderByWithRelationInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    exercise?: exerciseOrderByWithRelationInput
    group?: groupOrderByWithRelationInput
  }

  export type excercise_groupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: excercise_groupWhereInput | excercise_groupWhereInput[]
    OR?: excercise_groupWhereInput[]
    NOT?: excercise_groupWhereInput | excercise_groupWhereInput[]
    excercise_id?: IntFilter<"excercise_group"> | number
    group_id?: IntFilter<"excercise_group"> | number
    difficulty?: IntNullableFilter<"excercise_group"> | number | null
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    group?: XOR<GroupScalarRelationFilter, groupWhereInput>
  }, "id">

  export type excercise_groupOrderByWithAggregationInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrderInput | SortOrder
    _count?: excercise_groupCountOrderByAggregateInput
    _avg?: excercise_groupAvgOrderByAggregateInput
    _max?: excercise_groupMaxOrderByAggregateInput
    _min?: excercise_groupMinOrderByAggregateInput
    _sum?: excercise_groupSumOrderByAggregateInput
  }

  export type excercise_groupScalarWhereWithAggregatesInput = {
    AND?: excercise_groupScalarWhereWithAggregatesInput | excercise_groupScalarWhereWithAggregatesInput[]
    OR?: excercise_groupScalarWhereWithAggregatesInput[]
    NOT?: excercise_groupScalarWhereWithAggregatesInput | excercise_groupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"excercise_group"> | number
    excercise_id?: IntWithAggregatesFilter<"excercise_group"> | number
    group_id?: IntWithAggregatesFilter<"excercise_group"> | number
    difficulty?: IntNullableWithAggregatesFilter<"excercise_group"> | number | null
  }

  export type exercise_muscleWhereInput = {
    AND?: exercise_muscleWhereInput | exercise_muscleWhereInput[]
    OR?: exercise_muscleWhereInput[]
    NOT?: exercise_muscleWhereInput | exercise_muscleWhereInput[]
    id?: IntFilter<"exercise_muscle"> | number
    exercise_id?: IntFilter<"exercise_muscle"> | number
    muscle_id?: IntFilter<"exercise_muscle"> | number
    rating?: IntFilter<"exercise_muscle"> | number
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    muscle?: XOR<MuscleScalarRelationFilter, muscleWhereInput>
  }

  export type exercise_muscleOrderByWithRelationInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
    exercise?: exerciseOrderByWithRelationInput
    muscle?: muscleOrderByWithRelationInput
  }

  export type exercise_muscleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: exercise_muscleWhereInput | exercise_muscleWhereInput[]
    OR?: exercise_muscleWhereInput[]
    NOT?: exercise_muscleWhereInput | exercise_muscleWhereInput[]
    exercise_id?: IntFilter<"exercise_muscle"> | number
    muscle_id?: IntFilter<"exercise_muscle"> | number
    rating?: IntFilter<"exercise_muscle"> | number
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    muscle?: XOR<MuscleScalarRelationFilter, muscleWhereInput>
  }, "id">

  export type exercise_muscleOrderByWithAggregationInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
    _count?: exercise_muscleCountOrderByAggregateInput
    _avg?: exercise_muscleAvgOrderByAggregateInput
    _max?: exercise_muscleMaxOrderByAggregateInput
    _min?: exercise_muscleMinOrderByAggregateInput
    _sum?: exercise_muscleSumOrderByAggregateInput
  }

  export type exercise_muscleScalarWhereWithAggregatesInput = {
    AND?: exercise_muscleScalarWhereWithAggregatesInput | exercise_muscleScalarWhereWithAggregatesInput[]
    OR?: exercise_muscleScalarWhereWithAggregatesInput[]
    NOT?: exercise_muscleScalarWhereWithAggregatesInput | exercise_muscleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exercise_muscle"> | number
    exercise_id?: IntWithAggregatesFilter<"exercise_muscle"> | number
    muscle_id?: IntWithAggregatesFilter<"exercise_muscle"> | number
    rating?: IntWithAggregatesFilter<"exercise_muscle"> | number
  }

  export type muscleWhereInput = {
    AND?: muscleWhereInput | muscleWhereInput[]
    OR?: muscleWhereInput[]
    NOT?: muscleWhereInput | muscleWhereInput[]
    id?: IntFilter<"muscle"> | number
    name?: StringFilter<"muscle"> | string
    exercises?: Exercise_muscleListRelationFilter
  }

  export type muscleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    exercises?: exercise_muscleOrderByRelationAggregateInput
  }

  export type muscleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: muscleWhereInput | muscleWhereInput[]
    OR?: muscleWhereInput[]
    NOT?: muscleWhereInput | muscleWhereInput[]
    name?: StringFilter<"muscle"> | string
    exercises?: Exercise_muscleListRelationFilter
  }, "id">

  export type muscleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: muscleCountOrderByAggregateInput
    _avg?: muscleAvgOrderByAggregateInput
    _max?: muscleMaxOrderByAggregateInput
    _min?: muscleMinOrderByAggregateInput
    _sum?: muscleSumOrderByAggregateInput
  }

  export type muscleScalarWhereWithAggregatesInput = {
    AND?: muscleScalarWhereWithAggregatesInput | muscleScalarWhereWithAggregatesInput[]
    OR?: muscleScalarWhereWithAggregatesInput[]
    NOT?: muscleScalarWhereWithAggregatesInput | muscleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"muscle"> | number
    name?: StringWithAggregatesFilter<"muscle"> | string
  }

  export type equipmentWhereInput = {
    AND?: equipmentWhereInput | equipmentWhereInput[]
    OR?: equipmentWhereInput[]
    NOT?: equipmentWhereInput | equipmentWhereInput[]
    id?: IntFilter<"equipment"> | number
    name?: StringFilter<"equipment"> | string
    image?: StringNullableFilter<"equipment"> | string | null
    exercises?: Exercise_equipmentListRelationFilter
    users?: User_equipmentListRelationFilter
  }

  export type equipmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    exercises?: exercise_equipmentOrderByRelationAggregateInput
    users?: user_equipmentOrderByRelationAggregateInput
  }

  export type equipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: equipmentWhereInput | equipmentWhereInput[]
    OR?: equipmentWhereInput[]
    NOT?: equipmentWhereInput | equipmentWhereInput[]
    name?: StringFilter<"equipment"> | string
    image?: StringNullableFilter<"equipment"> | string | null
    exercises?: Exercise_equipmentListRelationFilter
    users?: User_equipmentListRelationFilter
  }, "id">

  export type equipmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: equipmentCountOrderByAggregateInput
    _avg?: equipmentAvgOrderByAggregateInput
    _max?: equipmentMaxOrderByAggregateInput
    _min?: equipmentMinOrderByAggregateInput
    _sum?: equipmentSumOrderByAggregateInput
  }

  export type equipmentScalarWhereWithAggregatesInput = {
    AND?: equipmentScalarWhereWithAggregatesInput | equipmentScalarWhereWithAggregatesInput[]
    OR?: equipmentScalarWhereWithAggregatesInput[]
    NOT?: equipmentScalarWhereWithAggregatesInput | equipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"equipment"> | number
    name?: StringWithAggregatesFilter<"equipment"> | string
    image?: StringNullableWithAggregatesFilter<"equipment"> | string | null
  }

  export type exercise_equipmentWhereInput = {
    AND?: exercise_equipmentWhereInput | exercise_equipmentWhereInput[]
    OR?: exercise_equipmentWhereInput[]
    NOT?: exercise_equipmentWhereInput | exercise_equipmentWhereInput[]
    id?: IntFilter<"exercise_equipment"> | number
    exercise_id?: IntFilter<"exercise_equipment"> | number
    equipment_id?: IntFilter<"exercise_equipment"> | number
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, equipmentWhereInput>
  }

  export type exercise_equipmentOrderByWithRelationInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
    exercise?: exerciseOrderByWithRelationInput
    equipment?: equipmentOrderByWithRelationInput
  }

  export type exercise_equipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: exercise_equipmentWhereInput | exercise_equipmentWhereInput[]
    OR?: exercise_equipmentWhereInput[]
    NOT?: exercise_equipmentWhereInput | exercise_equipmentWhereInput[]
    exercise_id?: IntFilter<"exercise_equipment"> | number
    equipment_id?: IntFilter<"exercise_equipment"> | number
    exercise?: XOR<ExerciseScalarRelationFilter, exerciseWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, equipmentWhereInput>
  }, "id">

  export type exercise_equipmentOrderByWithAggregationInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
    _count?: exercise_equipmentCountOrderByAggregateInput
    _avg?: exercise_equipmentAvgOrderByAggregateInput
    _max?: exercise_equipmentMaxOrderByAggregateInput
    _min?: exercise_equipmentMinOrderByAggregateInput
    _sum?: exercise_equipmentSumOrderByAggregateInput
  }

  export type exercise_equipmentScalarWhereWithAggregatesInput = {
    AND?: exercise_equipmentScalarWhereWithAggregatesInput | exercise_equipmentScalarWhereWithAggregatesInput[]
    OR?: exercise_equipmentScalarWhereWithAggregatesInput[]
    NOT?: exercise_equipmentScalarWhereWithAggregatesInput | exercise_equipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"exercise_equipment"> | number
    exercise_id?: IntWithAggregatesFilter<"exercise_equipment"> | number
    equipment_id?: IntWithAggregatesFilter<"exercise_equipment"> | number
  }

  export type user_equipmentWhereInput = {
    AND?: user_equipmentWhereInput | user_equipmentWhereInput[]
    OR?: user_equipmentWhereInput[]
    NOT?: user_equipmentWhereInput | user_equipmentWhereInput[]
    id?: IntFilter<"user_equipment"> | number
    user_id?: IntFilter<"user_equipment"> | number
    equipment_id?: IntFilter<"user_equipment"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, equipmentWhereInput>
  }

  export type user_equipmentOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
    user?: usersOrderByWithRelationInput
    equipment?: equipmentOrderByWithRelationInput
  }

  export type user_equipmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: user_equipmentWhereInput | user_equipmentWhereInput[]
    OR?: user_equipmentWhereInput[]
    NOT?: user_equipmentWhereInput | user_equipmentWhereInput[]
    user_id?: IntFilter<"user_equipment"> | number
    equipment_id?: IntFilter<"user_equipment"> | number
    user?: XOR<UsersScalarRelationFilter, usersWhereInput>
    equipment?: XOR<EquipmentScalarRelationFilter, equipmentWhereInput>
  }, "id">

  export type user_equipmentOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
    _count?: user_equipmentCountOrderByAggregateInput
    _avg?: user_equipmentAvgOrderByAggregateInput
    _max?: user_equipmentMaxOrderByAggregateInput
    _min?: user_equipmentMinOrderByAggregateInput
    _sum?: user_equipmentSumOrderByAggregateInput
  }

  export type user_equipmentScalarWhereWithAggregatesInput = {
    AND?: user_equipmentScalarWhereWithAggregatesInput | user_equipmentScalarWhereWithAggregatesInput[]
    OR?: user_equipmentScalarWhereWithAggregatesInput[]
    NOT?: user_equipmentScalarWhereWithAggregatesInput | user_equipmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_equipment"> | number
    user_id?: IntWithAggregatesFilter<"user_equipment"> | number
    equipment_id?: IntWithAggregatesFilter<"user_equipment"> | number
  }

  export type workout_per_week_workoutWhereInput = {
    AND?: workout_per_week_workoutWhereInput | workout_per_week_workoutWhereInput[]
    OR?: workout_per_week_workoutWhereInput[]
    NOT?: workout_per_week_workoutWhereInput | workout_per_week_workoutWhereInput[]
    id?: IntFilter<"workout_per_week_workout"> | number
    workout_id?: IntFilter<"workout_per_week_workout"> | number
    workoutperweek_id?: IntFilter<"workout_per_week_workout"> | number
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    workoutperweek?: XOR<WorkoutperweekScalarRelationFilter, workoutperweekWhereInput>
  }

  export type workout_per_week_workoutOrderByWithRelationInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
    workout?: workoutOrderByWithRelationInput
    workoutperweek?: workoutperweekOrderByWithRelationInput
  }

  export type workout_per_week_workoutWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: workout_per_week_workoutWhereInput | workout_per_week_workoutWhereInput[]
    OR?: workout_per_week_workoutWhereInput[]
    NOT?: workout_per_week_workoutWhereInput | workout_per_week_workoutWhereInput[]
    workout_id?: IntFilter<"workout_per_week_workout"> | number
    workoutperweek_id?: IntFilter<"workout_per_week_workout"> | number
    workout?: XOR<WorkoutScalarRelationFilter, workoutWhereInput>
    workoutperweek?: XOR<WorkoutperweekScalarRelationFilter, workoutperweekWhereInput>
  }, "id">

  export type workout_per_week_workoutOrderByWithAggregationInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
    _count?: workout_per_week_workoutCountOrderByAggregateInput
    _avg?: workout_per_week_workoutAvgOrderByAggregateInput
    _max?: workout_per_week_workoutMaxOrderByAggregateInput
    _min?: workout_per_week_workoutMinOrderByAggregateInput
    _sum?: workout_per_week_workoutSumOrderByAggregateInput
  }

  export type workout_per_week_workoutScalarWhereWithAggregatesInput = {
    AND?: workout_per_week_workoutScalarWhereWithAggregatesInput | workout_per_week_workoutScalarWhereWithAggregatesInput[]
    OR?: workout_per_week_workoutScalarWhereWithAggregatesInput[]
    NOT?: workout_per_week_workoutScalarWhereWithAggregatesInput | workout_per_week_workoutScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"workout_per_week_workout"> | number
    workout_id?: IntWithAggregatesFilter<"workout_per_week_workout"> | number
    workoutperweek_id?: IntWithAggregatesFilter<"workout_per_week_workout"> | number
  }

  export type usersCreateInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentCreateNestedManyWithoutUserInput
    workouts?: workoutperweekCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressCreateNestedManyWithoutUserInput
    level?: user_group_levelCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentUncheckedCreateNestedManyWithoutUserInput
    workouts?: workoutperweekUncheckedCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityUncheckedCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutUserInput
    level?: user_group_levelUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUpdateManyWithoutUserNestedInput
    level?: user_group_levelUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUncheckedUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUncheckedUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUncheckedUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutUserNestedInput
    level?: user_group_levelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_availabilityCreateInput = {
    day: string
    minutes: number
    user: usersCreateNestedOneWithoutAvailabilitiesInput
  }

  export type user_availabilityUncheckedCreateInput = {
    id?: number
    user_id: number
    day: string
    minutes: number
  }

  export type user_availabilityUpdateInput = {
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
    user?: usersUpdateOneRequiredWithoutAvailabilitiesNestedInput
  }

  export type user_availabilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type user_availabilityCreateManyInput = {
    id?: number
    user_id: number
    day: string
    minutes: number
  }

  export type user_availabilityUpdateManyMutationInput = {
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type user_availabilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type workout_progressCreateInput = {
    date: Date | string
    user: usersCreateNestedOneWithoutWorkout_progressInput
    workout: workoutCreateNestedOneWithoutWorkout_progressInput
    exerciseProgress?: exercise_progressCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressUncheckedCreateInput = {
    id?: number
    user_id: number
    workout_id: number
    date: Date | string
    exerciseProgress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutWorkout_progressNestedInput
    workout?: workoutUpdateOneRequiredWithoutWorkout_progressNestedInput
    exerciseProgress?: exercise_progressUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseProgress?: exercise_progressUncheckedUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressCreateManyInput = {
    id?: number
    user_id: number
    workout_id: number
    date: Date | string
  }

  export type workout_progressUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type workout_progressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type exercise_progressCreateInput = {
    sets: number
    reps: number
    weight_used?: number | null
    workout_progress: workout_progressCreateNestedOneWithoutExerciseProgressInput
    workout_exercise: workout_exerciseCreateNestedOneWithoutExercise_progressInput
  }

  export type exercise_progressUncheckedCreateInput = {
    id?: number
    workout_progress_id: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressUpdateInput = {
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
    workout_progress?: workout_progressUpdateOneRequiredWithoutExerciseProgressNestedInput
    workout_exercise?: workout_exerciseUpdateOneRequiredWithoutExercise_progressNestedInput
  }

  export type exercise_progressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_progress_id?: IntFieldUpdateOperationsInput | number
    workout_exercise_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exercise_progressCreateManyInput = {
    id?: number
    workout_progress_id: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressUpdateManyMutationInput = {
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exercise_progressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_progress_id?: IntFieldUpdateOperationsInput | number
    workout_exercise_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type workoutperweekCreateInput = {
    workouts?: workout_per_week_workoutCreateNestedManyWithoutWorkoutperweekInput
    user: usersCreateNestedOneWithoutWorkoutsInput
  }

  export type workoutperweekUncheckedCreateInput = {
    id?: number
    user_id: number
    workouts?: workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutperweekInput
  }

  export type workoutperweekUpdateInput = {
    workouts?: workout_per_week_workoutUpdateManyWithoutWorkoutperweekNestedInput
    user?: usersUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type workoutperweekUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    workouts?: workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutperweekNestedInput
  }

  export type workoutperweekCreateManyInput = {
    id?: number
    user_id: number
  }

  export type workoutperweekUpdateManyMutationInput = {

  }

  export type workoutperweekUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type workoutCreateInput = {
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseCreateNestedManyWithoutWorkoutInput
    perWeek?: workout_per_week_workoutCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressCreateNestedManyWithoutWorkoutInput
  }

  export type workoutUncheckedCreateInput = {
    id?: number
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseUncheckedCreateNestedManyWithoutWorkoutInput
    perWeek?: workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type workoutUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUpdateManyWithoutWorkoutNestedInput
    perWeek?: workout_per_week_workoutUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    perWeek?: workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutCreateManyInput = {
    id?: number
    date?: Date | string
    status?: string | null
  }

  export type workoutUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type workoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type workout_exerciseCreateInput = {
    reps?: number
    set?: number
    weight?: number | null
    workout: workoutCreateNestedOneWithoutExercisesInput
    exercise: exerciseCreateNestedOneWithoutWorkoutsInput
    exercise_progress?: exercise_progressCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseUncheckedCreateInput = {
    id?: number
    workout_id: number
    exercise_id: number
    reps?: number
    set?: number
    weight?: number | null
    exercise_progress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseUpdateInput = {
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    workout?: workoutUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: exerciseUpdateOneRequiredWithoutWorkoutsNestedInput
    exercise_progress?: exercise_progressUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    exercise_progress?: exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseCreateManyInput = {
    id?: number
    workout_id: number
    exercise_id: number
    reps?: number
    set?: number
    weight?: number | null
  }

  export type workout_exerciseUpdateManyMutationInput = {
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type workout_exerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exerciseCreateInput = {
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseCreateNestedManyWithoutExerciseInput
    group?: excercise_groupCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleUncheckedCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentUncheckedCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseUncheckedCreateNestedManyWithoutExerciseInput
    group?: excercise_groupUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUpdateInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUncheckedUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUncheckedUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUncheckedUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseCreateManyInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
  }

  export type exerciseUpdateManyMutationInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type exerciseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type groupCreateInput = {
    name: string
    exercises?: excercise_groupCreateNestedManyWithoutGroupInput
    user?: user_group_levelCreateNestedManyWithoutGroupInput
  }

  export type groupUncheckedCreateInput = {
    id?: number
    name: string
    exercises?: excercise_groupUncheckedCreateNestedManyWithoutGroupInput
    user?: user_group_levelUncheckedCreateNestedManyWithoutGroupInput
  }

  export type groupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    exercises?: excercise_groupUpdateManyWithoutGroupNestedInput
    user?: user_group_levelUpdateManyWithoutGroupNestedInput
  }

  export type groupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    exercises?: excercise_groupUncheckedUpdateManyWithoutGroupNestedInput
    user?: user_group_levelUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type groupCreateManyInput = {
    id?: number
    name: string
  }

  export type groupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type groupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type user_group_levelCreateInput = {
    level?: number | null
    user: usersCreateNestedOneWithoutLevelInput
    group: groupCreateNestedOneWithoutUserInput
  }

  export type user_group_levelUncheckedCreateInput = {
    id?: number
    user_id: number
    group_id: number
    level?: number | null
  }

  export type user_group_levelUpdateInput = {
    level?: NullableIntFieldUpdateOperationsInput | number | null
    user?: usersUpdateOneRequiredWithoutLevelNestedInput
    group?: groupUpdateOneRequiredWithoutUserNestedInput
  }

  export type user_group_levelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_levelCreateManyInput = {
    id?: number
    user_id: number
    group_id: number
    level?: number | null
  }

  export type user_group_levelUpdateManyMutationInput = {
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_levelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupCreateInput = {
    difficulty?: number | null
    exercise: exerciseCreateNestedOneWithoutGroupInput
    group: groupCreateNestedOneWithoutExercisesInput
  }

  export type excercise_groupUncheckedCreateInput = {
    id?: number
    excercise_id: number
    group_id: number
    difficulty?: number | null
  }

  export type excercise_groupUpdateInput = {
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: exerciseUpdateOneRequiredWithoutGroupNestedInput
    group?: groupUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type excercise_groupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    excercise_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupCreateManyInput = {
    id?: number
    excercise_id: number
    group_id: number
    difficulty?: number | null
  }

  export type excercise_groupUpdateManyMutationInput = {
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    excercise_id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type exercise_muscleCreateInput = {
    rating: number
    exercise: exerciseCreateNestedOneWithoutMusclesInput
    muscle: muscleCreateNestedOneWithoutExercisesInput
  }

  export type exercise_muscleUncheckedCreateInput = {
    id?: number
    exercise_id: number
    muscle_id: number
    rating: number
  }

  export type exercise_muscleUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    exercise?: exerciseUpdateOneRequiredWithoutMusclesNestedInput
    muscle?: muscleUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type exercise_muscleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    muscle_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_muscleCreateManyInput = {
    id?: number
    exercise_id: number
    muscle_id: number
    rating: number
  }

  export type exercise_muscleUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_muscleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    muscle_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type muscleCreateInput = {
    name: string
    exercises?: exercise_muscleCreateNestedManyWithoutMuscleInput
  }

  export type muscleUncheckedCreateInput = {
    id?: number
    name: string
    exercises?: exercise_muscleUncheckedCreateNestedManyWithoutMuscleInput
  }

  export type muscleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    exercises?: exercise_muscleUpdateManyWithoutMuscleNestedInput
  }

  export type muscleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    exercises?: exercise_muscleUncheckedUpdateManyWithoutMuscleNestedInput
  }

  export type muscleCreateManyInput = {
    id?: number
    name: string
  }

  export type muscleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type muscleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type equipmentCreateInput = {
    name: string
    image?: string | null
    exercises?: exercise_equipmentCreateNestedManyWithoutEquipmentInput
    users?: user_equipmentCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentUncheckedCreateInput = {
    id?: number
    name: string
    image?: string | null
    exercises?: exercise_equipmentUncheckedCreateNestedManyWithoutEquipmentInput
    users?: user_equipmentUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: exercise_equipmentUpdateManyWithoutEquipmentNestedInput
    users?: user_equipmentUpdateManyWithoutEquipmentNestedInput
  }

  export type equipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: exercise_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput
    users?: user_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type equipmentCreateManyInput = {
    id?: number
    name: string
    image?: string | null
  }

  export type equipmentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type equipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type exercise_equipmentCreateInput = {
    exercise: exerciseCreateNestedOneWithoutEquipmentsInput
    equipment: equipmentCreateNestedOneWithoutExercisesInput
  }

  export type exercise_equipmentUncheckedCreateInput = {
    id?: number
    exercise_id: number
    equipment_id: number
  }

  export type exercise_equipmentUpdateInput = {
    exercise?: exerciseUpdateOneRequiredWithoutEquipmentsNestedInput
    equipment?: equipmentUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type exercise_equipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_equipmentCreateManyInput = {
    id?: number
    exercise_id: number
    equipment_id: number
  }

  export type exercise_equipmentUpdateManyMutationInput = {

  }

  export type exercise_equipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentCreateInput = {
    user: usersCreateNestedOneWithoutEquipmentsInput
    equipment: equipmentCreateNestedOneWithoutUsersInput
  }

  export type user_equipmentUncheckedCreateInput = {
    id?: number
    user_id: number
    equipment_id: number
  }

  export type user_equipmentUpdateInput = {
    user?: usersUpdateOneRequiredWithoutEquipmentsNestedInput
    equipment?: equipmentUpdateOneRequiredWithoutUsersNestedInput
  }

  export type user_equipmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentCreateManyInput = {
    id?: number
    user_id: number
    equipment_id: number
  }

  export type user_equipmentUpdateManyMutationInput = {

  }

  export type user_equipmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_per_week_workoutCreateInput = {
    workout: workoutCreateNestedOneWithoutPerWeekInput
    workoutperweek: workoutperweekCreateNestedOneWithoutWorkoutsInput
  }

  export type workout_per_week_workoutUncheckedCreateInput = {
    id?: number
    workout_id: number
    workoutperweek_id: number
  }

  export type workout_per_week_workoutUpdateInput = {
    workout?: workoutUpdateOneRequiredWithoutPerWeekNestedInput
    workoutperweek?: workoutperweekUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type workout_per_week_workoutUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    workoutperweek_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_per_week_workoutCreateManyInput = {
    id?: number
    workout_id: number
    workoutperweek_id: number
  }

  export type workout_per_week_workoutUpdateManyMutationInput = {

  }

  export type workout_per_week_workoutUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    workoutperweek_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type User_equipmentListRelationFilter = {
    every?: user_equipmentWhereInput
    some?: user_equipmentWhereInput
    none?: user_equipmentWhereInput
  }

  export type WorkoutperweekListRelationFilter = {
    every?: workoutperweekWhereInput
    some?: workoutperweekWhereInput
    none?: workoutperweekWhereInput
  }

  export type User_availabilityListRelationFilter = {
    every?: user_availabilityWhereInput
    some?: user_availabilityWhereInput
    none?: user_availabilityWhereInput
  }

  export type Workout_progressListRelationFilter = {
    every?: workout_progressWhereInput
    some?: workout_progressWhereInput
    none?: workout_progressWhereInput
  }

  export type User_group_levelListRelationFilter = {
    every?: user_group_levelWhereInput
    some?: user_group_levelWhereInput
    none?: user_group_levelWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type user_equipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workoutperweekOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_availabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workout_progressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_group_levelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    days_of_workout?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    days_of_workout?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    days_of_workout?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    days_of_workout?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    days_of_workout?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type user_availabilityCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    day?: SortOrder
    minutes?: SortOrder
  }

  export type user_availabilityAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    minutes?: SortOrder
  }

  export type user_availabilityMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    day?: SortOrder
    minutes?: SortOrder
  }

  export type user_availabilityMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    day?: SortOrder
    minutes?: SortOrder
  }

  export type user_availabilitySumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    minutes?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type WorkoutScalarRelationFilter = {
    is?: workoutWhereInput
    isNot?: workoutWhereInput
  }

  export type Exercise_progressListRelationFilter = {
    every?: exercise_progressWhereInput
    some?: exercise_progressWhereInput
    none?: exercise_progressWhereInput
  }

  export type exercise_progressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workout_progressCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
    date?: SortOrder
  }

  export type workout_progressAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
  }

  export type workout_progressMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
    date?: SortOrder
  }

  export type workout_progressMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
    date?: SortOrder
  }

  export type workout_progressSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    workout_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Workout_progressScalarRelationFilter = {
    is?: workout_progressWhereInput
    isNot?: workout_progressWhereInput
  }

  export type Workout_exerciseScalarRelationFilter = {
    is?: workout_exerciseWhereInput
    isNot?: workout_exerciseWhereInput
  }

  export type exercise_progressCountOrderByAggregateInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrder
  }

  export type exercise_progressAvgOrderByAggregateInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrder
  }

  export type exercise_progressMaxOrderByAggregateInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrder
  }

  export type exercise_progressMinOrderByAggregateInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrder
  }

  export type exercise_progressSumOrderByAggregateInput = {
    id?: SortOrder
    workout_progress_id?: SortOrder
    workout_exercise_id?: SortOrder
    sets?: SortOrder
    reps?: SortOrder
    weight_used?: SortOrder
  }

  export type Workout_per_week_workoutListRelationFilter = {
    every?: workout_per_week_workoutWhereInput
    some?: workout_per_week_workoutWhereInput
    none?: workout_per_week_workoutWhereInput
  }

  export type workout_per_week_workoutOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workoutperweekCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type workoutperweekAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type workoutperweekMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type workoutperweekMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type workoutperweekSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Workout_exerciseListRelationFilter = {
    every?: workout_exerciseWhereInput
    some?: workout_exerciseWhereInput
    none?: workout_exerciseWhereInput
  }

  export type workout_exerciseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type workoutCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type workoutAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type workoutMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type workoutMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
  }

  export type workoutSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ExerciseScalarRelationFilter = {
    is?: exerciseWhereInput
    isNot?: exerciseWhereInput
  }

  export type workout_exerciseCountOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrder
  }

  export type workout_exerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrder
  }

  export type workout_exerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrder
  }

  export type workout_exerciseMinOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrder
  }

  export type workout_exerciseSumOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    exercise_id?: SortOrder
    reps?: SortOrder
    set?: SortOrder
    weight?: SortOrder
  }

  export type Exercise_muscleListRelationFilter = {
    every?: exercise_muscleWhereInput
    some?: exercise_muscleWhereInput
    none?: exercise_muscleWhereInput
  }

  export type Exercise_equipmentListRelationFilter = {
    every?: exercise_equipmentWhereInput
    some?: exercise_equipmentWhereInput
    none?: exercise_equipmentWhereInput
  }

  export type Excercise_groupListRelationFilter = {
    every?: excercise_groupWhereInput
    some?: excercise_groupWhereInput
    none?: excercise_groupWhereInput
  }

  export type exercise_muscleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exercise_equipmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type excercise_groupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type exerciseCountOrderByAggregateInput = {
    id?: SortOrder
    exercise_cd?: SortOrder
    name?: SortOrder
    intensity?: SortOrder
    duration?: SortOrder
    types?: SortOrder
    max_rep?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type exerciseAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    max_rep?: SortOrder
  }

  export type exerciseMaxOrderByAggregateInput = {
    id?: SortOrder
    exercise_cd?: SortOrder
    name?: SortOrder
    intensity?: SortOrder
    duration?: SortOrder
    types?: SortOrder
    max_rep?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type exerciseMinOrderByAggregateInput = {
    id?: SortOrder
    exercise_cd?: SortOrder
    name?: SortOrder
    intensity?: SortOrder
    duration?: SortOrder
    types?: SortOrder
    max_rep?: SortOrder
    image?: SortOrder
    description?: SortOrder
  }

  export type exerciseSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    max_rep?: SortOrder
  }

  export type groupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type groupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type groupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type groupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type groupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupScalarRelationFilter = {
    is?: groupWhereInput
    isNot?: groupWhereInput
  }

  export type user_group_levelUser_idGroup_idCompoundUniqueInput = {
    user_id: number
    group_id: number
  }

  export type user_group_levelCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrder
  }

  export type user_group_levelAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrder
  }

  export type user_group_levelMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrder
  }

  export type user_group_levelMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrder
  }

  export type user_group_levelSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    group_id?: SortOrder
    level?: SortOrder
  }

  export type excercise_groupCountOrderByAggregateInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrder
  }

  export type excercise_groupAvgOrderByAggregateInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrder
  }

  export type excercise_groupMaxOrderByAggregateInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrder
  }

  export type excercise_groupMinOrderByAggregateInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrder
  }

  export type excercise_groupSumOrderByAggregateInput = {
    id?: SortOrder
    excercise_id?: SortOrder
    group_id?: SortOrder
    difficulty?: SortOrder
  }

  export type MuscleScalarRelationFilter = {
    is?: muscleWhereInput
    isNot?: muscleWhereInput
  }

  export type exercise_muscleCountOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
  }

  export type exercise_muscleAvgOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
  }

  export type exercise_muscleMaxOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
  }

  export type exercise_muscleMinOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
  }

  export type exercise_muscleSumOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    muscle_id?: SortOrder
    rating?: SortOrder
  }

  export type muscleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type muscleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type muscleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type muscleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type muscleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type equipmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type equipmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type equipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type equipmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
  }

  export type equipmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EquipmentScalarRelationFilter = {
    is?: equipmentWhereInput
    isNot?: equipmentWhereInput
  }

  export type exercise_equipmentCountOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type exercise_equipmentAvgOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type exercise_equipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type exercise_equipmentMinOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type exercise_equipmentSumOrderByAggregateInput = {
    id?: SortOrder
    exercise_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type user_equipmentCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type user_equipmentAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type user_equipmentMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type user_equipmentMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type user_equipmentSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    equipment_id?: SortOrder
  }

  export type WorkoutperweekScalarRelationFilter = {
    is?: workoutperweekWhereInput
    isNot?: workoutperweekWhereInput
  }

  export type workout_per_week_workoutCountOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
  }

  export type workout_per_week_workoutAvgOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
  }

  export type workout_per_week_workoutMaxOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
  }

  export type workout_per_week_workoutMinOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
  }

  export type workout_per_week_workoutSumOrderByAggregateInput = {
    id?: SortOrder
    workout_id?: SortOrder
    workoutperweek_id?: SortOrder
  }

  export type user_equipmentCreateNestedManyWithoutUserInput = {
    create?: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput> | user_equipmentCreateWithoutUserInput[] | user_equipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutUserInput | user_equipmentCreateOrConnectWithoutUserInput[]
    createMany?: user_equipmentCreateManyUserInputEnvelope
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
  }

  export type workoutperweekCreateNestedManyWithoutUserInput = {
    create?: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput> | workoutperweekCreateWithoutUserInput[] | workoutperweekUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workoutperweekCreateOrConnectWithoutUserInput | workoutperweekCreateOrConnectWithoutUserInput[]
    createMany?: workoutperweekCreateManyUserInputEnvelope
    connect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
  }

  export type user_availabilityCreateNestedManyWithoutUserInput = {
    create?: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput> | user_availabilityCreateWithoutUserInput[] | user_availabilityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_availabilityCreateOrConnectWithoutUserInput | user_availabilityCreateOrConnectWithoutUserInput[]
    createMany?: user_availabilityCreateManyUserInputEnvelope
    connect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
  }

  export type workout_progressCreateNestedManyWithoutUserInput = {
    create?: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput> | workout_progressCreateWithoutUserInput[] | workout_progressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutUserInput | workout_progressCreateOrConnectWithoutUserInput[]
    createMany?: workout_progressCreateManyUserInputEnvelope
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
  }

  export type user_group_levelCreateNestedManyWithoutUserInput = {
    create?: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput> | user_group_levelCreateWithoutUserInput[] | user_group_levelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutUserInput | user_group_levelCreateOrConnectWithoutUserInput[]
    createMany?: user_group_levelCreateManyUserInputEnvelope
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
  }

  export type user_equipmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput> | user_equipmentCreateWithoutUserInput[] | user_equipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutUserInput | user_equipmentCreateOrConnectWithoutUserInput[]
    createMany?: user_equipmentCreateManyUserInputEnvelope
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
  }

  export type workoutperweekUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput> | workoutperweekCreateWithoutUserInput[] | workoutperweekUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workoutperweekCreateOrConnectWithoutUserInput | workoutperweekCreateOrConnectWithoutUserInput[]
    createMany?: workoutperweekCreateManyUserInputEnvelope
    connect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
  }

  export type user_availabilityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput> | user_availabilityCreateWithoutUserInput[] | user_availabilityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_availabilityCreateOrConnectWithoutUserInput | user_availabilityCreateOrConnectWithoutUserInput[]
    createMany?: user_availabilityCreateManyUserInputEnvelope
    connect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
  }

  export type workout_progressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput> | workout_progressCreateWithoutUserInput[] | workout_progressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutUserInput | workout_progressCreateOrConnectWithoutUserInput[]
    createMany?: workout_progressCreateManyUserInputEnvelope
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
  }

  export type user_group_levelUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput> | user_group_levelCreateWithoutUserInput[] | user_group_levelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutUserInput | user_group_levelCreateOrConnectWithoutUserInput[]
    createMany?: user_group_levelCreateManyUserInputEnvelope
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_equipmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput> | user_equipmentCreateWithoutUserInput[] | user_equipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutUserInput | user_equipmentCreateOrConnectWithoutUserInput[]
    upsert?: user_equipmentUpsertWithWhereUniqueWithoutUserInput | user_equipmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_equipmentCreateManyUserInputEnvelope
    set?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    disconnect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    delete?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    update?: user_equipmentUpdateWithWhereUniqueWithoutUserInput | user_equipmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_equipmentUpdateManyWithWhereWithoutUserInput | user_equipmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
  }

  export type workoutperweekUpdateManyWithoutUserNestedInput = {
    create?: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput> | workoutperweekCreateWithoutUserInput[] | workoutperweekUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workoutperweekCreateOrConnectWithoutUserInput | workoutperweekCreateOrConnectWithoutUserInput[]
    upsert?: workoutperweekUpsertWithWhereUniqueWithoutUserInput | workoutperweekUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: workoutperweekCreateManyUserInputEnvelope
    set?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    disconnect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    delete?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    connect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    update?: workoutperweekUpdateWithWhereUniqueWithoutUserInput | workoutperweekUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: workoutperweekUpdateManyWithWhereWithoutUserInput | workoutperweekUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: workoutperweekScalarWhereInput | workoutperweekScalarWhereInput[]
  }

  export type user_availabilityUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput> | user_availabilityCreateWithoutUserInput[] | user_availabilityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_availabilityCreateOrConnectWithoutUserInput | user_availabilityCreateOrConnectWithoutUserInput[]
    upsert?: user_availabilityUpsertWithWhereUniqueWithoutUserInput | user_availabilityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_availabilityCreateManyUserInputEnvelope
    set?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    disconnect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    delete?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    connect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    update?: user_availabilityUpdateWithWhereUniqueWithoutUserInput | user_availabilityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_availabilityUpdateManyWithWhereWithoutUserInput | user_availabilityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_availabilityScalarWhereInput | user_availabilityScalarWhereInput[]
  }

  export type workout_progressUpdateManyWithoutUserNestedInput = {
    create?: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput> | workout_progressCreateWithoutUserInput[] | workout_progressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutUserInput | workout_progressCreateOrConnectWithoutUserInput[]
    upsert?: workout_progressUpsertWithWhereUniqueWithoutUserInput | workout_progressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: workout_progressCreateManyUserInputEnvelope
    set?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    disconnect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    delete?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    update?: workout_progressUpdateWithWhereUniqueWithoutUserInput | workout_progressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: workout_progressUpdateManyWithWhereWithoutUserInput | workout_progressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
  }

  export type user_group_levelUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput> | user_group_levelCreateWithoutUserInput[] | user_group_levelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutUserInput | user_group_levelCreateOrConnectWithoutUserInput[]
    upsert?: user_group_levelUpsertWithWhereUniqueWithoutUserInput | user_group_levelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_group_levelCreateManyUserInputEnvelope
    set?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    disconnect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    delete?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    update?: user_group_levelUpdateWithWhereUniqueWithoutUserInput | user_group_levelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_group_levelUpdateManyWithWhereWithoutUserInput | user_group_levelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type user_equipmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput> | user_equipmentCreateWithoutUserInput[] | user_equipmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutUserInput | user_equipmentCreateOrConnectWithoutUserInput[]
    upsert?: user_equipmentUpsertWithWhereUniqueWithoutUserInput | user_equipmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_equipmentCreateManyUserInputEnvelope
    set?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    disconnect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    delete?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    update?: user_equipmentUpdateWithWhereUniqueWithoutUserInput | user_equipmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_equipmentUpdateManyWithWhereWithoutUserInput | user_equipmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
  }

  export type workoutperweekUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput> | workoutperweekCreateWithoutUserInput[] | workoutperweekUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workoutperweekCreateOrConnectWithoutUserInput | workoutperweekCreateOrConnectWithoutUserInput[]
    upsert?: workoutperweekUpsertWithWhereUniqueWithoutUserInput | workoutperweekUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: workoutperweekCreateManyUserInputEnvelope
    set?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    disconnect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    delete?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    connect?: workoutperweekWhereUniqueInput | workoutperweekWhereUniqueInput[]
    update?: workoutperweekUpdateWithWhereUniqueWithoutUserInput | workoutperweekUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: workoutperweekUpdateManyWithWhereWithoutUserInput | workoutperweekUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: workoutperweekScalarWhereInput | workoutperweekScalarWhereInput[]
  }

  export type user_availabilityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput> | user_availabilityCreateWithoutUserInput[] | user_availabilityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_availabilityCreateOrConnectWithoutUserInput | user_availabilityCreateOrConnectWithoutUserInput[]
    upsert?: user_availabilityUpsertWithWhereUniqueWithoutUserInput | user_availabilityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_availabilityCreateManyUserInputEnvelope
    set?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    disconnect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    delete?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    connect?: user_availabilityWhereUniqueInput | user_availabilityWhereUniqueInput[]
    update?: user_availabilityUpdateWithWhereUniqueWithoutUserInput | user_availabilityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_availabilityUpdateManyWithWhereWithoutUserInput | user_availabilityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_availabilityScalarWhereInput | user_availabilityScalarWhereInput[]
  }

  export type workout_progressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput> | workout_progressCreateWithoutUserInput[] | workout_progressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutUserInput | workout_progressCreateOrConnectWithoutUserInput[]
    upsert?: workout_progressUpsertWithWhereUniqueWithoutUserInput | workout_progressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: workout_progressCreateManyUserInputEnvelope
    set?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    disconnect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    delete?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    update?: workout_progressUpdateWithWhereUniqueWithoutUserInput | workout_progressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: workout_progressUpdateManyWithWhereWithoutUserInput | workout_progressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
  }

  export type user_group_levelUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput> | user_group_levelCreateWithoutUserInput[] | user_group_levelUncheckedCreateWithoutUserInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutUserInput | user_group_levelCreateOrConnectWithoutUserInput[]
    upsert?: user_group_levelUpsertWithWhereUniqueWithoutUserInput | user_group_levelUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: user_group_levelCreateManyUserInputEnvelope
    set?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    disconnect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    delete?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    update?: user_group_levelUpdateWithWhereUniqueWithoutUserInput | user_group_levelUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: user_group_levelUpdateManyWithWhereWithoutUserInput | user_group_levelUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutAvailabilitiesInput = {
    create?: XOR<usersCreateWithoutAvailabilitiesInput, usersUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: usersCreateOrConnectWithoutAvailabilitiesInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutAvailabilitiesNestedInput = {
    create?: XOR<usersCreateWithoutAvailabilitiesInput, usersUncheckedCreateWithoutAvailabilitiesInput>
    connectOrCreate?: usersCreateOrConnectWithoutAvailabilitiesInput
    upsert?: usersUpsertWithoutAvailabilitiesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutAvailabilitiesInput, usersUpdateWithoutAvailabilitiesInput>, usersUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type usersCreateNestedOneWithoutWorkout_progressInput = {
    create?: XOR<usersCreateWithoutWorkout_progressInput, usersUncheckedCreateWithoutWorkout_progressInput>
    connectOrCreate?: usersCreateOrConnectWithoutWorkout_progressInput
    connect?: usersWhereUniqueInput
  }

  export type workoutCreateNestedOneWithoutWorkout_progressInput = {
    create?: XOR<workoutCreateWithoutWorkout_progressInput, workoutUncheckedCreateWithoutWorkout_progressInput>
    connectOrCreate?: workoutCreateOrConnectWithoutWorkout_progressInput
    connect?: workoutWhereUniqueInput
  }

  export type exercise_progressCreateNestedManyWithoutWorkout_progressInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput> | exercise_progressCreateWithoutWorkout_progressInput[] | exercise_progressUncheckedCreateWithoutWorkout_progressInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_progressInput | exercise_progressCreateOrConnectWithoutWorkout_progressInput[]
    createMany?: exercise_progressCreateManyWorkout_progressInputEnvelope
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
  }

  export type exercise_progressUncheckedCreateNestedManyWithoutWorkout_progressInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput> | exercise_progressCreateWithoutWorkout_progressInput[] | exercise_progressUncheckedCreateWithoutWorkout_progressInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_progressInput | exercise_progressCreateOrConnectWithoutWorkout_progressInput[]
    createMany?: exercise_progressCreateManyWorkout_progressInputEnvelope
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutWorkout_progressNestedInput = {
    create?: XOR<usersCreateWithoutWorkout_progressInput, usersUncheckedCreateWithoutWorkout_progressInput>
    connectOrCreate?: usersCreateOrConnectWithoutWorkout_progressInput
    upsert?: usersUpsertWithoutWorkout_progressInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutWorkout_progressInput, usersUpdateWithoutWorkout_progressInput>, usersUncheckedUpdateWithoutWorkout_progressInput>
  }

  export type workoutUpdateOneRequiredWithoutWorkout_progressNestedInput = {
    create?: XOR<workoutCreateWithoutWorkout_progressInput, workoutUncheckedCreateWithoutWorkout_progressInput>
    connectOrCreate?: workoutCreateOrConnectWithoutWorkout_progressInput
    upsert?: workoutUpsertWithoutWorkout_progressInput
    connect?: workoutWhereUniqueInput
    update?: XOR<XOR<workoutUpdateToOneWithWhereWithoutWorkout_progressInput, workoutUpdateWithoutWorkout_progressInput>, workoutUncheckedUpdateWithoutWorkout_progressInput>
  }

  export type exercise_progressUpdateManyWithoutWorkout_progressNestedInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput> | exercise_progressCreateWithoutWorkout_progressInput[] | exercise_progressUncheckedCreateWithoutWorkout_progressInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_progressInput | exercise_progressCreateOrConnectWithoutWorkout_progressInput[]
    upsert?: exercise_progressUpsertWithWhereUniqueWithoutWorkout_progressInput | exercise_progressUpsertWithWhereUniqueWithoutWorkout_progressInput[]
    createMany?: exercise_progressCreateManyWorkout_progressInputEnvelope
    set?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    disconnect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    delete?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    update?: exercise_progressUpdateWithWhereUniqueWithoutWorkout_progressInput | exercise_progressUpdateWithWhereUniqueWithoutWorkout_progressInput[]
    updateMany?: exercise_progressUpdateManyWithWhereWithoutWorkout_progressInput | exercise_progressUpdateManyWithWhereWithoutWorkout_progressInput[]
    deleteMany?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
  }

  export type exercise_progressUncheckedUpdateManyWithoutWorkout_progressNestedInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput> | exercise_progressCreateWithoutWorkout_progressInput[] | exercise_progressUncheckedCreateWithoutWorkout_progressInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_progressInput | exercise_progressCreateOrConnectWithoutWorkout_progressInput[]
    upsert?: exercise_progressUpsertWithWhereUniqueWithoutWorkout_progressInput | exercise_progressUpsertWithWhereUniqueWithoutWorkout_progressInput[]
    createMany?: exercise_progressCreateManyWorkout_progressInputEnvelope
    set?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    disconnect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    delete?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    update?: exercise_progressUpdateWithWhereUniqueWithoutWorkout_progressInput | exercise_progressUpdateWithWhereUniqueWithoutWorkout_progressInput[]
    updateMany?: exercise_progressUpdateManyWithWhereWithoutWorkout_progressInput | exercise_progressUpdateManyWithWhereWithoutWorkout_progressInput[]
    deleteMany?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
  }

  export type workout_progressCreateNestedOneWithoutExerciseProgressInput = {
    create?: XOR<workout_progressCreateWithoutExerciseProgressInput, workout_progressUncheckedCreateWithoutExerciseProgressInput>
    connectOrCreate?: workout_progressCreateOrConnectWithoutExerciseProgressInput
    connect?: workout_progressWhereUniqueInput
  }

  export type workout_exerciseCreateNestedOneWithoutExercise_progressInput = {
    create?: XOR<workout_exerciseCreateWithoutExercise_progressInput, workout_exerciseUncheckedCreateWithoutExercise_progressInput>
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExercise_progressInput
    connect?: workout_exerciseWhereUniqueInput
  }

  export type workout_progressUpdateOneRequiredWithoutExerciseProgressNestedInput = {
    create?: XOR<workout_progressCreateWithoutExerciseProgressInput, workout_progressUncheckedCreateWithoutExerciseProgressInput>
    connectOrCreate?: workout_progressCreateOrConnectWithoutExerciseProgressInput
    upsert?: workout_progressUpsertWithoutExerciseProgressInput
    connect?: workout_progressWhereUniqueInput
    update?: XOR<XOR<workout_progressUpdateToOneWithWhereWithoutExerciseProgressInput, workout_progressUpdateWithoutExerciseProgressInput>, workout_progressUncheckedUpdateWithoutExerciseProgressInput>
  }

  export type workout_exerciseUpdateOneRequiredWithoutExercise_progressNestedInput = {
    create?: XOR<workout_exerciseCreateWithoutExercise_progressInput, workout_exerciseUncheckedCreateWithoutExercise_progressInput>
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExercise_progressInput
    upsert?: workout_exerciseUpsertWithoutExercise_progressInput
    connect?: workout_exerciseWhereUniqueInput
    update?: XOR<XOR<workout_exerciseUpdateToOneWithWhereWithoutExercise_progressInput, workout_exerciseUpdateWithoutExercise_progressInput>, workout_exerciseUncheckedUpdateWithoutExercise_progressInput>
  }

  export type workout_per_week_workoutCreateNestedManyWithoutWorkoutperweekInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput> | workout_per_week_workoutCreateWithoutWorkoutperweekInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutperweekInputEnvelope
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<usersCreateWithoutWorkoutsInput, usersUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: usersCreateOrConnectWithoutWorkoutsInput
    connect?: usersWhereUniqueInput
  }

  export type workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutperweekInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput> | workout_per_week_workoutCreateWithoutWorkoutperweekInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutperweekInputEnvelope
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
  }

  export type workout_per_week_workoutUpdateManyWithoutWorkoutperweekNestedInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput> | workout_per_week_workoutCreateWithoutWorkoutperweekInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput[]
    upsert?: workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutperweekInput | workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutperweekInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutperweekInputEnvelope
    set?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    disconnect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    delete?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    update?: workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutperweekInput | workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutperweekInput[]
    updateMany?: workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutperweekInput | workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutperweekInput[]
    deleteMany?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<usersCreateWithoutWorkoutsInput, usersUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: usersCreateOrConnectWithoutWorkoutsInput
    upsert?: usersUpsertWithoutWorkoutsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutWorkoutsInput, usersUpdateWithoutWorkoutsInput>, usersUncheckedUpdateWithoutWorkoutsInput>
  }

  export type workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutperweekNestedInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput> | workout_per_week_workoutCreateWithoutWorkoutperweekInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput[]
    upsert?: workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutperweekInput | workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutperweekInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutperweekInputEnvelope
    set?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    disconnect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    delete?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    update?: workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutperweekInput | workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutperweekInput[]
    updateMany?: workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutperweekInput | workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutperweekInput[]
    deleteMany?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
  }

  export type workout_exerciseCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput> | workout_exerciseCreateWithoutWorkoutInput[] | workout_exerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutWorkoutInput | workout_exerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_exerciseCreateManyWorkoutInputEnvelope
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
  }

  export type workout_per_week_workoutCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput> | workout_per_week_workoutCreateWithoutWorkoutInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutInputEnvelope
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
  }

  export type workout_progressCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput> | workout_progressCreateWithoutWorkoutInput[] | workout_progressUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutWorkoutInput | workout_progressCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_progressCreateManyWorkoutInputEnvelope
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
  }

  export type workout_exerciseUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput> | workout_exerciseCreateWithoutWorkoutInput[] | workout_exerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutWorkoutInput | workout_exerciseCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_exerciseCreateManyWorkoutInputEnvelope
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
  }

  export type workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput> | workout_per_week_workoutCreateWithoutWorkoutInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutInputEnvelope
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
  }

  export type workout_progressUncheckedCreateNestedManyWithoutWorkoutInput = {
    create?: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput> | workout_progressCreateWithoutWorkoutInput[] | workout_progressUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutWorkoutInput | workout_progressCreateOrConnectWithoutWorkoutInput[]
    createMany?: workout_progressCreateManyWorkoutInputEnvelope
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type workout_exerciseUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput> | workout_exerciseCreateWithoutWorkoutInput[] | workout_exerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutWorkoutInput | workout_exerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_exerciseUpsertWithWhereUniqueWithoutWorkoutInput | workout_exerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_exerciseCreateManyWorkoutInputEnvelope
    set?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    disconnect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    delete?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    update?: workout_exerciseUpdateWithWhereUniqueWithoutWorkoutInput | workout_exerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_exerciseUpdateManyWithWhereWithoutWorkoutInput | workout_exerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
  }

  export type workout_per_week_workoutUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput> | workout_per_week_workoutCreateWithoutWorkoutInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutInput | workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutInputEnvelope
    set?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    disconnect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    delete?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    update?: workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutInput | workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutInput | workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
  }

  export type workout_progressUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput> | workout_progressCreateWithoutWorkoutInput[] | workout_progressUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutWorkoutInput | workout_progressCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_progressUpsertWithWhereUniqueWithoutWorkoutInput | workout_progressUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_progressCreateManyWorkoutInputEnvelope
    set?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    disconnect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    delete?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    update?: workout_progressUpdateWithWhereUniqueWithoutWorkoutInput | workout_progressUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_progressUpdateManyWithWhereWithoutWorkoutInput | workout_progressUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
  }

  export type workout_exerciseUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput> | workout_exerciseCreateWithoutWorkoutInput[] | workout_exerciseUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutWorkoutInput | workout_exerciseCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_exerciseUpsertWithWhereUniqueWithoutWorkoutInput | workout_exerciseUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_exerciseCreateManyWorkoutInputEnvelope
    set?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    disconnect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    delete?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    update?: workout_exerciseUpdateWithWhereUniqueWithoutWorkoutInput | workout_exerciseUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_exerciseUpdateManyWithWhereWithoutWorkoutInput | workout_exerciseUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
  }

  export type workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput> | workout_per_week_workoutCreateWithoutWorkoutInput[] | workout_per_week_workoutUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_per_week_workoutCreateOrConnectWithoutWorkoutInput | workout_per_week_workoutCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutInput | workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_per_week_workoutCreateManyWorkoutInputEnvelope
    set?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    disconnect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    delete?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    connect?: workout_per_week_workoutWhereUniqueInput | workout_per_week_workoutWhereUniqueInput[]
    update?: workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutInput | workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutInput | workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
  }

  export type workout_progressUncheckedUpdateManyWithoutWorkoutNestedInput = {
    create?: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput> | workout_progressCreateWithoutWorkoutInput[] | workout_progressUncheckedCreateWithoutWorkoutInput[]
    connectOrCreate?: workout_progressCreateOrConnectWithoutWorkoutInput | workout_progressCreateOrConnectWithoutWorkoutInput[]
    upsert?: workout_progressUpsertWithWhereUniqueWithoutWorkoutInput | workout_progressUpsertWithWhereUniqueWithoutWorkoutInput[]
    createMany?: workout_progressCreateManyWorkoutInputEnvelope
    set?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    disconnect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    delete?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    connect?: workout_progressWhereUniqueInput | workout_progressWhereUniqueInput[]
    update?: workout_progressUpdateWithWhereUniqueWithoutWorkoutInput | workout_progressUpdateWithWhereUniqueWithoutWorkoutInput[]
    updateMany?: workout_progressUpdateManyWithWhereWithoutWorkoutInput | workout_progressUpdateManyWithWhereWithoutWorkoutInput[]
    deleteMany?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
  }

  export type workoutCreateNestedOneWithoutExercisesInput = {
    create?: XOR<workoutCreateWithoutExercisesInput, workoutUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: workoutCreateOrConnectWithoutExercisesInput
    connect?: workoutWhereUniqueInput
  }

  export type exerciseCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<exerciseCreateWithoutWorkoutsInput, exerciseUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutWorkoutsInput
    connect?: exerciseWhereUniqueInput
  }

  export type exercise_progressCreateNestedManyWithoutWorkout_exerciseInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput> | exercise_progressCreateWithoutWorkout_exerciseInput[] | exercise_progressUncheckedCreateWithoutWorkout_exerciseInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_exerciseInput | exercise_progressCreateOrConnectWithoutWorkout_exerciseInput[]
    createMany?: exercise_progressCreateManyWorkout_exerciseInputEnvelope
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
  }

  export type exercise_progressUncheckedCreateNestedManyWithoutWorkout_exerciseInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput> | exercise_progressCreateWithoutWorkout_exerciseInput[] | exercise_progressUncheckedCreateWithoutWorkout_exerciseInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_exerciseInput | exercise_progressCreateOrConnectWithoutWorkout_exerciseInput[]
    createMany?: exercise_progressCreateManyWorkout_exerciseInputEnvelope
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
  }

  export type workoutUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<workoutCreateWithoutExercisesInput, workoutUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: workoutCreateOrConnectWithoutExercisesInput
    upsert?: workoutUpsertWithoutExercisesInput
    connect?: workoutWhereUniqueInput
    update?: XOR<XOR<workoutUpdateToOneWithWhereWithoutExercisesInput, workoutUpdateWithoutExercisesInput>, workoutUncheckedUpdateWithoutExercisesInput>
  }

  export type exerciseUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<exerciseCreateWithoutWorkoutsInput, exerciseUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutWorkoutsInput
    upsert?: exerciseUpsertWithoutWorkoutsInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutWorkoutsInput, exerciseUpdateWithoutWorkoutsInput>, exerciseUncheckedUpdateWithoutWorkoutsInput>
  }

  export type exercise_progressUpdateManyWithoutWorkout_exerciseNestedInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput> | exercise_progressCreateWithoutWorkout_exerciseInput[] | exercise_progressUncheckedCreateWithoutWorkout_exerciseInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_exerciseInput | exercise_progressCreateOrConnectWithoutWorkout_exerciseInput[]
    upsert?: exercise_progressUpsertWithWhereUniqueWithoutWorkout_exerciseInput | exercise_progressUpsertWithWhereUniqueWithoutWorkout_exerciseInput[]
    createMany?: exercise_progressCreateManyWorkout_exerciseInputEnvelope
    set?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    disconnect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    delete?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    update?: exercise_progressUpdateWithWhereUniqueWithoutWorkout_exerciseInput | exercise_progressUpdateWithWhereUniqueWithoutWorkout_exerciseInput[]
    updateMany?: exercise_progressUpdateManyWithWhereWithoutWorkout_exerciseInput | exercise_progressUpdateManyWithWhereWithoutWorkout_exerciseInput[]
    deleteMany?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
  }

  export type exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseNestedInput = {
    create?: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput> | exercise_progressCreateWithoutWorkout_exerciseInput[] | exercise_progressUncheckedCreateWithoutWorkout_exerciseInput[]
    connectOrCreate?: exercise_progressCreateOrConnectWithoutWorkout_exerciseInput | exercise_progressCreateOrConnectWithoutWorkout_exerciseInput[]
    upsert?: exercise_progressUpsertWithWhereUniqueWithoutWorkout_exerciseInput | exercise_progressUpsertWithWhereUniqueWithoutWorkout_exerciseInput[]
    createMany?: exercise_progressCreateManyWorkout_exerciseInputEnvelope
    set?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    disconnect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    delete?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    connect?: exercise_progressWhereUniqueInput | exercise_progressWhereUniqueInput[]
    update?: exercise_progressUpdateWithWhereUniqueWithoutWorkout_exerciseInput | exercise_progressUpdateWithWhereUniqueWithoutWorkout_exerciseInput[]
    updateMany?: exercise_progressUpdateManyWithWhereWithoutWorkout_exerciseInput | exercise_progressUpdateManyWithWhereWithoutWorkout_exerciseInput[]
    deleteMany?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
  }

  export type exercise_muscleCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput> | exercise_muscleCreateWithoutExerciseInput[] | exercise_muscleUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutExerciseInput | exercise_muscleCreateOrConnectWithoutExerciseInput[]
    createMany?: exercise_muscleCreateManyExerciseInputEnvelope
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
  }

  export type exercise_equipmentCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput> | exercise_equipmentCreateWithoutExerciseInput[] | exercise_equipmentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutExerciseInput | exercise_equipmentCreateOrConnectWithoutExerciseInput[]
    createMany?: exercise_equipmentCreateManyExerciseInputEnvelope
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
  }

  export type workout_exerciseCreateNestedManyWithoutExerciseInput = {
    create?: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput> | workout_exerciseCreateWithoutExerciseInput[] | workout_exerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExerciseInput | workout_exerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: workout_exerciseCreateManyExerciseInputEnvelope
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
  }

  export type excercise_groupCreateNestedManyWithoutExerciseInput = {
    create?: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput> | excercise_groupCreateWithoutExerciseInput[] | excercise_groupUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutExerciseInput | excercise_groupCreateOrConnectWithoutExerciseInput[]
    createMany?: excercise_groupCreateManyExerciseInputEnvelope
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
  }

  export type exercise_muscleUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput> | exercise_muscleCreateWithoutExerciseInput[] | exercise_muscleUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutExerciseInput | exercise_muscleCreateOrConnectWithoutExerciseInput[]
    createMany?: exercise_muscleCreateManyExerciseInputEnvelope
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
  }

  export type exercise_equipmentUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput> | exercise_equipmentCreateWithoutExerciseInput[] | exercise_equipmentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutExerciseInput | exercise_equipmentCreateOrConnectWithoutExerciseInput[]
    createMany?: exercise_equipmentCreateManyExerciseInputEnvelope
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
  }

  export type workout_exerciseUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput> | workout_exerciseCreateWithoutExerciseInput[] | workout_exerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExerciseInput | workout_exerciseCreateOrConnectWithoutExerciseInput[]
    createMany?: workout_exerciseCreateManyExerciseInputEnvelope
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
  }

  export type excercise_groupUncheckedCreateNestedManyWithoutExerciseInput = {
    create?: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput> | excercise_groupCreateWithoutExerciseInput[] | excercise_groupUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutExerciseInput | excercise_groupCreateOrConnectWithoutExerciseInput[]
    createMany?: excercise_groupCreateManyExerciseInputEnvelope
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
  }

  export type exercise_muscleUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput> | exercise_muscleCreateWithoutExerciseInput[] | exercise_muscleUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutExerciseInput | exercise_muscleCreateOrConnectWithoutExerciseInput[]
    upsert?: exercise_muscleUpsertWithWhereUniqueWithoutExerciseInput | exercise_muscleUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exercise_muscleCreateManyExerciseInputEnvelope
    set?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    disconnect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    delete?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    update?: exercise_muscleUpdateWithWhereUniqueWithoutExerciseInput | exercise_muscleUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exercise_muscleUpdateManyWithWhereWithoutExerciseInput | exercise_muscleUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
  }

  export type exercise_equipmentUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput> | exercise_equipmentCreateWithoutExerciseInput[] | exercise_equipmentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutExerciseInput | exercise_equipmentCreateOrConnectWithoutExerciseInput[]
    upsert?: exercise_equipmentUpsertWithWhereUniqueWithoutExerciseInput | exercise_equipmentUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exercise_equipmentCreateManyExerciseInputEnvelope
    set?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    disconnect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    delete?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    update?: exercise_equipmentUpdateWithWhereUniqueWithoutExerciseInput | exercise_equipmentUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exercise_equipmentUpdateManyWithWhereWithoutExerciseInput | exercise_equipmentUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
  }

  export type workout_exerciseUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput> | workout_exerciseCreateWithoutExerciseInput[] | workout_exerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExerciseInput | workout_exerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: workout_exerciseUpsertWithWhereUniqueWithoutExerciseInput | workout_exerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: workout_exerciseCreateManyExerciseInputEnvelope
    set?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    disconnect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    delete?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    update?: workout_exerciseUpdateWithWhereUniqueWithoutExerciseInput | workout_exerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: workout_exerciseUpdateManyWithWhereWithoutExerciseInput | workout_exerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
  }

  export type excercise_groupUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput> | excercise_groupCreateWithoutExerciseInput[] | excercise_groupUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutExerciseInput | excercise_groupCreateOrConnectWithoutExerciseInput[]
    upsert?: excercise_groupUpsertWithWhereUniqueWithoutExerciseInput | excercise_groupUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: excercise_groupCreateManyExerciseInputEnvelope
    set?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    disconnect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    delete?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    update?: excercise_groupUpdateWithWhereUniqueWithoutExerciseInput | excercise_groupUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: excercise_groupUpdateManyWithWhereWithoutExerciseInput | excercise_groupUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
  }

  export type exercise_muscleUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput> | exercise_muscleCreateWithoutExerciseInput[] | exercise_muscleUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutExerciseInput | exercise_muscleCreateOrConnectWithoutExerciseInput[]
    upsert?: exercise_muscleUpsertWithWhereUniqueWithoutExerciseInput | exercise_muscleUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exercise_muscleCreateManyExerciseInputEnvelope
    set?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    disconnect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    delete?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    update?: exercise_muscleUpdateWithWhereUniqueWithoutExerciseInput | exercise_muscleUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exercise_muscleUpdateManyWithWhereWithoutExerciseInput | exercise_muscleUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
  }

  export type exercise_equipmentUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput> | exercise_equipmentCreateWithoutExerciseInput[] | exercise_equipmentUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutExerciseInput | exercise_equipmentCreateOrConnectWithoutExerciseInput[]
    upsert?: exercise_equipmentUpsertWithWhereUniqueWithoutExerciseInput | exercise_equipmentUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: exercise_equipmentCreateManyExerciseInputEnvelope
    set?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    disconnect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    delete?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    update?: exercise_equipmentUpdateWithWhereUniqueWithoutExerciseInput | exercise_equipmentUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: exercise_equipmentUpdateManyWithWhereWithoutExerciseInput | exercise_equipmentUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
  }

  export type workout_exerciseUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput> | workout_exerciseCreateWithoutExerciseInput[] | workout_exerciseUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: workout_exerciseCreateOrConnectWithoutExerciseInput | workout_exerciseCreateOrConnectWithoutExerciseInput[]
    upsert?: workout_exerciseUpsertWithWhereUniqueWithoutExerciseInput | workout_exerciseUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: workout_exerciseCreateManyExerciseInputEnvelope
    set?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    disconnect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    delete?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    connect?: workout_exerciseWhereUniqueInput | workout_exerciseWhereUniqueInput[]
    update?: workout_exerciseUpdateWithWhereUniqueWithoutExerciseInput | workout_exerciseUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: workout_exerciseUpdateManyWithWhereWithoutExerciseInput | workout_exerciseUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
  }

  export type excercise_groupUncheckedUpdateManyWithoutExerciseNestedInput = {
    create?: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput> | excercise_groupCreateWithoutExerciseInput[] | excercise_groupUncheckedCreateWithoutExerciseInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutExerciseInput | excercise_groupCreateOrConnectWithoutExerciseInput[]
    upsert?: excercise_groupUpsertWithWhereUniqueWithoutExerciseInput | excercise_groupUpsertWithWhereUniqueWithoutExerciseInput[]
    createMany?: excercise_groupCreateManyExerciseInputEnvelope
    set?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    disconnect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    delete?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    update?: excercise_groupUpdateWithWhereUniqueWithoutExerciseInput | excercise_groupUpdateWithWhereUniqueWithoutExerciseInput[]
    updateMany?: excercise_groupUpdateManyWithWhereWithoutExerciseInput | excercise_groupUpdateManyWithWhereWithoutExerciseInput[]
    deleteMany?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
  }

  export type excercise_groupCreateNestedManyWithoutGroupInput = {
    create?: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput> | excercise_groupCreateWithoutGroupInput[] | excercise_groupUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutGroupInput | excercise_groupCreateOrConnectWithoutGroupInput[]
    createMany?: excercise_groupCreateManyGroupInputEnvelope
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
  }

  export type user_group_levelCreateNestedManyWithoutGroupInput = {
    create?: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput> | user_group_levelCreateWithoutGroupInput[] | user_group_levelUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutGroupInput | user_group_levelCreateOrConnectWithoutGroupInput[]
    createMany?: user_group_levelCreateManyGroupInputEnvelope
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
  }

  export type excercise_groupUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput> | excercise_groupCreateWithoutGroupInput[] | excercise_groupUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutGroupInput | excercise_groupCreateOrConnectWithoutGroupInput[]
    createMany?: excercise_groupCreateManyGroupInputEnvelope
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
  }

  export type user_group_levelUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput> | user_group_levelCreateWithoutGroupInput[] | user_group_levelUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutGroupInput | user_group_levelCreateOrConnectWithoutGroupInput[]
    createMany?: user_group_levelCreateManyGroupInputEnvelope
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
  }

  export type excercise_groupUpdateManyWithoutGroupNestedInput = {
    create?: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput> | excercise_groupCreateWithoutGroupInput[] | excercise_groupUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutGroupInput | excercise_groupCreateOrConnectWithoutGroupInput[]
    upsert?: excercise_groupUpsertWithWhereUniqueWithoutGroupInput | excercise_groupUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: excercise_groupCreateManyGroupInputEnvelope
    set?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    disconnect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    delete?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    update?: excercise_groupUpdateWithWhereUniqueWithoutGroupInput | excercise_groupUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: excercise_groupUpdateManyWithWhereWithoutGroupInput | excercise_groupUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
  }

  export type user_group_levelUpdateManyWithoutGroupNestedInput = {
    create?: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput> | user_group_levelCreateWithoutGroupInput[] | user_group_levelUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutGroupInput | user_group_levelCreateOrConnectWithoutGroupInput[]
    upsert?: user_group_levelUpsertWithWhereUniqueWithoutGroupInput | user_group_levelUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: user_group_levelCreateManyGroupInputEnvelope
    set?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    disconnect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    delete?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    update?: user_group_levelUpdateWithWhereUniqueWithoutGroupInput | user_group_levelUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: user_group_levelUpdateManyWithWhereWithoutGroupInput | user_group_levelUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
  }

  export type excercise_groupUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput> | excercise_groupCreateWithoutGroupInput[] | excercise_groupUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: excercise_groupCreateOrConnectWithoutGroupInput | excercise_groupCreateOrConnectWithoutGroupInput[]
    upsert?: excercise_groupUpsertWithWhereUniqueWithoutGroupInput | excercise_groupUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: excercise_groupCreateManyGroupInputEnvelope
    set?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    disconnect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    delete?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    connect?: excercise_groupWhereUniqueInput | excercise_groupWhereUniqueInput[]
    update?: excercise_groupUpdateWithWhereUniqueWithoutGroupInput | excercise_groupUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: excercise_groupUpdateManyWithWhereWithoutGroupInput | excercise_groupUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
  }

  export type user_group_levelUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput> | user_group_levelCreateWithoutGroupInput[] | user_group_levelUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: user_group_levelCreateOrConnectWithoutGroupInput | user_group_levelCreateOrConnectWithoutGroupInput[]
    upsert?: user_group_levelUpsertWithWhereUniqueWithoutGroupInput | user_group_levelUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: user_group_levelCreateManyGroupInputEnvelope
    set?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    disconnect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    delete?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    connect?: user_group_levelWhereUniqueInput | user_group_levelWhereUniqueInput[]
    update?: user_group_levelUpdateWithWhereUniqueWithoutGroupInput | user_group_levelUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: user_group_levelUpdateManyWithWhereWithoutGroupInput | user_group_levelUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutLevelInput = {
    create?: XOR<usersCreateWithoutLevelInput, usersUncheckedCreateWithoutLevelInput>
    connectOrCreate?: usersCreateOrConnectWithoutLevelInput
    connect?: usersWhereUniqueInput
  }

  export type groupCreateNestedOneWithoutUserInput = {
    create?: XOR<groupCreateWithoutUserInput, groupUncheckedCreateWithoutUserInput>
    connectOrCreate?: groupCreateOrConnectWithoutUserInput
    connect?: groupWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutLevelNestedInput = {
    create?: XOR<usersCreateWithoutLevelInput, usersUncheckedCreateWithoutLevelInput>
    connectOrCreate?: usersCreateOrConnectWithoutLevelInput
    upsert?: usersUpsertWithoutLevelInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutLevelInput, usersUpdateWithoutLevelInput>, usersUncheckedUpdateWithoutLevelInput>
  }

  export type groupUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<groupCreateWithoutUserInput, groupUncheckedCreateWithoutUserInput>
    connectOrCreate?: groupCreateOrConnectWithoutUserInput
    upsert?: groupUpsertWithoutUserInput
    connect?: groupWhereUniqueInput
    update?: XOR<XOR<groupUpdateToOneWithWhereWithoutUserInput, groupUpdateWithoutUserInput>, groupUncheckedUpdateWithoutUserInput>
  }

  export type exerciseCreateNestedOneWithoutGroupInput = {
    create?: XOR<exerciseCreateWithoutGroupInput, exerciseUncheckedCreateWithoutGroupInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutGroupInput
    connect?: exerciseWhereUniqueInput
  }

  export type groupCreateNestedOneWithoutExercisesInput = {
    create?: XOR<groupCreateWithoutExercisesInput, groupUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: groupCreateOrConnectWithoutExercisesInput
    connect?: groupWhereUniqueInput
  }

  export type exerciseUpdateOneRequiredWithoutGroupNestedInput = {
    create?: XOR<exerciseCreateWithoutGroupInput, exerciseUncheckedCreateWithoutGroupInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutGroupInput
    upsert?: exerciseUpsertWithoutGroupInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutGroupInput, exerciseUpdateWithoutGroupInput>, exerciseUncheckedUpdateWithoutGroupInput>
  }

  export type groupUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<groupCreateWithoutExercisesInput, groupUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: groupCreateOrConnectWithoutExercisesInput
    upsert?: groupUpsertWithoutExercisesInput
    connect?: groupWhereUniqueInput
    update?: XOR<XOR<groupUpdateToOneWithWhereWithoutExercisesInput, groupUpdateWithoutExercisesInput>, groupUncheckedUpdateWithoutExercisesInput>
  }

  export type exerciseCreateNestedOneWithoutMusclesInput = {
    create?: XOR<exerciseCreateWithoutMusclesInput, exerciseUncheckedCreateWithoutMusclesInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutMusclesInput
    connect?: exerciseWhereUniqueInput
  }

  export type muscleCreateNestedOneWithoutExercisesInput = {
    create?: XOR<muscleCreateWithoutExercisesInput, muscleUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: muscleCreateOrConnectWithoutExercisesInput
    connect?: muscleWhereUniqueInput
  }

  export type exerciseUpdateOneRequiredWithoutMusclesNestedInput = {
    create?: XOR<exerciseCreateWithoutMusclesInput, exerciseUncheckedCreateWithoutMusclesInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutMusclesInput
    upsert?: exerciseUpsertWithoutMusclesInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutMusclesInput, exerciseUpdateWithoutMusclesInput>, exerciseUncheckedUpdateWithoutMusclesInput>
  }

  export type muscleUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<muscleCreateWithoutExercisesInput, muscleUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: muscleCreateOrConnectWithoutExercisesInput
    upsert?: muscleUpsertWithoutExercisesInput
    connect?: muscleWhereUniqueInput
    update?: XOR<XOR<muscleUpdateToOneWithWhereWithoutExercisesInput, muscleUpdateWithoutExercisesInput>, muscleUncheckedUpdateWithoutExercisesInput>
  }

  export type exercise_muscleCreateNestedManyWithoutMuscleInput = {
    create?: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput> | exercise_muscleCreateWithoutMuscleInput[] | exercise_muscleUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutMuscleInput | exercise_muscleCreateOrConnectWithoutMuscleInput[]
    createMany?: exercise_muscleCreateManyMuscleInputEnvelope
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
  }

  export type exercise_muscleUncheckedCreateNestedManyWithoutMuscleInput = {
    create?: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput> | exercise_muscleCreateWithoutMuscleInput[] | exercise_muscleUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutMuscleInput | exercise_muscleCreateOrConnectWithoutMuscleInput[]
    createMany?: exercise_muscleCreateManyMuscleInputEnvelope
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
  }

  export type exercise_muscleUpdateManyWithoutMuscleNestedInput = {
    create?: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput> | exercise_muscleCreateWithoutMuscleInput[] | exercise_muscleUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutMuscleInput | exercise_muscleCreateOrConnectWithoutMuscleInput[]
    upsert?: exercise_muscleUpsertWithWhereUniqueWithoutMuscleInput | exercise_muscleUpsertWithWhereUniqueWithoutMuscleInput[]
    createMany?: exercise_muscleCreateManyMuscleInputEnvelope
    set?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    disconnect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    delete?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    update?: exercise_muscleUpdateWithWhereUniqueWithoutMuscleInput | exercise_muscleUpdateWithWhereUniqueWithoutMuscleInput[]
    updateMany?: exercise_muscleUpdateManyWithWhereWithoutMuscleInput | exercise_muscleUpdateManyWithWhereWithoutMuscleInput[]
    deleteMany?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
  }

  export type exercise_muscleUncheckedUpdateManyWithoutMuscleNestedInput = {
    create?: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput> | exercise_muscleCreateWithoutMuscleInput[] | exercise_muscleUncheckedCreateWithoutMuscleInput[]
    connectOrCreate?: exercise_muscleCreateOrConnectWithoutMuscleInput | exercise_muscleCreateOrConnectWithoutMuscleInput[]
    upsert?: exercise_muscleUpsertWithWhereUniqueWithoutMuscleInput | exercise_muscleUpsertWithWhereUniqueWithoutMuscleInput[]
    createMany?: exercise_muscleCreateManyMuscleInputEnvelope
    set?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    disconnect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    delete?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    connect?: exercise_muscleWhereUniqueInput | exercise_muscleWhereUniqueInput[]
    update?: exercise_muscleUpdateWithWhereUniqueWithoutMuscleInput | exercise_muscleUpdateWithWhereUniqueWithoutMuscleInput[]
    updateMany?: exercise_muscleUpdateManyWithWhereWithoutMuscleInput | exercise_muscleUpdateManyWithWhereWithoutMuscleInput[]
    deleteMany?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
  }

  export type exercise_equipmentCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput> | exercise_equipmentCreateWithoutEquipmentInput[] | exercise_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutEquipmentInput | exercise_equipmentCreateOrConnectWithoutEquipmentInput[]
    createMany?: exercise_equipmentCreateManyEquipmentInputEnvelope
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
  }

  export type user_equipmentCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput> | user_equipmentCreateWithoutEquipmentInput[] | user_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutEquipmentInput | user_equipmentCreateOrConnectWithoutEquipmentInput[]
    createMany?: user_equipmentCreateManyEquipmentInputEnvelope
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
  }

  export type exercise_equipmentUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput> | exercise_equipmentCreateWithoutEquipmentInput[] | exercise_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutEquipmentInput | exercise_equipmentCreateOrConnectWithoutEquipmentInput[]
    createMany?: exercise_equipmentCreateManyEquipmentInputEnvelope
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
  }

  export type user_equipmentUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput> | user_equipmentCreateWithoutEquipmentInput[] | user_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutEquipmentInput | user_equipmentCreateOrConnectWithoutEquipmentInput[]
    createMany?: user_equipmentCreateManyEquipmentInputEnvelope
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
  }

  export type exercise_equipmentUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput> | exercise_equipmentCreateWithoutEquipmentInput[] | exercise_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutEquipmentInput | exercise_equipmentCreateOrConnectWithoutEquipmentInput[]
    upsert?: exercise_equipmentUpsertWithWhereUniqueWithoutEquipmentInput | exercise_equipmentUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: exercise_equipmentCreateManyEquipmentInputEnvelope
    set?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    disconnect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    delete?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    update?: exercise_equipmentUpdateWithWhereUniqueWithoutEquipmentInput | exercise_equipmentUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: exercise_equipmentUpdateManyWithWhereWithoutEquipmentInput | exercise_equipmentUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
  }

  export type user_equipmentUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput> | user_equipmentCreateWithoutEquipmentInput[] | user_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutEquipmentInput | user_equipmentCreateOrConnectWithoutEquipmentInput[]
    upsert?: user_equipmentUpsertWithWhereUniqueWithoutEquipmentInput | user_equipmentUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: user_equipmentCreateManyEquipmentInputEnvelope
    set?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    disconnect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    delete?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    update?: user_equipmentUpdateWithWhereUniqueWithoutEquipmentInput | user_equipmentUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: user_equipmentUpdateManyWithWhereWithoutEquipmentInput | user_equipmentUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
  }

  export type exercise_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput> | exercise_equipmentCreateWithoutEquipmentInput[] | exercise_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: exercise_equipmentCreateOrConnectWithoutEquipmentInput | exercise_equipmentCreateOrConnectWithoutEquipmentInput[]
    upsert?: exercise_equipmentUpsertWithWhereUniqueWithoutEquipmentInput | exercise_equipmentUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: exercise_equipmentCreateManyEquipmentInputEnvelope
    set?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    disconnect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    delete?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    connect?: exercise_equipmentWhereUniqueInput | exercise_equipmentWhereUniqueInput[]
    update?: exercise_equipmentUpdateWithWhereUniqueWithoutEquipmentInput | exercise_equipmentUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: exercise_equipmentUpdateManyWithWhereWithoutEquipmentInput | exercise_equipmentUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
  }

  export type user_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput> | user_equipmentCreateWithoutEquipmentInput[] | user_equipmentUncheckedCreateWithoutEquipmentInput[]
    connectOrCreate?: user_equipmentCreateOrConnectWithoutEquipmentInput | user_equipmentCreateOrConnectWithoutEquipmentInput[]
    upsert?: user_equipmentUpsertWithWhereUniqueWithoutEquipmentInput | user_equipmentUpsertWithWhereUniqueWithoutEquipmentInput[]
    createMany?: user_equipmentCreateManyEquipmentInputEnvelope
    set?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    disconnect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    delete?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    connect?: user_equipmentWhereUniqueInput | user_equipmentWhereUniqueInput[]
    update?: user_equipmentUpdateWithWhereUniqueWithoutEquipmentInput | user_equipmentUpdateWithWhereUniqueWithoutEquipmentInput[]
    updateMany?: user_equipmentUpdateManyWithWhereWithoutEquipmentInput | user_equipmentUpdateManyWithWhereWithoutEquipmentInput[]
    deleteMany?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
  }

  export type exerciseCreateNestedOneWithoutEquipmentsInput = {
    create?: XOR<exerciseCreateWithoutEquipmentsInput, exerciseUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutEquipmentsInput
    connect?: exerciseWhereUniqueInput
  }

  export type equipmentCreateNestedOneWithoutExercisesInput = {
    create?: XOR<equipmentCreateWithoutExercisesInput, equipmentUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: equipmentCreateOrConnectWithoutExercisesInput
    connect?: equipmentWhereUniqueInput
  }

  export type exerciseUpdateOneRequiredWithoutEquipmentsNestedInput = {
    create?: XOR<exerciseCreateWithoutEquipmentsInput, exerciseUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: exerciseCreateOrConnectWithoutEquipmentsInput
    upsert?: exerciseUpsertWithoutEquipmentsInput
    connect?: exerciseWhereUniqueInput
    update?: XOR<XOR<exerciseUpdateToOneWithWhereWithoutEquipmentsInput, exerciseUpdateWithoutEquipmentsInput>, exerciseUncheckedUpdateWithoutEquipmentsInput>
  }

  export type equipmentUpdateOneRequiredWithoutExercisesNestedInput = {
    create?: XOR<equipmentCreateWithoutExercisesInput, equipmentUncheckedCreateWithoutExercisesInput>
    connectOrCreate?: equipmentCreateOrConnectWithoutExercisesInput
    upsert?: equipmentUpsertWithoutExercisesInput
    connect?: equipmentWhereUniqueInput
    update?: XOR<XOR<equipmentUpdateToOneWithWhereWithoutExercisesInput, equipmentUpdateWithoutExercisesInput>, equipmentUncheckedUpdateWithoutExercisesInput>
  }

  export type usersCreateNestedOneWithoutEquipmentsInput = {
    create?: XOR<usersCreateWithoutEquipmentsInput, usersUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutEquipmentsInput
    connect?: usersWhereUniqueInput
  }

  export type equipmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<equipmentCreateWithoutUsersInput, equipmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: equipmentCreateOrConnectWithoutUsersInput
    connect?: equipmentWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutEquipmentsNestedInput = {
    create?: XOR<usersCreateWithoutEquipmentsInput, usersUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: usersCreateOrConnectWithoutEquipmentsInput
    upsert?: usersUpsertWithoutEquipmentsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutEquipmentsInput, usersUpdateWithoutEquipmentsInput>, usersUncheckedUpdateWithoutEquipmentsInput>
  }

  export type equipmentUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<equipmentCreateWithoutUsersInput, equipmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: equipmentCreateOrConnectWithoutUsersInput
    upsert?: equipmentUpsertWithoutUsersInput
    connect?: equipmentWhereUniqueInput
    update?: XOR<XOR<equipmentUpdateToOneWithWhereWithoutUsersInput, equipmentUpdateWithoutUsersInput>, equipmentUncheckedUpdateWithoutUsersInput>
  }

  export type workoutCreateNestedOneWithoutPerWeekInput = {
    create?: XOR<workoutCreateWithoutPerWeekInput, workoutUncheckedCreateWithoutPerWeekInput>
    connectOrCreate?: workoutCreateOrConnectWithoutPerWeekInput
    connect?: workoutWhereUniqueInput
  }

  export type workoutperweekCreateNestedOneWithoutWorkoutsInput = {
    create?: XOR<workoutperweekCreateWithoutWorkoutsInput, workoutperweekUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: workoutperweekCreateOrConnectWithoutWorkoutsInput
    connect?: workoutperweekWhereUniqueInput
  }

  export type workoutUpdateOneRequiredWithoutPerWeekNestedInput = {
    create?: XOR<workoutCreateWithoutPerWeekInput, workoutUncheckedCreateWithoutPerWeekInput>
    connectOrCreate?: workoutCreateOrConnectWithoutPerWeekInput
    upsert?: workoutUpsertWithoutPerWeekInput
    connect?: workoutWhereUniqueInput
    update?: XOR<XOR<workoutUpdateToOneWithWhereWithoutPerWeekInput, workoutUpdateWithoutPerWeekInput>, workoutUncheckedUpdateWithoutPerWeekInput>
  }

  export type workoutperweekUpdateOneRequiredWithoutWorkoutsNestedInput = {
    create?: XOR<workoutperweekCreateWithoutWorkoutsInput, workoutperweekUncheckedCreateWithoutWorkoutsInput>
    connectOrCreate?: workoutperweekCreateOrConnectWithoutWorkoutsInput
    upsert?: workoutperweekUpsertWithoutWorkoutsInput
    connect?: workoutperweekWhereUniqueInput
    update?: XOR<XOR<workoutperweekUpdateToOneWithWhereWithoutWorkoutsInput, workoutperweekUpdateWithoutWorkoutsInput>, workoutperweekUncheckedUpdateWithoutWorkoutsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type user_equipmentCreateWithoutUserInput = {
    equipment: equipmentCreateNestedOneWithoutUsersInput
  }

  export type user_equipmentUncheckedCreateWithoutUserInput = {
    id?: number
    equipment_id: number
  }

  export type user_equipmentCreateOrConnectWithoutUserInput = {
    where: user_equipmentWhereUniqueInput
    create: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput>
  }

  export type user_equipmentCreateManyUserInputEnvelope = {
    data: user_equipmentCreateManyUserInput | user_equipmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type workoutperweekCreateWithoutUserInput = {
    workouts?: workout_per_week_workoutCreateNestedManyWithoutWorkoutperweekInput
  }

  export type workoutperweekUncheckedCreateWithoutUserInput = {
    id?: number
    workouts?: workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutperweekInput
  }

  export type workoutperweekCreateOrConnectWithoutUserInput = {
    where: workoutperweekWhereUniqueInput
    create: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput>
  }

  export type workoutperweekCreateManyUserInputEnvelope = {
    data: workoutperweekCreateManyUserInput | workoutperweekCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_availabilityCreateWithoutUserInput = {
    day: string
    minutes: number
  }

  export type user_availabilityUncheckedCreateWithoutUserInput = {
    id?: number
    day: string
    minutes: number
  }

  export type user_availabilityCreateOrConnectWithoutUserInput = {
    where: user_availabilityWhereUniqueInput
    create: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput>
  }

  export type user_availabilityCreateManyUserInputEnvelope = {
    data: user_availabilityCreateManyUserInput | user_availabilityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type workout_progressCreateWithoutUserInput = {
    date: Date | string
    workout: workoutCreateNestedOneWithoutWorkout_progressInput
    exerciseProgress?: exercise_progressCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressUncheckedCreateWithoutUserInput = {
    id?: number
    workout_id: number
    date: Date | string
    exerciseProgress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressCreateOrConnectWithoutUserInput = {
    where: workout_progressWhereUniqueInput
    create: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput>
  }

  export type workout_progressCreateManyUserInputEnvelope = {
    data: workout_progressCreateManyUserInput | workout_progressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_group_levelCreateWithoutUserInput = {
    level?: number | null
    group: groupCreateNestedOneWithoutUserInput
  }

  export type user_group_levelUncheckedCreateWithoutUserInput = {
    id?: number
    group_id: number
    level?: number | null
  }

  export type user_group_levelCreateOrConnectWithoutUserInput = {
    where: user_group_levelWhereUniqueInput
    create: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput>
  }

  export type user_group_levelCreateManyUserInputEnvelope = {
    data: user_group_levelCreateManyUserInput | user_group_levelCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type user_equipmentUpsertWithWhereUniqueWithoutUserInput = {
    where: user_equipmentWhereUniqueInput
    update: XOR<user_equipmentUpdateWithoutUserInput, user_equipmentUncheckedUpdateWithoutUserInput>
    create: XOR<user_equipmentCreateWithoutUserInput, user_equipmentUncheckedCreateWithoutUserInput>
  }

  export type user_equipmentUpdateWithWhereUniqueWithoutUserInput = {
    where: user_equipmentWhereUniqueInput
    data: XOR<user_equipmentUpdateWithoutUserInput, user_equipmentUncheckedUpdateWithoutUserInput>
  }

  export type user_equipmentUpdateManyWithWhereWithoutUserInput = {
    where: user_equipmentScalarWhereInput
    data: XOR<user_equipmentUpdateManyMutationInput, user_equipmentUncheckedUpdateManyWithoutUserInput>
  }

  export type user_equipmentScalarWhereInput = {
    AND?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
    OR?: user_equipmentScalarWhereInput[]
    NOT?: user_equipmentScalarWhereInput | user_equipmentScalarWhereInput[]
    id?: IntFilter<"user_equipment"> | number
    user_id?: IntFilter<"user_equipment"> | number
    equipment_id?: IntFilter<"user_equipment"> | number
  }

  export type workoutperweekUpsertWithWhereUniqueWithoutUserInput = {
    where: workoutperweekWhereUniqueInput
    update: XOR<workoutperweekUpdateWithoutUserInput, workoutperweekUncheckedUpdateWithoutUserInput>
    create: XOR<workoutperweekCreateWithoutUserInput, workoutperweekUncheckedCreateWithoutUserInput>
  }

  export type workoutperweekUpdateWithWhereUniqueWithoutUserInput = {
    where: workoutperweekWhereUniqueInput
    data: XOR<workoutperweekUpdateWithoutUserInput, workoutperweekUncheckedUpdateWithoutUserInput>
  }

  export type workoutperweekUpdateManyWithWhereWithoutUserInput = {
    where: workoutperweekScalarWhereInput
    data: XOR<workoutperweekUpdateManyMutationInput, workoutperweekUncheckedUpdateManyWithoutUserInput>
  }

  export type workoutperweekScalarWhereInput = {
    AND?: workoutperweekScalarWhereInput | workoutperweekScalarWhereInput[]
    OR?: workoutperweekScalarWhereInput[]
    NOT?: workoutperweekScalarWhereInput | workoutperweekScalarWhereInput[]
    id?: IntFilter<"workoutperweek"> | number
    user_id?: IntFilter<"workoutperweek"> | number
  }

  export type user_availabilityUpsertWithWhereUniqueWithoutUserInput = {
    where: user_availabilityWhereUniqueInput
    update: XOR<user_availabilityUpdateWithoutUserInput, user_availabilityUncheckedUpdateWithoutUserInput>
    create: XOR<user_availabilityCreateWithoutUserInput, user_availabilityUncheckedCreateWithoutUserInput>
  }

  export type user_availabilityUpdateWithWhereUniqueWithoutUserInput = {
    where: user_availabilityWhereUniqueInput
    data: XOR<user_availabilityUpdateWithoutUserInput, user_availabilityUncheckedUpdateWithoutUserInput>
  }

  export type user_availabilityUpdateManyWithWhereWithoutUserInput = {
    where: user_availabilityScalarWhereInput
    data: XOR<user_availabilityUpdateManyMutationInput, user_availabilityUncheckedUpdateManyWithoutUserInput>
  }

  export type user_availabilityScalarWhereInput = {
    AND?: user_availabilityScalarWhereInput | user_availabilityScalarWhereInput[]
    OR?: user_availabilityScalarWhereInput[]
    NOT?: user_availabilityScalarWhereInput | user_availabilityScalarWhereInput[]
    id?: IntFilter<"user_availability"> | number
    user_id?: IntFilter<"user_availability"> | number
    day?: StringFilter<"user_availability"> | string
    minutes?: IntFilter<"user_availability"> | number
  }

  export type workout_progressUpsertWithWhereUniqueWithoutUserInput = {
    where: workout_progressWhereUniqueInput
    update: XOR<workout_progressUpdateWithoutUserInput, workout_progressUncheckedUpdateWithoutUserInput>
    create: XOR<workout_progressCreateWithoutUserInput, workout_progressUncheckedCreateWithoutUserInput>
  }

  export type workout_progressUpdateWithWhereUniqueWithoutUserInput = {
    where: workout_progressWhereUniqueInput
    data: XOR<workout_progressUpdateWithoutUserInput, workout_progressUncheckedUpdateWithoutUserInput>
  }

  export type workout_progressUpdateManyWithWhereWithoutUserInput = {
    where: workout_progressScalarWhereInput
    data: XOR<workout_progressUpdateManyMutationInput, workout_progressUncheckedUpdateManyWithoutUserInput>
  }

  export type workout_progressScalarWhereInput = {
    AND?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
    OR?: workout_progressScalarWhereInput[]
    NOT?: workout_progressScalarWhereInput | workout_progressScalarWhereInput[]
    id?: IntFilter<"workout_progress"> | number
    user_id?: IntFilter<"workout_progress"> | number
    workout_id?: IntFilter<"workout_progress"> | number
    date?: DateTimeFilter<"workout_progress"> | Date | string
  }

  export type user_group_levelUpsertWithWhereUniqueWithoutUserInput = {
    where: user_group_levelWhereUniqueInput
    update: XOR<user_group_levelUpdateWithoutUserInput, user_group_levelUncheckedUpdateWithoutUserInput>
    create: XOR<user_group_levelCreateWithoutUserInput, user_group_levelUncheckedCreateWithoutUserInput>
  }

  export type user_group_levelUpdateWithWhereUniqueWithoutUserInput = {
    where: user_group_levelWhereUniqueInput
    data: XOR<user_group_levelUpdateWithoutUserInput, user_group_levelUncheckedUpdateWithoutUserInput>
  }

  export type user_group_levelUpdateManyWithWhereWithoutUserInput = {
    where: user_group_levelScalarWhereInput
    data: XOR<user_group_levelUpdateManyMutationInput, user_group_levelUncheckedUpdateManyWithoutUserInput>
  }

  export type user_group_levelScalarWhereInput = {
    AND?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
    OR?: user_group_levelScalarWhereInput[]
    NOT?: user_group_levelScalarWhereInput | user_group_levelScalarWhereInput[]
    id?: IntFilter<"user_group_level"> | number
    user_id?: IntFilter<"user_group_level"> | number
    group_id?: IntFilter<"user_group_level"> | number
    level?: IntNullableFilter<"user_group_level"> | number | null
  }

  export type usersCreateWithoutAvailabilitiesInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentCreateNestedManyWithoutUserInput
    workouts?: workoutperweekCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressCreateNestedManyWithoutUserInput
    level?: user_group_levelCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutAvailabilitiesInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentUncheckedCreateNestedManyWithoutUserInput
    workouts?: workoutperweekUncheckedCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutUserInput
    level?: user_group_levelUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutAvailabilitiesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutAvailabilitiesInput, usersUncheckedCreateWithoutAvailabilitiesInput>
  }

  export type usersUpsertWithoutAvailabilitiesInput = {
    update: XOR<usersUpdateWithoutAvailabilitiesInput, usersUncheckedUpdateWithoutAvailabilitiesInput>
    create: XOR<usersCreateWithoutAvailabilitiesInput, usersUncheckedCreateWithoutAvailabilitiesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutAvailabilitiesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutAvailabilitiesInput, usersUncheckedUpdateWithoutAvailabilitiesInput>
  }

  export type usersUpdateWithoutAvailabilitiesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUpdateManyWithoutUserNestedInput
    level?: user_group_levelUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutAvailabilitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUncheckedUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUncheckedUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutUserNestedInput
    level?: user_group_levelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateWithoutWorkout_progressInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentCreateNestedManyWithoutUserInput
    workouts?: workoutperweekCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityCreateNestedManyWithoutUserInput
    level?: user_group_levelCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutWorkout_progressInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentUncheckedCreateNestedManyWithoutUserInput
    workouts?: workoutperweekUncheckedCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityUncheckedCreateNestedManyWithoutUserInput
    level?: user_group_levelUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutWorkout_progressInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWorkout_progressInput, usersUncheckedCreateWithoutWorkout_progressInput>
  }

  export type workoutCreateWithoutWorkout_progressInput = {
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseCreateNestedManyWithoutWorkoutInput
    perWeek?: workout_per_week_workoutCreateNestedManyWithoutWorkoutInput
  }

  export type workoutUncheckedCreateWithoutWorkout_progressInput = {
    id?: number
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseUncheckedCreateNestedManyWithoutWorkoutInput
    perWeek?: workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type workoutCreateOrConnectWithoutWorkout_progressInput = {
    where: workoutWhereUniqueInput
    create: XOR<workoutCreateWithoutWorkout_progressInput, workoutUncheckedCreateWithoutWorkout_progressInput>
  }

  export type exercise_progressCreateWithoutWorkout_progressInput = {
    sets: number
    reps: number
    weight_used?: number | null
    workout_exercise: workout_exerciseCreateNestedOneWithoutExercise_progressInput
  }

  export type exercise_progressUncheckedCreateWithoutWorkout_progressInput = {
    id?: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressCreateOrConnectWithoutWorkout_progressInput = {
    where: exercise_progressWhereUniqueInput
    create: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput>
  }

  export type exercise_progressCreateManyWorkout_progressInputEnvelope = {
    data: exercise_progressCreateManyWorkout_progressInput | exercise_progressCreateManyWorkout_progressInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutWorkout_progressInput = {
    update: XOR<usersUpdateWithoutWorkout_progressInput, usersUncheckedUpdateWithoutWorkout_progressInput>
    create: XOR<usersCreateWithoutWorkout_progressInput, usersUncheckedCreateWithoutWorkout_progressInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutWorkout_progressInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutWorkout_progressInput, usersUncheckedUpdateWithoutWorkout_progressInput>
  }

  export type usersUpdateWithoutWorkout_progressInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUpdateManyWithoutUserNestedInput
    level?: user_group_levelUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutWorkout_progressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUncheckedUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUncheckedUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUncheckedUpdateManyWithoutUserNestedInput
    level?: user_group_levelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type workoutUpsertWithoutWorkout_progressInput = {
    update: XOR<workoutUpdateWithoutWorkout_progressInput, workoutUncheckedUpdateWithoutWorkout_progressInput>
    create: XOR<workoutCreateWithoutWorkout_progressInput, workoutUncheckedCreateWithoutWorkout_progressInput>
    where?: workoutWhereInput
  }

  export type workoutUpdateToOneWithWhereWithoutWorkout_progressInput = {
    where?: workoutWhereInput
    data: XOR<workoutUpdateWithoutWorkout_progressInput, workoutUncheckedUpdateWithoutWorkout_progressInput>
  }

  export type workoutUpdateWithoutWorkout_progressInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUpdateManyWithoutWorkoutNestedInput
    perWeek?: workout_per_week_workoutUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutUncheckedUpdateWithoutWorkout_progressInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    perWeek?: workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type exercise_progressUpsertWithWhereUniqueWithoutWorkout_progressInput = {
    where: exercise_progressWhereUniqueInput
    update: XOR<exercise_progressUpdateWithoutWorkout_progressInput, exercise_progressUncheckedUpdateWithoutWorkout_progressInput>
    create: XOR<exercise_progressCreateWithoutWorkout_progressInput, exercise_progressUncheckedCreateWithoutWorkout_progressInput>
  }

  export type exercise_progressUpdateWithWhereUniqueWithoutWorkout_progressInput = {
    where: exercise_progressWhereUniqueInput
    data: XOR<exercise_progressUpdateWithoutWorkout_progressInput, exercise_progressUncheckedUpdateWithoutWorkout_progressInput>
  }

  export type exercise_progressUpdateManyWithWhereWithoutWorkout_progressInput = {
    where: exercise_progressScalarWhereInput
    data: XOR<exercise_progressUpdateManyMutationInput, exercise_progressUncheckedUpdateManyWithoutWorkout_progressInput>
  }

  export type exercise_progressScalarWhereInput = {
    AND?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
    OR?: exercise_progressScalarWhereInput[]
    NOT?: exercise_progressScalarWhereInput | exercise_progressScalarWhereInput[]
    id?: IntFilter<"exercise_progress"> | number
    workout_progress_id?: IntFilter<"exercise_progress"> | number
    workout_exercise_id?: IntFilter<"exercise_progress"> | number
    sets?: IntFilter<"exercise_progress"> | number
    reps?: IntFilter<"exercise_progress"> | number
    weight_used?: FloatNullableFilter<"exercise_progress"> | number | null
  }

  export type workout_progressCreateWithoutExerciseProgressInput = {
    date: Date | string
    user: usersCreateNestedOneWithoutWorkout_progressInput
    workout: workoutCreateNestedOneWithoutWorkout_progressInput
  }

  export type workout_progressUncheckedCreateWithoutExerciseProgressInput = {
    id?: number
    user_id: number
    workout_id: number
    date: Date | string
  }

  export type workout_progressCreateOrConnectWithoutExerciseProgressInput = {
    where: workout_progressWhereUniqueInput
    create: XOR<workout_progressCreateWithoutExerciseProgressInput, workout_progressUncheckedCreateWithoutExerciseProgressInput>
  }

  export type workout_exerciseCreateWithoutExercise_progressInput = {
    reps?: number
    set?: number
    weight?: number | null
    workout: workoutCreateNestedOneWithoutExercisesInput
    exercise: exerciseCreateNestedOneWithoutWorkoutsInput
  }

  export type workout_exerciseUncheckedCreateWithoutExercise_progressInput = {
    id?: number
    workout_id: number
    exercise_id: number
    reps?: number
    set?: number
    weight?: number | null
  }

  export type workout_exerciseCreateOrConnectWithoutExercise_progressInput = {
    where: workout_exerciseWhereUniqueInput
    create: XOR<workout_exerciseCreateWithoutExercise_progressInput, workout_exerciseUncheckedCreateWithoutExercise_progressInput>
  }

  export type workout_progressUpsertWithoutExerciseProgressInput = {
    update: XOR<workout_progressUpdateWithoutExerciseProgressInput, workout_progressUncheckedUpdateWithoutExerciseProgressInput>
    create: XOR<workout_progressCreateWithoutExerciseProgressInput, workout_progressUncheckedCreateWithoutExerciseProgressInput>
    where?: workout_progressWhereInput
  }

  export type workout_progressUpdateToOneWithWhereWithoutExerciseProgressInput = {
    where?: workout_progressWhereInput
    data: XOR<workout_progressUpdateWithoutExerciseProgressInput, workout_progressUncheckedUpdateWithoutExerciseProgressInput>
  }

  export type workout_progressUpdateWithoutExerciseProgressInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutWorkout_progressNestedInput
    workout?: workoutUpdateOneRequiredWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateWithoutExerciseProgressInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type workout_exerciseUpsertWithoutExercise_progressInput = {
    update: XOR<workout_exerciseUpdateWithoutExercise_progressInput, workout_exerciseUncheckedUpdateWithoutExercise_progressInput>
    create: XOR<workout_exerciseCreateWithoutExercise_progressInput, workout_exerciseUncheckedCreateWithoutExercise_progressInput>
    where?: workout_exerciseWhereInput
  }

  export type workout_exerciseUpdateToOneWithWhereWithoutExercise_progressInput = {
    where?: workout_exerciseWhereInput
    data: XOR<workout_exerciseUpdateWithoutExercise_progressInput, workout_exerciseUncheckedUpdateWithoutExercise_progressInput>
  }

  export type workout_exerciseUpdateWithoutExercise_progressInput = {
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    workout?: workoutUpdateOneRequiredWithoutExercisesNestedInput
    exercise?: exerciseUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type workout_exerciseUncheckedUpdateWithoutExercise_progressInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type workout_per_week_workoutCreateWithoutWorkoutperweekInput = {
    workout: workoutCreateNestedOneWithoutPerWeekInput
  }

  export type workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput = {
    id?: number
    workout_id: number
  }

  export type workout_per_week_workoutCreateOrConnectWithoutWorkoutperweekInput = {
    where: workout_per_week_workoutWhereUniqueInput
    create: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput>
  }

  export type workout_per_week_workoutCreateManyWorkoutperweekInputEnvelope = {
    data: workout_per_week_workoutCreateManyWorkoutperweekInput | workout_per_week_workoutCreateManyWorkoutperweekInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutWorkoutsInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressCreateNestedManyWithoutUserInput
    level?: user_group_levelCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutWorkoutsInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentUncheckedCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityUncheckedCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutUserInput
    level?: user_group_levelUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutWorkoutsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutWorkoutsInput, usersUncheckedCreateWithoutWorkoutsInput>
  }

  export type workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutperweekInput = {
    where: workout_per_week_workoutWhereUniqueInput
    update: XOR<workout_per_week_workoutUpdateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedUpdateWithoutWorkoutperweekInput>
    create: XOR<workout_per_week_workoutCreateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutperweekInput>
  }

  export type workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutperweekInput = {
    where: workout_per_week_workoutWhereUniqueInput
    data: XOR<workout_per_week_workoutUpdateWithoutWorkoutperweekInput, workout_per_week_workoutUncheckedUpdateWithoutWorkoutperweekInput>
  }

  export type workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutperweekInput = {
    where: workout_per_week_workoutScalarWhereInput
    data: XOR<workout_per_week_workoutUpdateManyMutationInput, workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutperweekInput>
  }

  export type workout_per_week_workoutScalarWhereInput = {
    AND?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
    OR?: workout_per_week_workoutScalarWhereInput[]
    NOT?: workout_per_week_workoutScalarWhereInput | workout_per_week_workoutScalarWhereInput[]
    id?: IntFilter<"workout_per_week_workout"> | number
    workout_id?: IntFilter<"workout_per_week_workout"> | number
    workoutperweek_id?: IntFilter<"workout_per_week_workout"> | number
  }

  export type usersUpsertWithoutWorkoutsInput = {
    update: XOR<usersUpdateWithoutWorkoutsInput, usersUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<usersCreateWithoutWorkoutsInput, usersUncheckedCreateWithoutWorkoutsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutWorkoutsInput, usersUncheckedUpdateWithoutWorkoutsInput>
  }

  export type usersUpdateWithoutWorkoutsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUpdateManyWithoutUserNestedInput
    level?: user_group_levelUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutWorkoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUncheckedUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUncheckedUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutUserNestedInput
    level?: user_group_levelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type workout_exerciseCreateWithoutWorkoutInput = {
    reps?: number
    set?: number
    weight?: number | null
    exercise: exerciseCreateNestedOneWithoutWorkoutsInput
    exercise_progress?: exercise_progressCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseUncheckedCreateWithoutWorkoutInput = {
    id?: number
    exercise_id: number
    reps?: number
    set?: number
    weight?: number | null
    exercise_progress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseCreateOrConnectWithoutWorkoutInput = {
    where: workout_exerciseWhereUniqueInput
    create: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_exerciseCreateManyWorkoutInputEnvelope = {
    data: workout_exerciseCreateManyWorkoutInput | workout_exerciseCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type workout_per_week_workoutCreateWithoutWorkoutInput = {
    workoutperweek: workoutperweekCreateNestedOneWithoutWorkoutsInput
  }

  export type workout_per_week_workoutUncheckedCreateWithoutWorkoutInput = {
    id?: number
    workoutperweek_id: number
  }

  export type workout_per_week_workoutCreateOrConnectWithoutWorkoutInput = {
    where: workout_per_week_workoutWhereUniqueInput
    create: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_per_week_workoutCreateManyWorkoutInputEnvelope = {
    data: workout_per_week_workoutCreateManyWorkoutInput | workout_per_week_workoutCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type workout_progressCreateWithoutWorkoutInput = {
    date: Date | string
    user: usersCreateNestedOneWithoutWorkout_progressInput
    exerciseProgress?: exercise_progressCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressUncheckedCreateWithoutWorkoutInput = {
    id?: number
    user_id: number
    date: Date | string
    exerciseProgress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_progressInput
  }

  export type workout_progressCreateOrConnectWithoutWorkoutInput = {
    where: workout_progressWhereUniqueInput
    create: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_progressCreateManyWorkoutInputEnvelope = {
    data: workout_progressCreateManyWorkoutInput | workout_progressCreateManyWorkoutInput[]
    skipDuplicates?: boolean
  }

  export type workout_exerciseUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: workout_exerciseWhereUniqueInput
    update: XOR<workout_exerciseUpdateWithoutWorkoutInput, workout_exerciseUncheckedUpdateWithoutWorkoutInput>
    create: XOR<workout_exerciseCreateWithoutWorkoutInput, workout_exerciseUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_exerciseUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: workout_exerciseWhereUniqueInput
    data: XOR<workout_exerciseUpdateWithoutWorkoutInput, workout_exerciseUncheckedUpdateWithoutWorkoutInput>
  }

  export type workout_exerciseUpdateManyWithWhereWithoutWorkoutInput = {
    where: workout_exerciseScalarWhereInput
    data: XOR<workout_exerciseUpdateManyMutationInput, workout_exerciseUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type workout_exerciseScalarWhereInput = {
    AND?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
    OR?: workout_exerciseScalarWhereInput[]
    NOT?: workout_exerciseScalarWhereInput | workout_exerciseScalarWhereInput[]
    id?: IntFilter<"workout_exercise"> | number
    workout_id?: IntFilter<"workout_exercise"> | number
    exercise_id?: IntFilter<"workout_exercise"> | number
    reps?: IntFilter<"workout_exercise"> | number
    set?: IntFilter<"workout_exercise"> | number
    weight?: FloatNullableFilter<"workout_exercise"> | number | null
  }

  export type workout_per_week_workoutUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: workout_per_week_workoutWhereUniqueInput
    update: XOR<workout_per_week_workoutUpdateWithoutWorkoutInput, workout_per_week_workoutUncheckedUpdateWithoutWorkoutInput>
    create: XOR<workout_per_week_workoutCreateWithoutWorkoutInput, workout_per_week_workoutUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_per_week_workoutUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: workout_per_week_workoutWhereUniqueInput
    data: XOR<workout_per_week_workoutUpdateWithoutWorkoutInput, workout_per_week_workoutUncheckedUpdateWithoutWorkoutInput>
  }

  export type workout_per_week_workoutUpdateManyWithWhereWithoutWorkoutInput = {
    where: workout_per_week_workoutScalarWhereInput
    data: XOR<workout_per_week_workoutUpdateManyMutationInput, workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type workout_progressUpsertWithWhereUniqueWithoutWorkoutInput = {
    where: workout_progressWhereUniqueInput
    update: XOR<workout_progressUpdateWithoutWorkoutInput, workout_progressUncheckedUpdateWithoutWorkoutInput>
    create: XOR<workout_progressCreateWithoutWorkoutInput, workout_progressUncheckedCreateWithoutWorkoutInput>
  }

  export type workout_progressUpdateWithWhereUniqueWithoutWorkoutInput = {
    where: workout_progressWhereUniqueInput
    data: XOR<workout_progressUpdateWithoutWorkoutInput, workout_progressUncheckedUpdateWithoutWorkoutInput>
  }

  export type workout_progressUpdateManyWithWhereWithoutWorkoutInput = {
    where: workout_progressScalarWhereInput
    data: XOR<workout_progressUpdateManyMutationInput, workout_progressUncheckedUpdateManyWithoutWorkoutInput>
  }

  export type workoutCreateWithoutExercisesInput = {
    date?: Date | string
    status?: string | null
    perWeek?: workout_per_week_workoutCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressCreateNestedManyWithoutWorkoutInput
  }

  export type workoutUncheckedCreateWithoutExercisesInput = {
    id?: number
    date?: Date | string
    status?: string | null
    perWeek?: workout_per_week_workoutUncheckedCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type workoutCreateOrConnectWithoutExercisesInput = {
    where: workoutWhereUniqueInput
    create: XOR<workoutCreateWithoutExercisesInput, workoutUncheckedCreateWithoutExercisesInput>
  }

  export type exerciseCreateWithoutWorkoutsInput = {
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentCreateNestedManyWithoutExerciseInput
    group?: excercise_groupCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutWorkoutsInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleUncheckedCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentUncheckedCreateNestedManyWithoutExerciseInput
    group?: excercise_groupUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutWorkoutsInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutWorkoutsInput, exerciseUncheckedCreateWithoutWorkoutsInput>
  }

  export type exercise_progressCreateWithoutWorkout_exerciseInput = {
    sets: number
    reps: number
    weight_used?: number | null
    workout_progress: workout_progressCreateNestedOneWithoutExerciseProgressInput
  }

  export type exercise_progressUncheckedCreateWithoutWorkout_exerciseInput = {
    id?: number
    workout_progress_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressCreateOrConnectWithoutWorkout_exerciseInput = {
    where: exercise_progressWhereUniqueInput
    create: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput>
  }

  export type exercise_progressCreateManyWorkout_exerciseInputEnvelope = {
    data: exercise_progressCreateManyWorkout_exerciseInput | exercise_progressCreateManyWorkout_exerciseInput[]
    skipDuplicates?: boolean
  }

  export type workoutUpsertWithoutExercisesInput = {
    update: XOR<workoutUpdateWithoutExercisesInput, workoutUncheckedUpdateWithoutExercisesInput>
    create: XOR<workoutCreateWithoutExercisesInput, workoutUncheckedCreateWithoutExercisesInput>
    where?: workoutWhereInput
  }

  export type workoutUpdateToOneWithWhereWithoutExercisesInput = {
    where?: workoutWhereInput
    data: XOR<workoutUpdateWithoutExercisesInput, workoutUncheckedUpdateWithoutExercisesInput>
  }

  export type workoutUpdateWithoutExercisesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    perWeek?: workout_per_week_workoutUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    perWeek?: workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type exerciseUpsertWithoutWorkoutsInput = {
    update: XOR<exerciseUpdateWithoutWorkoutsInput, exerciseUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<exerciseCreateWithoutWorkoutsInput, exerciseUncheckedCreateWithoutWorkoutsInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutWorkoutsInput, exerciseUncheckedUpdateWithoutWorkoutsInput>
  }

  export type exerciseUpdateWithoutWorkoutsInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutWorkoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUncheckedUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUncheckedUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type exercise_progressUpsertWithWhereUniqueWithoutWorkout_exerciseInput = {
    where: exercise_progressWhereUniqueInput
    update: XOR<exercise_progressUpdateWithoutWorkout_exerciseInput, exercise_progressUncheckedUpdateWithoutWorkout_exerciseInput>
    create: XOR<exercise_progressCreateWithoutWorkout_exerciseInput, exercise_progressUncheckedCreateWithoutWorkout_exerciseInput>
  }

  export type exercise_progressUpdateWithWhereUniqueWithoutWorkout_exerciseInput = {
    where: exercise_progressWhereUniqueInput
    data: XOR<exercise_progressUpdateWithoutWorkout_exerciseInput, exercise_progressUncheckedUpdateWithoutWorkout_exerciseInput>
  }

  export type exercise_progressUpdateManyWithWhereWithoutWorkout_exerciseInput = {
    where: exercise_progressScalarWhereInput
    data: XOR<exercise_progressUpdateManyMutationInput, exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseInput>
  }

  export type exercise_muscleCreateWithoutExerciseInput = {
    rating: number
    muscle: muscleCreateNestedOneWithoutExercisesInput
  }

  export type exercise_muscleUncheckedCreateWithoutExerciseInput = {
    id?: number
    muscle_id: number
    rating: number
  }

  export type exercise_muscleCreateOrConnectWithoutExerciseInput = {
    where: exercise_muscleWhereUniqueInput
    create: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput>
  }

  export type exercise_muscleCreateManyExerciseInputEnvelope = {
    data: exercise_muscleCreateManyExerciseInput | exercise_muscleCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type exercise_equipmentCreateWithoutExerciseInput = {
    equipment: equipmentCreateNestedOneWithoutExercisesInput
  }

  export type exercise_equipmentUncheckedCreateWithoutExerciseInput = {
    id?: number
    equipment_id: number
  }

  export type exercise_equipmentCreateOrConnectWithoutExerciseInput = {
    where: exercise_equipmentWhereUniqueInput
    create: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput>
  }

  export type exercise_equipmentCreateManyExerciseInputEnvelope = {
    data: exercise_equipmentCreateManyExerciseInput | exercise_equipmentCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type workout_exerciseCreateWithoutExerciseInput = {
    reps?: number
    set?: number
    weight?: number | null
    workout: workoutCreateNestedOneWithoutExercisesInput
    exercise_progress?: exercise_progressCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseUncheckedCreateWithoutExerciseInput = {
    id?: number
    workout_id: number
    reps?: number
    set?: number
    weight?: number | null
    exercise_progress?: exercise_progressUncheckedCreateNestedManyWithoutWorkout_exerciseInput
  }

  export type workout_exerciseCreateOrConnectWithoutExerciseInput = {
    where: workout_exerciseWhereUniqueInput
    create: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput>
  }

  export type workout_exerciseCreateManyExerciseInputEnvelope = {
    data: workout_exerciseCreateManyExerciseInput | workout_exerciseCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type excercise_groupCreateWithoutExerciseInput = {
    difficulty?: number | null
    group: groupCreateNestedOneWithoutExercisesInput
  }

  export type excercise_groupUncheckedCreateWithoutExerciseInput = {
    id?: number
    group_id: number
    difficulty?: number | null
  }

  export type excercise_groupCreateOrConnectWithoutExerciseInput = {
    where: excercise_groupWhereUniqueInput
    create: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput>
  }

  export type excercise_groupCreateManyExerciseInputEnvelope = {
    data: excercise_groupCreateManyExerciseInput | excercise_groupCreateManyExerciseInput[]
    skipDuplicates?: boolean
  }

  export type exercise_muscleUpsertWithWhereUniqueWithoutExerciseInput = {
    where: exercise_muscleWhereUniqueInput
    update: XOR<exercise_muscleUpdateWithoutExerciseInput, exercise_muscleUncheckedUpdateWithoutExerciseInput>
    create: XOR<exercise_muscleCreateWithoutExerciseInput, exercise_muscleUncheckedCreateWithoutExerciseInput>
  }

  export type exercise_muscleUpdateWithWhereUniqueWithoutExerciseInput = {
    where: exercise_muscleWhereUniqueInput
    data: XOR<exercise_muscleUpdateWithoutExerciseInput, exercise_muscleUncheckedUpdateWithoutExerciseInput>
  }

  export type exercise_muscleUpdateManyWithWhereWithoutExerciseInput = {
    where: exercise_muscleScalarWhereInput
    data: XOR<exercise_muscleUpdateManyMutationInput, exercise_muscleUncheckedUpdateManyWithoutExerciseInput>
  }

  export type exercise_muscleScalarWhereInput = {
    AND?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
    OR?: exercise_muscleScalarWhereInput[]
    NOT?: exercise_muscleScalarWhereInput | exercise_muscleScalarWhereInput[]
    id?: IntFilter<"exercise_muscle"> | number
    exercise_id?: IntFilter<"exercise_muscle"> | number
    muscle_id?: IntFilter<"exercise_muscle"> | number
    rating?: IntFilter<"exercise_muscle"> | number
  }

  export type exercise_equipmentUpsertWithWhereUniqueWithoutExerciseInput = {
    where: exercise_equipmentWhereUniqueInput
    update: XOR<exercise_equipmentUpdateWithoutExerciseInput, exercise_equipmentUncheckedUpdateWithoutExerciseInput>
    create: XOR<exercise_equipmentCreateWithoutExerciseInput, exercise_equipmentUncheckedCreateWithoutExerciseInput>
  }

  export type exercise_equipmentUpdateWithWhereUniqueWithoutExerciseInput = {
    where: exercise_equipmentWhereUniqueInput
    data: XOR<exercise_equipmentUpdateWithoutExerciseInput, exercise_equipmentUncheckedUpdateWithoutExerciseInput>
  }

  export type exercise_equipmentUpdateManyWithWhereWithoutExerciseInput = {
    where: exercise_equipmentScalarWhereInput
    data: XOR<exercise_equipmentUpdateManyMutationInput, exercise_equipmentUncheckedUpdateManyWithoutExerciseInput>
  }

  export type exercise_equipmentScalarWhereInput = {
    AND?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
    OR?: exercise_equipmentScalarWhereInput[]
    NOT?: exercise_equipmentScalarWhereInput | exercise_equipmentScalarWhereInput[]
    id?: IntFilter<"exercise_equipment"> | number
    exercise_id?: IntFilter<"exercise_equipment"> | number
    equipment_id?: IntFilter<"exercise_equipment"> | number
  }

  export type workout_exerciseUpsertWithWhereUniqueWithoutExerciseInput = {
    where: workout_exerciseWhereUniqueInput
    update: XOR<workout_exerciseUpdateWithoutExerciseInput, workout_exerciseUncheckedUpdateWithoutExerciseInput>
    create: XOR<workout_exerciseCreateWithoutExerciseInput, workout_exerciseUncheckedCreateWithoutExerciseInput>
  }

  export type workout_exerciseUpdateWithWhereUniqueWithoutExerciseInput = {
    where: workout_exerciseWhereUniqueInput
    data: XOR<workout_exerciseUpdateWithoutExerciseInput, workout_exerciseUncheckedUpdateWithoutExerciseInput>
  }

  export type workout_exerciseUpdateManyWithWhereWithoutExerciseInput = {
    where: workout_exerciseScalarWhereInput
    data: XOR<workout_exerciseUpdateManyMutationInput, workout_exerciseUncheckedUpdateManyWithoutExerciseInput>
  }

  export type excercise_groupUpsertWithWhereUniqueWithoutExerciseInput = {
    where: excercise_groupWhereUniqueInput
    update: XOR<excercise_groupUpdateWithoutExerciseInput, excercise_groupUncheckedUpdateWithoutExerciseInput>
    create: XOR<excercise_groupCreateWithoutExerciseInput, excercise_groupUncheckedCreateWithoutExerciseInput>
  }

  export type excercise_groupUpdateWithWhereUniqueWithoutExerciseInput = {
    where: excercise_groupWhereUniqueInput
    data: XOR<excercise_groupUpdateWithoutExerciseInput, excercise_groupUncheckedUpdateWithoutExerciseInput>
  }

  export type excercise_groupUpdateManyWithWhereWithoutExerciseInput = {
    where: excercise_groupScalarWhereInput
    data: XOR<excercise_groupUpdateManyMutationInput, excercise_groupUncheckedUpdateManyWithoutExerciseInput>
  }

  export type excercise_groupScalarWhereInput = {
    AND?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
    OR?: excercise_groupScalarWhereInput[]
    NOT?: excercise_groupScalarWhereInput | excercise_groupScalarWhereInput[]
    id?: IntFilter<"excercise_group"> | number
    excercise_id?: IntFilter<"excercise_group"> | number
    group_id?: IntFilter<"excercise_group"> | number
    difficulty?: IntNullableFilter<"excercise_group"> | number | null
  }

  export type excercise_groupCreateWithoutGroupInput = {
    difficulty?: number | null
    exercise: exerciseCreateNestedOneWithoutGroupInput
  }

  export type excercise_groupUncheckedCreateWithoutGroupInput = {
    id?: number
    excercise_id: number
    difficulty?: number | null
  }

  export type excercise_groupCreateOrConnectWithoutGroupInput = {
    where: excercise_groupWhereUniqueInput
    create: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput>
  }

  export type excercise_groupCreateManyGroupInputEnvelope = {
    data: excercise_groupCreateManyGroupInput | excercise_groupCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type user_group_levelCreateWithoutGroupInput = {
    level?: number | null
    user: usersCreateNestedOneWithoutLevelInput
  }

  export type user_group_levelUncheckedCreateWithoutGroupInput = {
    id?: number
    user_id: number
    level?: number | null
  }

  export type user_group_levelCreateOrConnectWithoutGroupInput = {
    where: user_group_levelWhereUniqueInput
    create: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput>
  }

  export type user_group_levelCreateManyGroupInputEnvelope = {
    data: user_group_levelCreateManyGroupInput | user_group_levelCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type excercise_groupUpsertWithWhereUniqueWithoutGroupInput = {
    where: excercise_groupWhereUniqueInput
    update: XOR<excercise_groupUpdateWithoutGroupInput, excercise_groupUncheckedUpdateWithoutGroupInput>
    create: XOR<excercise_groupCreateWithoutGroupInput, excercise_groupUncheckedCreateWithoutGroupInput>
  }

  export type excercise_groupUpdateWithWhereUniqueWithoutGroupInput = {
    where: excercise_groupWhereUniqueInput
    data: XOR<excercise_groupUpdateWithoutGroupInput, excercise_groupUncheckedUpdateWithoutGroupInput>
  }

  export type excercise_groupUpdateManyWithWhereWithoutGroupInput = {
    where: excercise_groupScalarWhereInput
    data: XOR<excercise_groupUpdateManyMutationInput, excercise_groupUncheckedUpdateManyWithoutGroupInput>
  }

  export type user_group_levelUpsertWithWhereUniqueWithoutGroupInput = {
    where: user_group_levelWhereUniqueInput
    update: XOR<user_group_levelUpdateWithoutGroupInput, user_group_levelUncheckedUpdateWithoutGroupInput>
    create: XOR<user_group_levelCreateWithoutGroupInput, user_group_levelUncheckedCreateWithoutGroupInput>
  }

  export type user_group_levelUpdateWithWhereUniqueWithoutGroupInput = {
    where: user_group_levelWhereUniqueInput
    data: XOR<user_group_levelUpdateWithoutGroupInput, user_group_levelUncheckedUpdateWithoutGroupInput>
  }

  export type user_group_levelUpdateManyWithWhereWithoutGroupInput = {
    where: user_group_levelScalarWhereInput
    data: XOR<user_group_levelUpdateManyMutationInput, user_group_levelUncheckedUpdateManyWithoutGroupInput>
  }

  export type usersCreateWithoutLevelInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentCreateNestedManyWithoutUserInput
    workouts?: workoutperweekCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutLevelInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    equipments?: user_equipmentUncheckedCreateNestedManyWithoutUserInput
    workouts?: workoutperweekUncheckedCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityUncheckedCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutLevelInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutLevelInput, usersUncheckedCreateWithoutLevelInput>
  }

  export type groupCreateWithoutUserInput = {
    name: string
    exercises?: excercise_groupCreateNestedManyWithoutGroupInput
  }

  export type groupUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    exercises?: excercise_groupUncheckedCreateNestedManyWithoutGroupInput
  }

  export type groupCreateOrConnectWithoutUserInput = {
    where: groupWhereUniqueInput
    create: XOR<groupCreateWithoutUserInput, groupUncheckedCreateWithoutUserInput>
  }

  export type usersUpsertWithoutLevelInput = {
    update: XOR<usersUpdateWithoutLevelInput, usersUncheckedUpdateWithoutLevelInput>
    create: XOR<usersCreateWithoutLevelInput, usersUncheckedCreateWithoutLevelInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutLevelInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutLevelInput, usersUncheckedUpdateWithoutLevelInput>
  }

  export type usersUpdateWithoutLevelInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    equipments?: user_equipmentUncheckedUpdateManyWithoutUserNestedInput
    workouts?: workoutperweekUncheckedUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUncheckedUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type groupUpsertWithoutUserInput = {
    update: XOR<groupUpdateWithoutUserInput, groupUncheckedUpdateWithoutUserInput>
    create: XOR<groupCreateWithoutUserInput, groupUncheckedCreateWithoutUserInput>
    where?: groupWhereInput
  }

  export type groupUpdateToOneWithWhereWithoutUserInput = {
    where?: groupWhereInput
    data: XOR<groupUpdateWithoutUserInput, groupUncheckedUpdateWithoutUserInput>
  }

  export type groupUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    exercises?: excercise_groupUpdateManyWithoutGroupNestedInput
  }

  export type groupUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    exercises?: excercise_groupUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type exerciseCreateWithoutGroupInput = {
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutGroupInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleUncheckedCreateNestedManyWithoutExerciseInput
    equipments?: exercise_equipmentUncheckedCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutGroupInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutGroupInput, exerciseUncheckedCreateWithoutGroupInput>
  }

  export type groupCreateWithoutExercisesInput = {
    name: string
    user?: user_group_levelCreateNestedManyWithoutGroupInput
  }

  export type groupUncheckedCreateWithoutExercisesInput = {
    id?: number
    name: string
    user?: user_group_levelUncheckedCreateNestedManyWithoutGroupInput
  }

  export type groupCreateOrConnectWithoutExercisesInput = {
    where: groupWhereUniqueInput
    create: XOR<groupCreateWithoutExercisesInput, groupUncheckedCreateWithoutExercisesInput>
  }

  export type exerciseUpsertWithoutGroupInput = {
    update: XOR<exerciseUpdateWithoutGroupInput, exerciseUncheckedUpdateWithoutGroupInput>
    create: XOR<exerciseCreateWithoutGroupInput, exerciseUncheckedCreateWithoutGroupInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutGroupInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutGroupInput, exerciseUncheckedUpdateWithoutGroupInput>
  }

  export type exerciseUpdateWithoutGroupInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUncheckedUpdateManyWithoutExerciseNestedInput
    equipments?: exercise_equipmentUncheckedUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type groupUpsertWithoutExercisesInput = {
    update: XOR<groupUpdateWithoutExercisesInput, groupUncheckedUpdateWithoutExercisesInput>
    create: XOR<groupCreateWithoutExercisesInput, groupUncheckedCreateWithoutExercisesInput>
    where?: groupWhereInput
  }

  export type groupUpdateToOneWithWhereWithoutExercisesInput = {
    where?: groupWhereInput
    data: XOR<groupUpdateWithoutExercisesInput, groupUncheckedUpdateWithoutExercisesInput>
  }

  export type groupUpdateWithoutExercisesInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: user_group_levelUpdateManyWithoutGroupNestedInput
  }

  export type groupUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user?: user_group_levelUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type exerciseCreateWithoutMusclesInput = {
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    equipments?: exercise_equipmentCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseCreateNestedManyWithoutExerciseInput
    group?: excercise_groupCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutMusclesInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    equipments?: exercise_equipmentUncheckedCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseUncheckedCreateNestedManyWithoutExerciseInput
    group?: excercise_groupUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutMusclesInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutMusclesInput, exerciseUncheckedCreateWithoutMusclesInput>
  }

  export type muscleCreateWithoutExercisesInput = {
    name: string
  }

  export type muscleUncheckedCreateWithoutExercisesInput = {
    id?: number
    name: string
  }

  export type muscleCreateOrConnectWithoutExercisesInput = {
    where: muscleWhereUniqueInput
    create: XOR<muscleCreateWithoutExercisesInput, muscleUncheckedCreateWithoutExercisesInput>
  }

  export type exerciseUpsertWithoutMusclesInput = {
    update: XOR<exerciseUpdateWithoutMusclesInput, exerciseUncheckedUpdateWithoutMusclesInput>
    create: XOR<exerciseCreateWithoutMusclesInput, exerciseUncheckedCreateWithoutMusclesInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutMusclesInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutMusclesInput, exerciseUncheckedUpdateWithoutMusclesInput>
  }

  export type exerciseUpdateWithoutMusclesInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipments?: exercise_equipmentUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutMusclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    equipments?: exercise_equipmentUncheckedUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUncheckedUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type muscleUpsertWithoutExercisesInput = {
    update: XOR<muscleUpdateWithoutExercisesInput, muscleUncheckedUpdateWithoutExercisesInput>
    create: XOR<muscleCreateWithoutExercisesInput, muscleUncheckedCreateWithoutExercisesInput>
    where?: muscleWhereInput
  }

  export type muscleUpdateToOneWithWhereWithoutExercisesInput = {
    where?: muscleWhereInput
    data: XOR<muscleUpdateWithoutExercisesInput, muscleUncheckedUpdateWithoutExercisesInput>
  }

  export type muscleUpdateWithoutExercisesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type muscleUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type exercise_muscleCreateWithoutMuscleInput = {
    rating: number
    exercise: exerciseCreateNestedOneWithoutMusclesInput
  }

  export type exercise_muscleUncheckedCreateWithoutMuscleInput = {
    id?: number
    exercise_id: number
    rating: number
  }

  export type exercise_muscleCreateOrConnectWithoutMuscleInput = {
    where: exercise_muscleWhereUniqueInput
    create: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput>
  }

  export type exercise_muscleCreateManyMuscleInputEnvelope = {
    data: exercise_muscleCreateManyMuscleInput | exercise_muscleCreateManyMuscleInput[]
    skipDuplicates?: boolean
  }

  export type exercise_muscleUpsertWithWhereUniqueWithoutMuscleInput = {
    where: exercise_muscleWhereUniqueInput
    update: XOR<exercise_muscleUpdateWithoutMuscleInput, exercise_muscleUncheckedUpdateWithoutMuscleInput>
    create: XOR<exercise_muscleCreateWithoutMuscleInput, exercise_muscleUncheckedCreateWithoutMuscleInput>
  }

  export type exercise_muscleUpdateWithWhereUniqueWithoutMuscleInput = {
    where: exercise_muscleWhereUniqueInput
    data: XOR<exercise_muscleUpdateWithoutMuscleInput, exercise_muscleUncheckedUpdateWithoutMuscleInput>
  }

  export type exercise_muscleUpdateManyWithWhereWithoutMuscleInput = {
    where: exercise_muscleScalarWhereInput
    data: XOR<exercise_muscleUpdateManyMutationInput, exercise_muscleUncheckedUpdateManyWithoutMuscleInput>
  }

  export type exercise_equipmentCreateWithoutEquipmentInput = {
    exercise: exerciseCreateNestedOneWithoutEquipmentsInput
  }

  export type exercise_equipmentUncheckedCreateWithoutEquipmentInput = {
    id?: number
    exercise_id: number
  }

  export type exercise_equipmentCreateOrConnectWithoutEquipmentInput = {
    where: exercise_equipmentWhereUniqueInput
    create: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput>
  }

  export type exercise_equipmentCreateManyEquipmentInputEnvelope = {
    data: exercise_equipmentCreateManyEquipmentInput | exercise_equipmentCreateManyEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type user_equipmentCreateWithoutEquipmentInput = {
    user: usersCreateNestedOneWithoutEquipmentsInput
  }

  export type user_equipmentUncheckedCreateWithoutEquipmentInput = {
    id?: number
    user_id: number
  }

  export type user_equipmentCreateOrConnectWithoutEquipmentInput = {
    where: user_equipmentWhereUniqueInput
    create: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput>
  }

  export type user_equipmentCreateManyEquipmentInputEnvelope = {
    data: user_equipmentCreateManyEquipmentInput | user_equipmentCreateManyEquipmentInput[]
    skipDuplicates?: boolean
  }

  export type exercise_equipmentUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: exercise_equipmentWhereUniqueInput
    update: XOR<exercise_equipmentUpdateWithoutEquipmentInput, exercise_equipmentUncheckedUpdateWithoutEquipmentInput>
    create: XOR<exercise_equipmentCreateWithoutEquipmentInput, exercise_equipmentUncheckedCreateWithoutEquipmentInput>
  }

  export type exercise_equipmentUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: exercise_equipmentWhereUniqueInput
    data: XOR<exercise_equipmentUpdateWithoutEquipmentInput, exercise_equipmentUncheckedUpdateWithoutEquipmentInput>
  }

  export type exercise_equipmentUpdateManyWithWhereWithoutEquipmentInput = {
    where: exercise_equipmentScalarWhereInput
    data: XOR<exercise_equipmentUpdateManyMutationInput, exercise_equipmentUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type user_equipmentUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: user_equipmentWhereUniqueInput
    update: XOR<user_equipmentUpdateWithoutEquipmentInput, user_equipmentUncheckedUpdateWithoutEquipmentInput>
    create: XOR<user_equipmentCreateWithoutEquipmentInput, user_equipmentUncheckedCreateWithoutEquipmentInput>
  }

  export type user_equipmentUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: user_equipmentWhereUniqueInput
    data: XOR<user_equipmentUpdateWithoutEquipmentInput, user_equipmentUncheckedUpdateWithoutEquipmentInput>
  }

  export type user_equipmentUpdateManyWithWhereWithoutEquipmentInput = {
    where: user_equipmentScalarWhereInput
    data: XOR<user_equipmentUpdateManyMutationInput, user_equipmentUncheckedUpdateManyWithoutEquipmentInput>
  }

  export type exerciseCreateWithoutEquipmentsInput = {
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseCreateNestedManyWithoutExerciseInput
    group?: excercise_groupCreateNestedManyWithoutExerciseInput
  }

  export type exerciseUncheckedCreateWithoutEquipmentsInput = {
    id?: number
    exercise_cd: string
    name: string
    intensity: string
    duration?: number | null
    types?: string | null
    max_rep?: number | null
    image?: string | null
    description?: string | null
    muscles?: exercise_muscleUncheckedCreateNestedManyWithoutExerciseInput
    workouts?: workout_exerciseUncheckedCreateNestedManyWithoutExerciseInput
    group?: excercise_groupUncheckedCreateNestedManyWithoutExerciseInput
  }

  export type exerciseCreateOrConnectWithoutEquipmentsInput = {
    where: exerciseWhereUniqueInput
    create: XOR<exerciseCreateWithoutEquipmentsInput, exerciseUncheckedCreateWithoutEquipmentsInput>
  }

  export type equipmentCreateWithoutExercisesInput = {
    name: string
    image?: string | null
    users?: user_equipmentCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentUncheckedCreateWithoutExercisesInput = {
    id?: number
    name: string
    image?: string | null
    users?: user_equipmentUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentCreateOrConnectWithoutExercisesInput = {
    where: equipmentWhereUniqueInput
    create: XOR<equipmentCreateWithoutExercisesInput, equipmentUncheckedCreateWithoutExercisesInput>
  }

  export type exerciseUpsertWithoutEquipmentsInput = {
    update: XOR<exerciseUpdateWithoutEquipmentsInput, exerciseUncheckedUpdateWithoutEquipmentsInput>
    create: XOR<exerciseCreateWithoutEquipmentsInput, exerciseUncheckedCreateWithoutEquipmentsInput>
    where?: exerciseWhereInput
  }

  export type exerciseUpdateToOneWithWhereWithoutEquipmentsInput = {
    where?: exerciseWhereInput
    data: XOR<exerciseUpdateWithoutEquipmentsInput, exerciseUncheckedUpdateWithoutEquipmentsInput>
  }

  export type exerciseUpdateWithoutEquipmentsInput = {
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUpdateManyWithoutExerciseNestedInput
  }

  export type exerciseUncheckedUpdateWithoutEquipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_cd?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    intensity?: StringFieldUpdateOperationsInput | string
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    types?: NullableStringFieldUpdateOperationsInput | string | null
    max_rep?: NullableIntFieldUpdateOperationsInput | number | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    muscles?: exercise_muscleUncheckedUpdateManyWithoutExerciseNestedInput
    workouts?: workout_exerciseUncheckedUpdateManyWithoutExerciseNestedInput
    group?: excercise_groupUncheckedUpdateManyWithoutExerciseNestedInput
  }

  export type equipmentUpsertWithoutExercisesInput = {
    update: XOR<equipmentUpdateWithoutExercisesInput, equipmentUncheckedUpdateWithoutExercisesInput>
    create: XOR<equipmentCreateWithoutExercisesInput, equipmentUncheckedCreateWithoutExercisesInput>
    where?: equipmentWhereInput
  }

  export type equipmentUpdateToOneWithWhereWithoutExercisesInput = {
    where?: equipmentWhereInput
    data: XOR<equipmentUpdateWithoutExercisesInput, equipmentUncheckedUpdateWithoutExercisesInput>
  }

  export type equipmentUpdateWithoutExercisesInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    users?: user_equipmentUpdateManyWithoutEquipmentNestedInput
  }

  export type equipmentUncheckedUpdateWithoutExercisesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    users?: user_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type usersCreateWithoutEquipmentsInput = {
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    workouts?: workoutperweekCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressCreateNestedManyWithoutUserInput
    level?: user_group_levelCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateWithoutEquipmentsInput = {
    id?: number
    name: string
    email: string
    password: string
    height?: number | null
    weight?: number | null
    days_of_workout?: number | null
    workouts?: workoutperweekUncheckedCreateNestedManyWithoutUserInput
    availabilities?: user_availabilityUncheckedCreateNestedManyWithoutUserInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutUserInput
    level?: user_group_levelUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersCreateOrConnectWithoutEquipmentsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutEquipmentsInput, usersUncheckedCreateWithoutEquipmentsInput>
  }

  export type equipmentCreateWithoutUsersInput = {
    name: string
    image?: string | null
    exercises?: exercise_equipmentCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    image?: string | null
    exercises?: exercise_equipmentUncheckedCreateNestedManyWithoutEquipmentInput
  }

  export type equipmentCreateOrConnectWithoutUsersInput = {
    where: equipmentWhereUniqueInput
    create: XOR<equipmentCreateWithoutUsersInput, equipmentUncheckedCreateWithoutUsersInput>
  }

  export type usersUpsertWithoutEquipmentsInput = {
    update: XOR<usersUpdateWithoutEquipmentsInput, usersUncheckedUpdateWithoutEquipmentsInput>
    create: XOR<usersCreateWithoutEquipmentsInput, usersUncheckedCreateWithoutEquipmentsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutEquipmentsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutEquipmentsInput, usersUncheckedUpdateWithoutEquipmentsInput>
  }

  export type usersUpdateWithoutEquipmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    workouts?: workoutperweekUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUpdateManyWithoutUserNestedInput
    level?: user_group_levelUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateWithoutEquipmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    days_of_workout?: NullableIntFieldUpdateOperationsInput | number | null
    workouts?: workoutperweekUncheckedUpdateManyWithoutUserNestedInput
    availabilities?: user_availabilityUncheckedUpdateManyWithoutUserNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutUserNestedInput
    level?: user_group_levelUncheckedUpdateManyWithoutUserNestedInput
  }

  export type equipmentUpsertWithoutUsersInput = {
    update: XOR<equipmentUpdateWithoutUsersInput, equipmentUncheckedUpdateWithoutUsersInput>
    create: XOR<equipmentCreateWithoutUsersInput, equipmentUncheckedCreateWithoutUsersInput>
    where?: equipmentWhereInput
  }

  export type equipmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: equipmentWhereInput
    data: XOR<equipmentUpdateWithoutUsersInput, equipmentUncheckedUpdateWithoutUsersInput>
  }

  export type equipmentUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: exercise_equipmentUpdateManyWithoutEquipmentNestedInput
  }

  export type equipmentUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: exercise_equipmentUncheckedUpdateManyWithoutEquipmentNestedInput
  }

  export type workoutCreateWithoutPerWeekInput = {
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressCreateNestedManyWithoutWorkoutInput
  }

  export type workoutUncheckedCreateWithoutPerWeekInput = {
    id?: number
    date?: Date | string
    status?: string | null
    exercises?: workout_exerciseUncheckedCreateNestedManyWithoutWorkoutInput
    workout_progress?: workout_progressUncheckedCreateNestedManyWithoutWorkoutInput
  }

  export type workoutCreateOrConnectWithoutPerWeekInput = {
    where: workoutWhereUniqueInput
    create: XOR<workoutCreateWithoutPerWeekInput, workoutUncheckedCreateWithoutPerWeekInput>
  }

  export type workoutperweekCreateWithoutWorkoutsInput = {
    user: usersCreateNestedOneWithoutWorkoutsInput
  }

  export type workoutperweekUncheckedCreateWithoutWorkoutsInput = {
    id?: number
    user_id: number
  }

  export type workoutperweekCreateOrConnectWithoutWorkoutsInput = {
    where: workoutperweekWhereUniqueInput
    create: XOR<workoutperweekCreateWithoutWorkoutsInput, workoutperweekUncheckedCreateWithoutWorkoutsInput>
  }

  export type workoutUpsertWithoutPerWeekInput = {
    update: XOR<workoutUpdateWithoutPerWeekInput, workoutUncheckedUpdateWithoutPerWeekInput>
    create: XOR<workoutCreateWithoutPerWeekInput, workoutUncheckedCreateWithoutPerWeekInput>
    where?: workoutWhereInput
  }

  export type workoutUpdateToOneWithWhereWithoutPerWeekInput = {
    where?: workoutWhereInput
    data: XOR<workoutUpdateWithoutPerWeekInput, workoutUncheckedUpdateWithoutPerWeekInput>
  }

  export type workoutUpdateWithoutPerWeekInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutUncheckedUpdateWithoutPerWeekInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    exercises?: workout_exerciseUncheckedUpdateManyWithoutWorkoutNestedInput
    workout_progress?: workout_progressUncheckedUpdateManyWithoutWorkoutNestedInput
  }

  export type workoutperweekUpsertWithoutWorkoutsInput = {
    update: XOR<workoutperweekUpdateWithoutWorkoutsInput, workoutperweekUncheckedUpdateWithoutWorkoutsInput>
    create: XOR<workoutperweekCreateWithoutWorkoutsInput, workoutperweekUncheckedCreateWithoutWorkoutsInput>
    where?: workoutperweekWhereInput
  }

  export type workoutperweekUpdateToOneWithWhereWithoutWorkoutsInput = {
    where?: workoutperweekWhereInput
    data: XOR<workoutperweekUpdateWithoutWorkoutsInput, workoutperweekUncheckedUpdateWithoutWorkoutsInput>
  }

  export type workoutperweekUpdateWithoutWorkoutsInput = {
    user?: usersUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type workoutperweekUncheckedUpdateWithoutWorkoutsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentCreateManyUserInput = {
    id?: number
    equipment_id: number
  }

  export type workoutperweekCreateManyUserInput = {
    id?: number
  }

  export type user_availabilityCreateManyUserInput = {
    id?: number
    day: string
    minutes: number
  }

  export type workout_progressCreateManyUserInput = {
    id?: number
    workout_id: number
    date: Date | string
  }

  export type user_group_levelCreateManyUserInput = {
    id?: number
    group_id: number
    level?: number | null
  }

  export type user_equipmentUpdateWithoutUserInput = {
    equipment?: equipmentUpdateOneRequiredWithoutUsersNestedInput
  }

  export type user_equipmentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type workoutperweekUpdateWithoutUserInput = {
    workouts?: workout_per_week_workoutUpdateManyWithoutWorkoutperweekNestedInput
  }

  export type workoutperweekUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workouts?: workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutperweekNestedInput
  }

  export type workoutperweekUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type user_availabilityUpdateWithoutUserInput = {
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type user_availabilityUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type user_availabilityUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    minutes?: IntFieldUpdateOperationsInput | number
  }

  export type workout_progressUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    workout?: workoutUpdateOneRequiredWithoutWorkout_progressNestedInput
    exerciseProgress?: exercise_progressUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseProgress?: exercise_progressUncheckedUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_group_levelUpdateWithoutUserInput = {
    level?: NullableIntFieldUpdateOperationsInput | number | null
    group?: groupUpdateOneRequiredWithoutUserNestedInput
  }

  export type user_group_levelUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_levelUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type exercise_progressCreateManyWorkout_progressInput = {
    id?: number
    workout_exercise_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressUpdateWithoutWorkout_progressInput = {
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
    workout_exercise?: workout_exerciseUpdateOneRequiredWithoutExercise_progressNestedInput
  }

  export type exercise_progressUncheckedUpdateWithoutWorkout_progressInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_exercise_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exercise_progressUncheckedUpdateManyWithoutWorkout_progressInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_exercise_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type workout_per_week_workoutCreateManyWorkoutperweekInput = {
    id?: number
    workout_id: number
  }

  export type workout_per_week_workoutUpdateWithoutWorkoutperweekInput = {
    workout?: workoutUpdateOneRequiredWithoutPerWeekNestedInput
  }

  export type workout_per_week_workoutUncheckedUpdateWithoutWorkoutperweekInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutperweekInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_exerciseCreateManyWorkoutInput = {
    id?: number
    exercise_id: number
    reps?: number
    set?: number
    weight?: number | null
  }

  export type workout_per_week_workoutCreateManyWorkoutInput = {
    id?: number
    workoutperweek_id: number
  }

  export type workout_progressCreateManyWorkoutInput = {
    id?: number
    user_id: number
    date: Date | string
  }

  export type workout_exerciseUpdateWithoutWorkoutInput = {
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    exercise?: exerciseUpdateOneRequiredWithoutWorkoutsNestedInput
    exercise_progress?: exercise_progressUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    exercise_progress?: exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type workout_per_week_workoutUpdateWithoutWorkoutInput = {
    workoutperweek?: workoutperweekUpdateOneRequiredWithoutWorkoutsNestedInput
  }

  export type workout_per_week_workoutUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutperweek_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_per_week_workoutUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    workoutperweek_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_progressUpdateWithoutWorkoutInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: usersUpdateOneRequiredWithoutWorkout_progressNestedInput
    exerciseProgress?: exercise_progressUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    exerciseProgress?: exercise_progressUncheckedUpdateManyWithoutWorkout_progressNestedInput
  }

  export type workout_progressUncheckedUpdateManyWithoutWorkoutInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type exercise_progressCreateManyWorkout_exerciseInput = {
    id?: number
    workout_progress_id: number
    sets: number
    reps: number
    weight_used?: number | null
  }

  export type exercise_progressUpdateWithoutWorkout_exerciseInput = {
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
    workout_progress?: workout_progressUpdateOneRequiredWithoutExerciseProgressNestedInput
  }

  export type exercise_progressUncheckedUpdateWithoutWorkout_exerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_progress_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_progress_id?: IntFieldUpdateOperationsInput | number
    sets?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    weight_used?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type exercise_muscleCreateManyExerciseInput = {
    id?: number
    muscle_id: number
    rating: number
  }

  export type exercise_equipmentCreateManyExerciseInput = {
    id?: number
    equipment_id: number
  }

  export type workout_exerciseCreateManyExerciseInput = {
    id?: number
    workout_id: number
    reps?: number
    set?: number
    weight?: number | null
  }

  export type excercise_groupCreateManyExerciseInput = {
    id?: number
    group_id: number
    difficulty?: number | null
  }

  export type exercise_muscleUpdateWithoutExerciseInput = {
    rating?: IntFieldUpdateOperationsInput | number
    muscle?: muscleUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type exercise_muscleUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    muscle_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_muscleUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    muscle_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_equipmentUpdateWithoutExerciseInput = {
    equipment?: equipmentUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type exercise_equipmentUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_equipmentUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    equipment_id?: IntFieldUpdateOperationsInput | number
  }

  export type workout_exerciseUpdateWithoutExerciseInput = {
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    workout?: workoutUpdateOneRequiredWithoutExercisesNestedInput
    exercise_progress?: exercise_progressUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    exercise_progress?: exercise_progressUncheckedUpdateManyWithoutWorkout_exerciseNestedInput
  }

  export type workout_exerciseUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    workout_id?: IntFieldUpdateOperationsInput | number
    reps?: IntFieldUpdateOperationsInput | number
    set?: IntFieldUpdateOperationsInput | number
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupUpdateWithoutExerciseInput = {
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    group?: groupUpdateOneRequiredWithoutExercisesNestedInput
  }

  export type excercise_groupUncheckedUpdateWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupUncheckedUpdateManyWithoutExerciseInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupCreateManyGroupInput = {
    id?: number
    excercise_id: number
    difficulty?: number | null
  }

  export type user_group_levelCreateManyGroupInput = {
    id?: number
    user_id: number
    level?: number | null
  }

  export type excercise_groupUpdateWithoutGroupInput = {
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
    exercise?: exerciseUpdateOneRequiredWithoutGroupNestedInput
  }

  export type excercise_groupUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    excercise_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type excercise_groupUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    excercise_id?: IntFieldUpdateOperationsInput | number
    difficulty?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_levelUpdateWithoutGroupInput = {
    level?: NullableIntFieldUpdateOperationsInput | number | null
    user?: usersUpdateOneRequiredWithoutLevelNestedInput
  }

  export type user_group_levelUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_levelUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    level?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type exercise_muscleCreateManyMuscleInput = {
    id?: number
    exercise_id: number
    rating: number
  }

  export type exercise_muscleUpdateWithoutMuscleInput = {
    rating?: IntFieldUpdateOperationsInput | number
    exercise?: exerciseUpdateOneRequiredWithoutMusclesNestedInput
  }

  export type exercise_muscleUncheckedUpdateWithoutMuscleInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_muscleUncheckedUpdateManyWithoutMuscleInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_equipmentCreateManyEquipmentInput = {
    id?: number
    exercise_id: number
  }

  export type user_equipmentCreateManyEquipmentInput = {
    id?: number
    user_id: number
  }

  export type exercise_equipmentUpdateWithoutEquipmentInput = {
    exercise?: exerciseUpdateOneRequiredWithoutEquipmentsNestedInput
  }

  export type exercise_equipmentUncheckedUpdateWithoutEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
  }

  export type exercise_equipmentUncheckedUpdateManyWithoutEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    exercise_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentUpdateWithoutEquipmentInput = {
    user?: usersUpdateOneRequiredWithoutEquipmentsNestedInput
  }

  export type user_equipmentUncheckedUpdateWithoutEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_equipmentUncheckedUpdateManyWithoutEquipmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}